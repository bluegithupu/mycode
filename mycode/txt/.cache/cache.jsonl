{"file_path": "/Users/mac/Desktop/gpt_test/mycode/txt/monitor.txt", "relative_path": "monitor.txt", "content": [{"module_name": "##File: /Users/mac/Desktop/gpt_test/mycode/txt/monitor.txt", "source_code": "File path: /Users/mac/Desktop/woker_code/monitor/main.go\n```golang\npackage main\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/cmd\"\n)\n\n// @title Monitor API Swagger\n// @version 2.0\n// @BasePath /monitor/v2\n// @host    luban.console.galaxy.cloud\nfunc main() {\n\tcmd.Execute()\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/response/response.go\n```golang\npackage response\n\nimport (\n\t\"net/http\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"github.com/gin-gonic/gin\"\n)\n\n// Response 封装返回的代码\nfunc Response(c *gin.Context, httpStatus, code int, msg string, data interface{}) {\n\tc.JSON(httpStatus, gin.H{\"Code\": code, \"Message\": msg, \"Data\": data, \"RequestID\": lib.GetTraceContext(c).TraceId})\n\treturn\n}\n\n// Success 成功时的响应\nfunc Success(c *gin.Context, data interface{}) {\n\tResponse(c, http.StatusOK, consts.Success, \"success\", data)\n}\n\n// Failed 失败时的响应\nfunc Failed(c *gin.Context, httpStatus, code int, msg string) {\n\tResponse(c, httpStatus, code, msg, nil)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/docs/docs.go\n```golang\n// Package docs GENERATED BY SWAG; DO NOT EDIT\n// This file was generated by swaggo/swag\npackage docs\n\nimport \"github.com/swaggo/swag\"\n\nconst docTemplate = `{\n    \"schemes\": {{ marshal .Schemes }},\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"description\": \"{{escape .Description}}\",\n        \"title\": \"{{.Title}}\",\n        \"contact\": {},\n        \"version\": \"{{.Version}}\"\n    },\n    \"host\": \"{{.Host}}\",\n    \"basePath\": \"{{.BasePath}}\",\n    \"paths\": {\n        \"/block_storage/ebs_pool/detail_metric_lines\": {\n            \"post\": {\n                \"description\": \"Get EbsPool DetailMetricLine\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsPool\"\n                ],\n                \"summary\": \"EbsPool DetailMetricLine\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ebsPool DetailMetricLine Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolDetailMetricLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolDetailMetricLineRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/block_storage/ebs_pool/detail_metric_overview\": {\n            \"post\": {\n                \"description\": \"Get EbsPool DetailMetricOverview\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsPool\"\n                ],\n                \"summary\": \"EbsPool DetailMetricOverview\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ebsPool DetailMetricOverview Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolDetailMetricReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolDetailMetricRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/block_storage/ebs_pool/list\": {\n            \"post\": {\n                \"description\": \"Get EbsPool List\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsPool\"\n                ],\n                \"summary\": \"EbsPool List\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ebsPool List Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolListReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolListReq\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/block_storage/ebs_pool/list_optional_condition\": {\n            \"get\": {\n                \"description\": \"Get EbsPool ListOptionalCondition\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsPool\"\n                ],\n                \"summary\": \"EbsPool ListOptionalCondition\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.OptionalEbsPoolResult\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/block_storage/ebs_pool/overview\": {\n            \"post\": {\n                \"description\": \"Get EbsPool  Overview\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsPool\"\n                ],\n                \"summary\": \"EbsPool  Overview\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ebsPool Overview Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolOverviewReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolOverviewRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/block_storage/ebs_pool/overview_alert\": {\n            \"post\": {\n                \"description\": \"Get EbsPool Alert Overview\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsPool\"\n                ],\n                \"summary\": \"EbsPool Alert Overview\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ebsPool Overview Alert Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolOverviewAlertReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolOverviewAlertRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/block_storage/ebs_pool/overview_line\": {\n            \"post\": {\n                \"description\": \"Get EbsPool Overview\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsPool\"\n                ],\n                \"summary\": \"EbsPool OverviewLine\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ebsPool OverviewLine Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolOverviewLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolOverviewLineRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/block_storage/ebs_volume/detail_metric\": {\n            \"post\": {\n                \"description\": \"Get EbsVolume DetailMetric\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsVolume\"\n                ],\n                \"summary\": \"EbsVolume DetailMetric\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ebsVolume detail metric Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsVolumeDetailMetricReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsVolumeDetailMetricRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/block_storage/ebs_volume/detail_metric_lines\": {\n            \"post\": {\n                \"description\": \"Get EbsVolume DetailMetricLine\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsVolume\"\n                ],\n                \"summary\": \"EbsVolume DetailMetricLine\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ebsVolume detail metric Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsVolumeDetailMetricLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsVolumeDetailMetricLineRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/block_storage/ebs_volume/overview\": {\n            \"post\": {\n                \"description\": \"Get EbsVolume Overview\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsVolume\"\n                ],\n                \"summary\": \"EbsVolume Overview\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ebsVolume Overview Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsVolumeOverviewReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsVolumeOverviewRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/block_storage/ebs_volume/overview_top\": {\n            \"post\": {\n                \"description\": \"Get EbsVolume OverviewTop\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"EbsVolume\"\n                ],\n                \"summary\": \"EbsVolume OverviewTop\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ebsVolume Overview Top Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsVolumeOverviewTopReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsVolumeOverviewTopRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/compute/compute_pool/detail_line\": {\n            \"post\": {\n                \"description\": \"Get ComputePool Monitor DetailLine\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"computePool\"\n                ],\n                \"summary\": \"ComputePool Monitor DetailLine\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ComputePool Detail Line Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolDetailLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolDetailLineRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/compute/compute_pool/list\": {\n            \"post\": {\n                \"description\": \"Get ComputePool Monitor List\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"computePool\"\n                ],\n                \"summary\": \"ComputePool Monitor List\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ComputePool List Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolListReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolListRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/compute/compute_pool/overview_alert\": {\n            \"post\": {\n                \"description\": \"Get ComputePool Alert Overview\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"computePool\"\n                ],\n                \"summary\": \"ComputePool Alert Overview\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ComputePool Overview Alert Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolOverviewAlertReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolOverviewAlertRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/compute/compute_pool/overview_line\": {\n            \"post\": {\n                \"description\": \"Get ComputePool Monitor OverviewLine\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"computePool\"\n                ],\n                \"summary\": \"ComputePool Monitor OverviewLine\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ComputePool Overview Line Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolOverviewLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolOverviewLineRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/compute/compute_pool/overview_monitor\": {\n            \"post\": {\n                \"description\": \"Get ComputePool Monitor Overview\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"computePool\"\n                ],\n                \"summary\": \"ComputePool Monitor Overview\",\n                \"parameters\": [\n                    {\n                        \"description\": \"ComputePool Overview Monitor Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolOverviewMonitorReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolOverviewMonitorRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/compute/product/vm/detail_metric_lines\": {\n            \"post\": {\n                \"description\": \"Compute Product Vm detail MetricLines\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"vm\"\n                ],\n                \"summary\": \"Vm Detail MetricLines\",\n                \"parameters\": [\n                    {\n                        \"description\": \"Vm Detail Metrics Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.VmDetailMetricLinesReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.VmDetailMetricLinesRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/compute/product/vm/detail_metrics\": {\n            \"post\": {\n                \"description\": \"Compute Product Vm detail Metrics\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"vm\"\n                ],\n                \"summary\": \"Vm Detail Metrics\",\n                \"parameters\": [\n                    {\n                        \"description\": \"Vm Detail Metrics Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.VmDetailMetricsReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.VmDetailMetricsRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/compute/product/vm/overview_monitor\": {\n            \"post\": {\n                \"description\": \"Compute Product Vm Monitor Overview\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"vm\"\n                ],\n                \"summary\": \"Vm Monitor Overview\",\n                \"parameters\": [\n                    {\n                        \"description\": \"Vm Overview Monitor Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.VmOverviewMonitorReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.VmOverviewMonitorRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/compute/product/vm/overview_top\": {\n            \"post\": {\n                \"description\": \"Compute Product Vm topK Overview\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"vm\"\n                ],\n                \"summary\": \"Vm TopK Overview\",\n                \"parameters\": [\n                    {\n                        \"description\": \"Vm Overview TopK Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.VmOverviewTopReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.VmOverviewTopRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/dashboard/compute_pool_line\": {\n            \"post\": {\n                \"description\": \"Get Dashboard ComputePoolLine\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"dashBoard\"\n                ],\n                \"summary\": \"Dashboard ComputePoolLine\",\n                \"parameters\": [\n                    {\n                        \"description\": \" Dashboard ComputePoolLine Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ComputePoolLineRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/dashboard/ebs_pool_line\": {\n            \"post\": {\n                \"description\": \"Get Dashboard EbsPoolLine\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"dashBoard\"\n                ],\n                \"summary\": \"Dashboard EbsPoolLine\",\n                \"parameters\": [\n                    {\n                        \"description\": \" Dashboard EbsPoolLine Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.EbsPoolLineRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/dashboard/object_pool_line\": {\n            \"post\": {\n                \"description\": \"Get Dashboard ObjectPoolLine\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"dashBoard\"\n                ],\n                \"summary\": \"Dashboard ObjectPoolLine\",\n                \"parameters\": [\n                    {\n                        \"description\": \" Dashboard ObjectPoolLine Request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectPoolLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectPoolLineRsp\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_pool/detail_metric_lines\": {\n            \"post\": {\n                \"description\": \"资源池-对象存储-监控详情-折线图\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectPool\"\n                ],\n                \"summary\": \"ObjectPool Monitor DetailMetricLines\",\n                \"parameters\": [\n                    {\n                        \"description\": \"object pool detail metric lines request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectPoolDetailMetricLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectPoolDetailMetricLineRes\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_pool/detail_metric_overview\": {\n            \"post\": {\n                \"description\": \"资源池-对象存储-监控详情-概览\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectPool\"\n                ],\n                \"summary\": \"ObjectPool Monitor DetailMetricOverview\",\n                \"parameters\": [\n                    {\n                        \"description\": \"object pool detail metric overview request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectPoolDetailMetricReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectPoolDetailMetricRes\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_pool/list\": {\n            \"post\": {\n                \"description\": \"资源池-对象存储-监控列表\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectPool\"\n                ],\n                \"summary\": \"ObjectPool Monitor List\",\n                \"parameters\": [\n                    {\n                        \"description\": \"object pool monitor request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ListReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ListRes\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_pool/list_optional_condition\": {\n            \"get\": {\n                \"description\": \"资源池-对象存储-监控详情-可选条件\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectPool\"\n                ],\n                \"summary\": \"ObjectPool Monitor List optional condition\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.OptionalObjectPoolResult\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_pool/overview_alert\": {\n            \"post\": {\n                \"description\": \"资源池-对象存储-告警概览\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectPool\"\n                ],\n                \"summary\": \"ObjectPool Monitor OverviewAlert\",\n                \"parameters\": [\n                    {\n                        \"description\": \"object pool monitor overview alert request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.OverViewAlertReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.OverViewAlertRes\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_pool/overview_line\": {\n            \"post\": {\n                \"description\": \"资源池-对象存储-概览折线图\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectPool\"\n                ],\n                \"summary\": \"ObjectPool Monitor OverviewLine\",\n                \"parameters\": [\n                    {\n                        \"description\": \"object pool monitor overview line request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.OverviewLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.OverViewLineRes\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_pool/overview_monitor\": {\n            \"post\": {\n                \"description\": \"资源池-对象存储-概览\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectPool\"\n                ],\n                \"summary\": \"ObjectPool Monitor OverviewMonitor\",\n                \"parameters\": [\n                    {\n                        \"description\": \"object pool monitor Overview monitor request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.OverviewReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.OverViewRes\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_volume/detail_metric\": {\n            \"post\": {\n                \"description\": \"云产品-对象存储-监控详情\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectVolume\"\n                ],\n                \"summary\": \"ObjectVolume Monitor DetailMetric\",\n                \"parameters\": [\n                    {\n                        \"description\": \"object volume monitor detail metric request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectVolumeDetailMetricReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectVolumeDetailMetricRes\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_volume/detail_metric_lines\": {\n            \"post\": {\n                \"description\": \"云产品-对象存储-监控详情折线图\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectVolume\"\n                ],\n                \"summary\": \"ObjectVolume Monitor DetailMetricLines\",\n                \"parameters\": [\n                    {\n                        \"description\": \"object volume monitor detail metric lines request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectVolumeDetailMetricLineReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectVolumeDetailMetricLineRes\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_volume/overview\": {\n            \"post\": {\n                \"description\": \"云产品-对象存储-概览\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectVolume\"\n                ],\n                \"summary\": \"ObjectVolume Monitor Overview\",\n                \"parameters\": [\n                    {\n                        \"description\": \"object volume monitor overview request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectVolumeOverviewReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectVolumeOverviewRes\"\n                        }\n                    }\n                }\n            }\n        },\n        \"/object_storage/object_volume/overview_top\": {\n            \"post\": {\n                \"description\": \"云产品-对象存储-概览Top\",\n                \"consumes\": [\n                    \"application/json\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"tags\": [\n                    \"ObjectVolume\"\n                ],\n                \"summary\": \"ObjectVolume Monitor OverviewTop\",\n                \"parameters\": [\n                    {\n                        \"description\": \"object volume monitor overview top request\",\n                        \"name\": \"body\",\n                        \"in\": \"body\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectVolumeOverviewTopReq\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/dto.ObjectVolumeOverviewTopRes\"\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"definitions\": {\n        \"dto.ComputePoolDetailLineReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"MetricName\": {\n                    \"type\": \"string\"\n                },\n                \"Name\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.ComputePoolDetailLineRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Lines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.ComputePoolLineReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.ComputePoolLineRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"CpuRate\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                },\n                \"DiskRate\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                },\n                \"MemoryRate\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.ComputePoolListReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Name\": {\n                    \"type\": \"string\"\n                },\n                \"OrderCode\": {\n                    \"type\": \"string\"\n                },\n                \"OrderType\": {\n                    \"type\": \"string\"\n                },\n                \"PageNo\": {\n                    \"type\": \"integer\"\n                },\n                \"PageSize\": {\n                    \"type\": \"integer\",\n                    \"maximum\": 1000\n                },\n                \"Query\": {\n                    \"$ref\": \"#/definitions/dto.Query\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.ComputePoolListRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"DataList\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/dto.ComputePoolMonitor\"\n                    }\n                },\n                \"PageNo\": {\n                    \"type\": \"integer\"\n                },\n                \"PageSize\": {\n                    \"type\": \"integer\"\n                },\n                \"TotalCount\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.ComputePoolMonitor\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"AlertCount\": {\n                    \"type\": \"integer\"\n                },\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"CpuRate\": {\n                    \"type\": \"number\"\n                },\n                \"CpuRemain\": {\n                    \"type\": \"integer\"\n                },\n                \"CpuTotal\": {\n                    \"type\": \"integer\"\n                },\n                \"CpuUsedTotal\": {\n                    \"type\": \"integer\"\n                },\n                \"CreateTime\": {\n                    \"type\": \"string\"\n                },\n                \"DiskRate\": {\n                    \"type\": \"number\"\n                },\n                \"HostCount\": {\n                    \"type\": \"integer\"\n                },\n                \"Id\": {\n                    \"type\": \"string\"\n                },\n                \"MemoryRate\": {\n                    \"type\": \"number\"\n                },\n                \"MemoryRemain\": {\n                    \"type\": \"number\"\n                },\n                \"MemoryTotal\": {\n                    \"type\": \"number\"\n                },\n                \"MemoryUsedTotal\": {\n                    \"type\": \"number\"\n                },\n                \"Name\": {\n                    \"type\": \"string\"\n                },\n                \"PType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                },\n                \"VmCount\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.ComputePoolOverviewAlertReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.ComputePoolOverviewAlertRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Alerts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.ComputePoolOverviewLineReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"HasPrediction\": {\n                    \"type\": \"boolean\"\n                },\n                \"MetricName\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.ComputePoolOverviewLineRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Lines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.ComputePoolOverviewMonitorReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.ComputePoolOverviewMonitorRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Monitors\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.EbsPoolDetailMetric\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Kind\": {\n                    \"type\": \"string\"\n                },\n                \"Name\": {\n                    \"type\": \"string\"\n                },\n                \"PoolId\": {\n                    \"type\": \"string\"\n                },\n                \"Unit\": {\n                    \"type\": \"string\"\n                },\n                \"UnitType\": {\n                    \"type\": \"string\"\n                },\n                \"Value\": {}\n            }\n        },\n        \"dto.EbsPoolDetailMetricLineReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"PoolType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.EbsPoolDetailMetricLineRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Lines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.EbsPoolDetailMetricReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"PoolId\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.EbsPoolDetailMetricRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"ResourceOverview\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/dto.EbsPoolDetailMetric\"\n                    }\n                }\n            }\n        },\n        \"dto.EbsPoolLineReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.EbsPoolLineRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"CapRate\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.EbsPoolListReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"OrderCode\": {\n                    \"type\": \"string\"\n                },\n                \"OrderType\": {\n                    \"type\": \"string\"\n                },\n                \"PageNo\": {\n                    \"type\": \"integer\"\n                },\n                \"PageSize\": {\n                    \"type\": \"integer\"\n                },\n                \"PoolType\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Query\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.EbsPoolOverviewAlertReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"PoolType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.EbsPoolOverviewAlertRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Alerts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.EbsPoolOverviewLineReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"HasPrediction\": {\n                    \"type\": \"boolean\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"PoolType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.EbsPoolOverviewLineRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Lines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.EbsPoolOverviewReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"PoolType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.EbsPoolOverviewRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"EbsPools\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                },\n                \"EbsVolumeBusinessCounts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                },\n                \"EbsVolumePlatformCounts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.EbsVolumeDetailMetric\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Kind\": {\n                    \"type\": \"string\"\n                },\n                \"Name\": {\n                    \"type\": \"string\"\n                },\n                \"PoolId\": {\n                    \"type\": \"string\"\n                },\n                \"Unit\": {\n                    \"type\": \"string\"\n                },\n                \"UnitType\": {\n                    \"type\": \"string\"\n                },\n                \"Value\": {}\n            }\n        },\n        \"dto.EbsVolumeDetailMetricLineReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"Id\": {\n                    \"type\": \"string\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.EbsVolumeDetailMetricLineRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Lines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.EbsVolumeDetailMetricReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Id\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.EbsVolumeDetailMetricRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"ResourceOverview\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/dto.EbsVolumeDetailMetric\"\n                    }\n                }\n            }\n        },\n        \"dto.EbsVolumeOverviewReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"DiskType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.EbsVolumeOverviewRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"EbsStorageUse\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                },\n                \"EbsVolumeBusinessCounts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                },\n                \"EbsVolumePlatformCounts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.EbsVolumeOverviewTopReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"DiskType\": {\n                    \"type\": \"string\"\n                },\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                },\n                \"topK\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.EbsVolumeOverviewTopRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Tops\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.ListReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"OrderCode\": {\n                    \"type\": \"string\"\n                },\n                \"OrderType\": {\n                    \"type\": \"string\"\n                },\n                \"PageNo\": {\n                    \"type\": \"integer\"\n                },\n                \"PageSize\": {\n                    \"type\": \"integer\"\n                },\n                \"PoolType\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Query\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.ListRes\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"DataList\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/dto.ObjectStorageMonitor\"\n                    }\n                },\n                \"PageNo\": {\n                    \"type\": \"integer\"\n                },\n                \"PageSize\": {\n                    \"type\": \"integer\"\n                },\n                \"TotalCount\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.ObjectPoolDetailMetricLineReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"PoolId\": {\n                    \"type\": \"integer\"\n                },\n                \"PoolType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.ObjectPoolDetailMetricLineRes\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Lines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.ObjectPoolDetailMetricReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"PoolId\": {\n                    \"type\": \"integer\"\n                },\n                \"PoolType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.ObjectPoolDetailMetricRes\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Lines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.ObjectPoolLineReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.ObjectPoolLineRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"CapRate\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.ObjectStorageMonitor\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"AlertAmount\": {\n                    \"description\": \"告警数量 TODO\",\n                    \"type\": \"integer\"\n                },\n                \"BucketNumber\": {\n                    \"description\": \"桶数量\",\n                    \"type\": \"integer\"\n                },\n                \"CapacityAvailable\": {\n                    \"description\": \"可用容量\",\n                    \"type\": \"number\"\n                },\n                \"CapacityTotal\": {\n                    \"description\": \"总容量\",\n                    \"type\": \"number\"\n                },\n                \"CapacityUsedRate\": {\n                    \"description\": \"使用率\",\n                    \"type\": \"number\"\n                },\n                \"CapacityUsedTotal\": {\n                    \"description\": \"已使用容量\",\n                    \"type\": \"number\"\n                },\n                \"CreateTime\": {\n                    \"description\": \"创建时间\",\n                    \"type\": \"integer\"\n                },\n                \"DiskType\": {\n                    \"description\": \"存储类型\",\n                    \"type\": \"string\"\n                },\n                \"DownloadBandwidth\": {\n                    \"description\": \"下载带宽 TODO\",\n                    \"type\": \"integer\"\n                },\n                \"HostNumber\": {\n                    \"description\": \"主机数量\",\n                    \"type\": \"integer\"\n                },\n                \"HttpRequestAmount\": {\n                    \"description\": \"UploadFlow         int64   ` + \"`\" + `json:\\\"UploadFlow\\\"` + \"`\" + `         // 上传流量 TODO\\nDownloadFlow       int64   ` + \"`\" + `json:\\\"DownloadFlow\\\"` + \"`\" + `       // 下载流量 TODO\\nAPIRequestAmount   int64   ` + \"`\" + `json:\\\"APIRequestAmount\\\"` + \"`\" + `   // API请求次数 TODO\\nErrorReturnAmount  int64   ` + \"`\" + `json:\\\"ErrorReturnAmount\\\"` + \"`\" + `  // 错误返回次数 TODO\",\n                    \"type\": \"integer\"\n                },\n                \"HttpsRequestAmount\": {\n                    \"description\": \"HTTPS请求次数 TODO\",\n                    \"type\": \"integer\"\n                },\n                \"Id\": {\n                    \"description\": \"资源池ID\",\n                    \"type\": \"integer\"\n                },\n                \"MonitorStatus\": {\n                    \"description\": \"集群状态 1:正常 2:异常\",\n                    \"type\": \"integer\"\n                },\n                \"Name\": {\n                    \"description\": \"资源池名称\",\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"description\": \"区域\",\n                    \"type\": \"string\"\n                },\n                \"RegionCode\": {\n                    \"description\": \"区域编码\",\n                    \"type\": \"string\"\n                },\n                \"UploadBandwidth\": {\n                    \"description\": \"上传带宽 TODO\",\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.ObjectVolumeDetailMetric\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Kind\": {\n                    \"type\": \"string\"\n                },\n                \"Name\": {\n                    \"type\": \"string\"\n                },\n                \"PoolId\": {\n                    \"type\": \"string\"\n                },\n                \"Unit\": {\n                    \"type\": \"string\"\n                },\n                \"UnitType\": {\n                    \"type\": \"string\"\n                },\n                \"Value\": {}\n            }\n        },\n        \"dto.ObjectVolumeDetailMetricLineReq\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"BucketId\",\n                \"End\",\n                \"MetricName\",\n                \"Start\"\n            ],\n            \"properties\": {\n                \"BucketId\": {\n                    \"type\": \"integer\"\n                },\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.ObjectVolumeDetailMetricLineRes\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Lines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.ObjectVolumeDetailMetricReq\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"BucketId\"\n            ],\n            \"properties\": {\n                \"BucketId\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.ObjectVolumeDetailMetricRes\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"CreationTimestamp\": {\n                    \"type\": \"integer\"\n                },\n                \"ResourceOverview\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/dto.ObjectVolumeDetailMetric\"\n                    }\n                }\n            }\n        },\n        \"dto.ObjectVolumeOverviewReq\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"MetricName\"\n            ],\n            \"properties\": {\n                \"DiskType\": {\n                    \"type\": \"string\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.ObjectVolumeOverviewRes\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Overviews\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.ObjectVolumeOverviewTopReq\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"End\",\n                \"MetricName\",\n                \"Start\",\n                \"TopK\"\n            ],\n            \"properties\": {\n                \"DiskType\": {\n                    \"type\": \"string\"\n                },\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                },\n                \"TopK\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.ObjectVolumeOverviewTopRes\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Tops\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.OptionalEbsPoolResult\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"type\": \"any\"\n            }\n        },\n        \"dto.OptionalObjectPoolResult\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"type\": \"any\"\n            }\n        },\n        \"dto.OverViewAlertReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"PoolType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.OverViewAlertRes\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Alerts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.OverViewLineRes\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Lines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.OverViewRes\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"ObjectPools\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                },\n                \"ObjectVolumeCounts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.OverviewLineReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"HasPrediction\": {\n                    \"type\": \"boolean\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"PoolType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.OverviewReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"PoolType\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.Query\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"type\": \"string\"\n            }\n        },\n        \"dto.VmDetailMetricLinesReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"Id\": {\n                    \"type\": \"string\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.VmDetailMetricLinesRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Lines\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.VmDetailMetricsReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Id\": {\n                    \"type\": \"string\"\n                },\n                \"MetricName\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        },\n        \"dto.VmDetailMetricsRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Metrics\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"dto.VmOverviewMonitorReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"dto.VmOverviewMonitorRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Business\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                },\n                \"Platform\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                },\n                \"TotalCount\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.VmOverviewTopReq\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Az\": {\n                    \"type\": \"string\"\n                },\n                \"End\": {\n                    \"type\": \"integer\"\n                },\n                \"Name\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"Region\": {\n                    \"type\": \"string\"\n                },\n                \"Start\": {\n                    \"type\": \"integer\"\n                },\n                \"TopK\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"dto.VmOverviewTopRsp\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Tops\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlot\"\n                    }\n                }\n            }\n        },\n        \"types.BasicOverviewSlot\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Info\": {\n                    \"$ref\": \"#/definitions/types.BasicOverviewSlotInfo\"\n                },\n                \"Values\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/types.BasicOverviewSlotValue\"\n                    }\n                }\n            }\n        },\n        \"types.BasicOverviewSlotInfo\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Avg\": {},\n                \"Code\": {\n                    \"type\": \"string\"\n                },\n                \"Description\": {\n                    \"type\": \"string\"\n                },\n                \"Kind\": {\n                    \"type\": \"string\"\n                },\n                \"Max\": {},\n                \"Min\": {},\n                \"Name\": {\n                    \"type\": \"string\"\n                },\n                \"Prognosis\": {\n                    \"description\": \"预测值索引\",\n                    \"type\": \"integer\"\n                },\n                \"Unit\": {\n                    \"type\": \"string\"\n                },\n                \"UnitType\": {\n                    \"type\": \"string\"\n                },\n                \"Value\": {},\n                \"_Index\": {\n                    \"description\": \"多y坐标轴标识\",\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"types.BasicOverviewSlotValue\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Code\": {\n                    \"type\": \"string\"\n                },\n                \"Description\": {\n                    \"type\": \"string\"\n                },\n                \"Kind\": {\n                    \"type\": \"string\"\n                },\n                \"Name\": {\n                    \"type\": \"string\"\n                },\n                \"SubName\": {\n                    \"type\": \"string\"\n                },\n                \"Unit\": {\n                    \"type\": \"string\"\n                },\n                \"UnitType\": {\n                    \"type\": \"string\"\n                },\n                \"Value\": {}\n            }\n        }\n    }\n}`\n\n// SwaggerInfo holds exported Swagger Info so clients can modify it\nvar SwaggerInfo = &swag.Spec{\n\tVersion:          \"2.0\",\n\tHost:             \"luban.console.galaxy.cloud\",\n\tBasePath:         \"/monitor/v2\",\n\tSchemes:          []string{},\n\tTitle:            \"Monitor API Swagger\",\n\tDescription:      \"\",\n\tInfoInstanceName: \"swagger\",\n\tSwaggerTemplate:  docTemplate,\n}\n\nfunc init() {\n\tswag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/middleware/middleware.go\n```golang\npackage middleware\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/trace\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-contrib/cors\"\n\t\"github.com/gin-gonic/gin\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.4.0\"\n\toteltrace \"go.opentelemetry.io/otel/trace\"\n)\n\nconst (\n\tmaxAge        = 12\n\tXRequestIDKey = \"X-Request-ID\"\n)\n\ntype BaseParams struct {\n\tAction string `json:\"Action\" form:\"Action\" binding:\"required\"`\n}\n\nfunc OtlTrace(service string) gin.HandlerFunc {\n\ttracer := otel.Tracer(trace.TraceName)\n\tpropagator := otel.GetTextMapPropagator()\n\n\treturn func(c *gin.Context) {\n\t\tspanName := c.Request.URL.Path\n\n\t\tctx := propagator.Extract(c.Request.Context(), propagation.HeaderCarrier(c.Request.Header))\n\t\tspanCtx, span := tracer.Start(\n\t\t\tctx,\n\t\t\tspanName,\n\t\t\toteltrace.WithSpanKind(oteltrace.SpanKindServer),\n\t\t\toteltrace.WithAttributes(semconv.HTTPServerAttributesFromHTTPRequest(\n\t\t\t\tservice, spanName, c.Request)...),\n\t\t)\n\t\tdefer span.End()\n\n\t\t// pass the span through the request context\n\t\tc.Request = c.Request.WithContext(spanCtx)\n\n\t\t// serve the request to the next middleware\n\t\tc.Next()\n\n\t\tspan.SetAttributes(semconv.HTTPAttributesFromHTTPStatusCode(c.Writer.Status())...)\n\n\t\tif len(c.Errors) > 0 {\n\t\t\tspan.SetAttributes(attribute.String(\"gin.errors\", c.Errors.String()))\n\t\t}\n\n\t}\n}\n\n// Cors 跨域中间件\nfunc Cors() gin.HandlerFunc {\n\treturn cors.New(cors.Config{\n\t\tAllowOrigins:     []string{\"*\"},\n\t\tAllowMethods:     []string{\"PUT\", \"PATCH\", \"GET\", \"POST\", \"OPTIONS\", \"DELETE\"},\n\t\tAllowHeaders:     []string{\"Origin\", \"Authorization\", \"Content-Type\", \"Accept\"},\n\t\tAllowCredentials: false,\n\t\tMaxAge:           time.Hour * maxAge,\n\t\tAllowOriginFunc: func(origin string) bool {\n\t\t\treturn true\n\t\t},\n\t})\n}\n\n// RequestID 插入'X-Request-ID'到上下文和每个request/response的header中\nfunc RequestID() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\trid := c.GetHeader(XRequestIDKey)\n\t\tif rid == \"\" {\n\t\t\t// 在header和上下文中设置请求id\n\t\t\trid := uuid.NewV4().String()\n\t\t\tc.Request.Header.Set(XRequestIDKey, rid)\n\t\t\tc.Set(XRequestIDKey, rid)\n\t\t}\n\t\t// 在响应header中设置同样的id\n\t\tc.Writer.Header().Set(XRequestIDKey, rid)\n\t\tc.Next()\n\t}\n}\n\n// Tracing 创建trace实例并将其放入上下文中\nfunc Tracing() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\t// 创建新追踪实例\n\t\ttrace := lib.NewTrace()\n\t\t// 将追踪实例放入 Gin 的上下文中\n\t\tif err := lib.SetGinTraceContext(c, trace); err != nil {\n\t\t\t_ = c.AbortWithError(http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\t// 继续处理请求\n\t\tc.Next()\n\t}\n}\n\n// RequestValidation 中间件函数，用于校验请求\nfunc RequestValidation() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\t// 校验请求方法\n\t\tif c.Request.Method != http.MethodGet && c.Request.Method != http.MethodPost {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"Method\": c.Request.Method})\n\t\t\tresponse.Failed(c, http.StatusBadRequest, consts.MethodNotSupported, \"不支持的请求方式\")\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t}\n\t\tvar baseParams BaseParams\n\t\t// 校验GET请求的参数\n\t\tif c.Request.Method == http.MethodGet {\n\t\t\tif c.Request.URL.Query().Encode() == \"\" {\n\t\t\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"Query\": c.Request.URL.Query().Encode()})\n\t\t\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParModeNotSupported, \"无效的参数模式\")\n\t\t\t\tc.Abort()\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tif err := c.ShouldBind(&baseParams); err != nil {\n\t\t\t\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"base_params\": baseParams})\n\t\t\t\t\tresponse.Failed(c, http.StatusBadRequest, consts.InvalidRequest, \"无效的请求体\")\n\t\t\t\t\tc.Abort()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 校验POST请求的参数\n\t\tif c.Request.Method == http.MethodPost {\n\t\t\tif !strings.Contains(c.Request.Header.Get(\"Content-Type\"), \"application/json\") {\n\t\t\t\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"if_content_type\": c.Request.Header.Get(\"Content-Type\")})\n\t\t\t\tif err := c.ShouldBind(&baseParams); err != nil {\n\t\t\t\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"base_params\": baseParams, \"content_type\": c.Request.Header.Get(\"Content-Type\")})\n\t\t\t\t\tresponse.Failed(c, http.StatusBadRequest, consts.InvalidRequest, \"无效的请求体\")\n\t\t\t\t\tc.Abort()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"else_content_type\": c.Request.Header.Get(\"Content-Type\")})\n\t\t\t\tbodyBytes, err := ioutil.ReadAll(c.Request.Body)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"body_bytes\": bodyBytes})\n\t\t\t\t\tresponse.Failed(c, http.StatusBadRequest, consts.GainFail, \"无效的请求体\")\n\t\t\t\t\tc.Abort()\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif err = json.Unmarshal(bodyBytes, &baseParams); err != nil {\n\t\t\t\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"base_params\": baseParams})\n\t\t\t\t\tresponse.Failed(c, http.StatusBadRequest, consts.InvalidRequest, \"无效的请求体\")\n\t\t\t\t\tc.Abort()\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// 重置请求体\n\t\t\t\tc.Request.Body = ioutil.NopCloser(bytes.NewBuffer(bodyBytes))\n\t\t\t}\n\t\t}\n\n\t\t// 将解析得到的参数存储到上下文中，供后续处理函数使用\n\t\tc.Set(\"action\", baseParams.Action)\n\n\t\tc.Next()\n\t}\n}\n\n// BusinessPack 路由中间件模版\nfunc BusinessPack(handler func(*gin.Context) (interface{}, error)) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t\t//TODO 加飞书告警\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"code\": consts.ServiceInternalError, \"msg\": err, \"data\": []string{}})\n\t\t\t}\n\t\t}()\n\t\tbody, err := handler(c)\n\t\tif err != nil {\n\t\t\t//TODO 加飞书告警\n\t\t\tc.JSON(http.StatusOK, gin.H{\"code\": consts.RequestFail, \"msg\": err, \"data\": body})\n\t\t} else {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"code\": consts.Success, \"msg\": \"success\", \"data\": body})\n\t\t}\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/cmd/root.go\n```golang\npackage cmd\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tresource_network1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\tblockstorage_rpc \"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/rpc\"\n\tcompute_rpc \"ezone.ksyun.com/ezone/luban/monitor/modules/compute/rpc\"\n\tserver_rpc \"ezone.ksyun.com/ezone/luban/monitor/modules/server/rpc\"\n\tswitch_rpc \"ezone.ksyun.com/ezone/luban/monitor/modules/switch/rpc\"\n\n\tmonitor_blockstroagev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/blockstorage/v1alpha/gen\"\n\tmonitor_computev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/compute/v1alpha/gen\"\n\tmonitor_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/server/v1alpha/gen\"\n\tmonitor_switchv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/switch/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx/serverinterceptors\"\n\t_ \"ezone.ksyun.com/ezone/luban/monitor/common/init_conf\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/middleware\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/rpc_client/resource\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/trace\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/version\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/router\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/spf13/cobra\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\nvar RootCmd = &cobra.Command{\n\tUse:           \"Monitor\",\n\tShort:         \"Resource Monitor Manager System\",\n\tLong:          \"Resource Monitor Manager System\",\n\tSilenceErrors: true,\n\tSilenceUsage:  true,\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\trun()\n\t},\n}\n\nfunc Execute() {\n\tif err := RootCmd.Execute(); err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(-1)\n\t}\n}\n\nfunc init() {\n\tRootCmd.Version = version.Info()\n}\n\nfunc run() {\n\n\t// 获取当前时间\n\tnow := time.Now()\n\tthirtySeconds := time.Now().Add(-30 * time.Second)\n\n\t// 输出秒时间戳\n\tseconds := now.Unix()\n\tfmt.Printf(\"当前秒时间戳：%v\\n\", seconds)\n\n\t// 输出毫秒时间戳\n\tfmt.Printf(\"30分钟前毫秒时间戳: %v\\n\", thirtySeconds.UnixMilli())\n\tfmt.Printf(\"当前毫秒时间戳：%v\\n\", now.UnixMilli())\n\n\tserverName := \"monitor\"\n\n\t//go func() {\n\t//\ttestCallResourece()\n\t//\ttestCallAlarm()\n\t//}()\n\n\t//t := lib.GetStringMapStringConf(\"telemetry\")\n\t//fmt.Printf(\"t: %+v\\n\", t)\n\t//\n\t//serverName := lib.GetStringConf(\"telemetry.name\")\n\t//fmt.Printf(\"serverName: %s\\n\", serverName)\n\t//endPoint := lib.GetStringConf(\"telemetry.endpoint\")\n\t//sampler := lib.GetStringConf(\"telemetry.sampler\")\n\t//batcher := lib.GetStringConf(\"telemetry.batcher\")\n\n\t//telemetryConf := trace.Config{\n\t//\tName:     serverName,\n\t//\tEndpoint: endPoint,\n\t//\tSampler:  feetFloat,\n\t//\tBatcher:  batcher,\n\t//}\n\n\t//fmt.Printf(\"telemetryConf: %+v\\n\", telemetryConf)\n\n\tjaegerCfg := trace.Config{\n\t\tName: serverName,\n\t\t//Endpoint: \"http://jaeger-api.luban.galaxy.cloud/api/traces\",\n\t\tEndpoint:     \"http://jaeger-all-in-one.opentelemetry:14268/api/traces\",\n\t\tSampler:      1,\n\t\tBatcher:      \"jaeger\",\n\t\tOtlpHeaders:  nil,\n\t\tOtlpHttpPath: \"\",\n\t\tDisabled:     false,\n\t}\n\n\t//初始化otr trace\n\ttrace.StartAgent(jaegerCfg)\n\n\t//路由注册\n\tgin.SetMode(gin.ReleaseMode)\n\tengine := gin.Default()\n\t// 中间件定义\n\tengine.Use(gin.Recovery())\n\tengine.Use(middleware.RequestID())\n\tengine.Use(middleware.Cors())\n\tengine.Use(middleware.Tracing())\n\tengine.Use(middleware.OtlTrace(\"monitor\"))\n\t//engine.Use(middleware.RequestValidation())\n\t// 路由定义\n\trouter.InitRouter(engine)\n\t//Grpc Server\n\tRunGrpcServer(\":9083\")\n\n\tif err := engine.Run(\":8083\"); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc RunGrpcServer(addr string) {\n\tgrpcx := NewGrpcServer()\n\tmonitor_blockstroagev1alpha.RegisterEbsPoolServiceServer(grpcx.server, blockstorage_rpc.NewBlockStorageRpcServer())\n\tmonitor_computev1alpha.RegisterComputePoolServiceServer(grpcx.server, compute_rpc.NewComputeRpcServer())\n\tmonitor_serverv1alpha.RegisterPhysicalServiceServer(grpcx.server, server_rpc.NewServerRpcServer())\n\tmonitor_switchv1alpha.RegisterSwitchServiceServer(grpcx.server, switch_rpc.NewSwitchRpcServer())\n\tgo func() {\n\t\terr := grpcx.Start(addr)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err.Error())\n\t\t\treturn\n\t\t}\n\t}()\n}\n\ntype GrpcServer struct {\n\tserver   *grpc.Server\n\tlistener net.Listener\n}\n\nfunc NewGrpcServer() *GrpcServer {\n\treturn &GrpcServer{\n\t\tserver: grpc.NewServer(\n\t\t\t//一元拦截器链\n\t\t\tgrpc.ChainUnaryInterceptor(\n\t\t\t\tserverinterceptors.UnaryTracingInterceptor,\n\t\t\t\trecovery.UnaryServerInterceptor(recovery.WithRecoveryHandler(func(p any) (err error) {\n\t\t\t\t\treturn status.Errorf(codes.Unknown, \"panic triggered: %v\", p)\n\t\t\t\t})),\n\t\t\t),\n\t\t\t//流式拦截器链\n\t\t\tgrpc.ChainStreamInterceptor(),\n\t\t),\n\t}\n}\n\n// Start 启动gRPC服务器，监听指定地址。\nfunc (s *GrpcServer) Start(address string) error {\n\tlis, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.listener = lis\n\treturn s.server.Serve(lis)\n}\n\n// Stop 停止gRPC服务器。\nfunc (s *GrpcServer) Stop() {\n\tif s.listener != nil {\n\t\ts.listener.Close()\n\t}\n}\n\n// GracefulStop 优雅地停止gRPC服务器。\nfunc (s *GrpcServer) GracefulStop() {\n\ts.server.GracefulStop()\n}\n\nfunc testCallResourece() {\n\n\tconn, err := grpcx.NewGrpcClientConn(\"resource.luban.galaxy.cloud\")\n\tdefer conn.Close()\n\tif err != nil {\n\t\tlog.Fatalf(\"grpc.Dial err: %v\", err)\n\t}\n\n\tclient := resource.NewNetworkClient(conn)\n\tresp, err := client.Test(context.Background(), &resource_network1alpha.TestRequest{\n\t\tID: \"ID\",\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"client.Search err: %v\", err)\n\t}\n\tlog.Printf(\"%+v\", resp)\n\n\tserverClient := resource.NewServerClient(conn)\n\t//服务器列表\n\tserverList, err := serverClient.PhysicalServerList(context.Background(), &resource_serverv1alpha.PhysicalHostListRequest{\n\t\tPageSize: -1, //all\n\t\tRegion:   \"cn-shanghai-2\",\n\t\t//NodeType:         []string{\"network\"},\n\t\tResourcePoolType: []string{\"XGW\"},\n\t\t//ResourcePoolName: \"XGW-LB\",\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"client. serverList err: %v\", err)\n\t}\n\tlog.Printf(\"server list %+v\", serverList)\n\n}\n\nfunc testCallAlarm() {\n\t//conn, err := grpcx.NewGrpcClientConn(\"alarmv2.luban.galaxy.cloud:8081\")\n\n\t//conn, err := grpcx.NewGrpcClientConn(\"localhost:52609\")\n\t//10.177.10.1\n\tconn, err := grpcx.NewGrpcClientConn(\"10.177.10.1:9830\")\n\n\tdefer conn.Close()\n\tif err != nil {\n\t\tlog.Fatalf(\"grpc.Dial err: %v\", err)\n\t}\n\n\tipList := []string{\"10.177.15.8\"}\n\tnewIpList := []string{}\n\tfor _, ip := range ipList {\n\t\tnewIpList = append(newIpList, ip+\":9100\")\n\t}\n\n\treq := &alarmv1alpha.ListPromQLsRequest{\n\t\tName:            \"up\",\n\t\tResourceSubType: \"physicalServer\",\n\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t{\n\t\t\t\tKey:       \"instance\",\n\t\t\t\tValue:     strings.Join(newIpList, \"|\"),\n\t\t\t\tOperation: \"=~\",\n\t\t\t}},\n\t}\n\tlog.Printf(\"DEBUG req:  %+v\", req)\n\n\tresp, err := alarmv1alpha.NewAlarmServiceClient(conn).ListPromQLs(context.Background(), req)\n\tif err != nil {\n\t\tlog.Fatalf(\"client.ListPromQLs err: %v\", err)\n\t}\n\tlog.Printf(\"%+v\", resp)\n\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tools/time.go\n```golang\npackage tools\n\nimport (\n\t\"time\"\n)\n\n// time.Time to 毫秒时间戳\nfunc UnixMilliToInt64(t time.Time) int64 {\n\treturn t.UnixMilli()\n}\n\n// 毫秒时间戳 to time.Time\nfunc Int64ToUnixMilli(i int64) time.Time {\n\treturn time.UnixMilli(i)\n}\n\n// 秒时间戳 to 毫秒时间戳\nfunc UnixToUnixMilli(i int64) int64 {\n\tt := time.Unix(i, 0)\n\treturn t.UnixMilli()\n}\n\n// 毫秒时间戳 to 秒时间戳\nfunc UnixMilliToUnix(i int64) int64 {\n\tt := time.UnixMilli(i)\n\treturn t.Unix()\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tools/tools.go\n```golang\npackage tools\n\nimport (\n\t\"bufio\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"golang.org/x/net/html/charset\"\n\t\"golang.org/x/text/encoding\"\n\t_ \"golang.org/x/text/transform\"\n\t\"io\"\n\t\"math\"\n\t\"math/rand\"\n\t\"reflect\"\n\t\"runtime\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\n// DetermineEncoding 确定站点编码\nfunc DetermineEncoding(r io.Reader) encoding.Encoding {\n\tbytes, err := bufio.NewReader(r).Peek(1024)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\te, _, _ := charset.DetermineEncoding(bytes, \"\")\n\treturn e\n}\n\n// MicsSlice 字符串数组随机取值\nfunc MicsSlice(origin []string, count int) []string {\n\ttmpOrigin := make([]string, len(origin))\n\tcopy(tmpOrigin, origin)\n\trand.Shuffle(len(tmpOrigin), func(i, j int) {\n\t\ttmpOrigin[i], tmpOrigin[j] = tmpOrigin[j], tmpOrigin[i]\n\t})\n\tresult := make([]string, 0, count)\n\tfor index, value := range tmpOrigin {\n\t\tif index == count {\n\t\t\tbreak\n\t\t}\n\t\tresult = append(result, value)\n\t}\n\treturn result\n}\n\n// RandomArr 随机打乱数组顺序返回字符串数组\nfunc RandomArr(strings []string) []string {\n\tfor i := len(strings) - 1; i > 0; i-- {\n\t\tnum := rand.Intn(i + 1)\n\t\tstrings[i], strings[num] = strings[num], strings[i]\n\t}\n\tvar arr []string\n\tfor i := 0; i < len(strings); i++ {\n\t\tarr = append(arr, strings[i])\n\t}\n\treturn arr\n}\n\n// Contains 字符串数组中是否包含某元素，包含返回其下标--string\nfunc Contains(slice []string, s string) int {\n\tif slice != nil && s != \"\" {\n\t\tfor index, value := range slice {\n\t\t\tif value == s {\n\t\t\t\treturn index\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\n\n// ContainsInt 字符串数组中是否包含某元素，包含返回其值-- int\nfunc ContainsInt(slice []int64, s int64) int64 {\n\tif slice != nil && s >= 0 {\n\t\tfor _, value := range slice {\n\t\t\tif value == s {\n\t\t\t\treturn value\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\n\n// Different 判断切片中是否有重复值，如果有返回重复值\nfunc Different(arr []string) []string {\n\tm := make(map[string]int)\n\tfor _, val := range arr {\n\t\tm[val]++\n\t}\n\tvar res []string\n\tfor key, val := range m {\n\t\tif val > 1 {\n\t\t\tres = append(res, key)\n\t\t}\n\t}\n\treturn res\n}\n\n// DelRepeatElem 删除数组中的重复元素返回剩余数组长度\nfunc DelRepeatElem(nums []string) int {\n\tfmt.Println(nums, &nums[0])\n\tfor i := 0; i < len(nums)-1; i++ {\n\t\tif nums[i] == nums[i+1] { // 重复元素执行异或操作等于0.\n\t\t\tnums = append(nums[:i], nums[i+1:]...) //删除重复元素\n\t\t}\n\t}\n\tfmt.Println(nums, &nums[0])\n\treturn len(nums)\n}\n\n// SliceRemoveDuplicates 删除数组中的重复元素返回剩余数组\nfunc SliceRemoveDuplicates(slice []string) []string {\n\tsort.Strings(slice)\n\ti := 0\n\tvar j int\n\tfor {\n\t\tif i >= len(slice)-1 {\n\t\t\tbreak\n\t\t}\n\t\tfor j = i + 1; j < len(slice) && slice[i] == slice[j]; j++ {\n\t\t}\n\t\tslice = append(slice[:i+1], slice[j:]...)\n\t\ti++\n\t}\n\treturn slice\n}\n\n// ArrayToString string数组转为字符串(（追加形式)\nfunc ArrayToString(arr []string) string {\n\tvar result string\n\tif arr != nil {\n\t\tfor _, i := range arr {\n\t\t\tresult += i\n\t\t}\n\t}\n\treturn result\n}\n\n// StrArrayToString string 数组转为字符串 （追加形式）\nfunc StrArrayToString(arr []string) string {\n\tvar result string\n\tif arr != nil {\n\t\tfor _, i := range arr {\n\t\t\tresult += i + \",\"\n\t\t}\n\t}\n\treturn result\n}\n\n// ArrayToStr int64数组转为字符串(追加形式)\nfunc ArrayToStr(arr []int64) string {\n\tvar result string\n\tif arr != nil {\n\t\tfor _, i := range arr {\n\t\t\tresult += strconv.FormatInt(i, 10) + \",\"\n\t\t}\n\t}\n\treturn result\n}\n\n// MapToJson map 转 string\nfunc MapToJson(param map[string]interface{}) string {\n\tdataType, _ := json.Marshal(param)\n\tdataString := string(dataType)\n\treturn dataString\n}\n\n// JsonToMap string 转 map\nfunc JsonToMap(str string) map[string]interface{} {\n\tvar tempMap map[string]interface{}\n\terr := json.Unmarshal([]byte(str), &tempMap)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn tempMap\n}\n\n// UidToPid UID标准转PID\nfunc UidToPid(uid int64) int64 {\n\treturn uid & 0x0000FFFFFFFFFFFF\n}\n\n// GenerateRangeNum 指定区间随机数\nfunc GenerateRangeNum(min, max int) int {\n\trand.Seed(time.Now().Unix())\n\trandNum := rand.Intn(max-min) + min\n\treturn randNum\n}\n\n// Randint64 指定区间随机数\nfunc Randint64(min, max int64) int64 {\n\tif min >= max || min == 0 || max == 0 {\n\t\treturn max\n\t}\n\treturn rand.Int63n(max-min) + min\n}\n\n// RandomString 生成指定长度的字符串\nfunc RandomString(len int) string {\n\trand.Seed(time.Now().UnixNano())\n\tbytes := make([]byte, len)\n\tfor i := 0; i < len; i++ {\n\t\tbytes[i] = byte(randomlnt(65, 90))\n\t}\n\treturn string(bytes)\n}\n\n// int >= min, < max\nfunc randomlnt(min, max int) int {\n\treturn min + rand.Intn(max-min)\n}\n\n// SortMap map按值从小到大排序\nfunc SortMap(s map[int64]int64) []int64 {\n\tvar rank []int64\n\tfor key := range s {\n\t\trank = append(rank, key)\n\t}\n\tfor i := 0; i < len(rank); i++ {\n\t\tfor j := i + 1; j < len(rank); j++ {\n\t\t\tif s[rank[i]] < s[rank[j]] {\n\t\t\t\trank[i], rank[j] = rank[j], rank[i]\n\t\t\t}\n\t\t}\n\t}\n\treturn rank\n}\n\n// ArgMax Argmax 返回最大值\nfunc ArgMax(arr []int) int {\n\tmaxVal := arr[0]\n\tmaxIndex := 0\n\tfor i := 1; i < len(arr); i++ {\n\t\tif arr[i] > maxVal {\n\t\t\tmaxVal = arr[i]\n\t\t\tmaxIndex = i\n\t\t}\n\t}\n\treturn maxIndex\n}\n\n// TypeOf 获取类型\nfunc TypeOf(v interface{}) string {\n\tswitch v.(type) {\n\tcase int:\n\t\treturn \"int\"\n\tcase int8:\n\t\treturn \"int8\"\n\tcase int16:\n\t\treturn \"int16\"\n\tcase int32:\n\t\treturn \"int32\"\n\tcase int64:\n\t\treturn \"int64\"\n\tcase uint:\n\t\treturn \"uint\"\n\tcase uint8:\n\t\treturn \"uint8\"\n\tcase uint16:\n\t\treturn \"uint16\"\n\tcase uint32:\n\t\treturn \"uint32\"\n\tcase uint64:\n\t\treturn \"uint64\"\n\tcase float32:\n\t\treturn \"float32\"\n\tcase float64:\n\t\treturn \"float64\"\n\tcase string:\n\t\treturn \"string\"\n\tcase bool:\n\t\treturn \"bool\"\n\tcase []byte:\n\t\treturn \"[]byte\"\n\tcase []interface{}:\n\t\treturn \"[]interface{}\"\n\tcase map[string]interface{}:\n\t\treturn \"map[string]interface{}\"\n\tcase []map[string]interface{}:\n\t\treturn \"map[string]interface{}\"\n\tdefault:\n\t\treturn \"unknown\"\n\t}\n}\n\n// Wrap float64转int\nfunc Wrap(num float64, retain int) int {\n\treturn int(num * math.Pow10(retain))\n}\n\n//os.Getwd() 获取项目根目录\n\n// CurrentFile 获取当前文件的详细路径\nfunc CurrentFile() string {\n\t_, file, _, ok := runtime.Caller(1)\n\tif !ok {\n\t\tpanic(\"can_not_get_current_file_info\")\n\t}\n\treturn file\n}\n\nfunc FormatTime(fileSize float64) (size string) {\n\tif fileSize >= 0 {\n\n\t\tif fileSize < 3600.0*24.0 {\n\t\t\t//return strconv.FormatInt(fileSize, 10) + \"B\"\n\t\t\treturn fmt.Sprintf(\"30m\")\n\t\t} else if fileSize < (3600.0 * 24.0 * 2) {\n\t\t\treturn fmt.Sprintf(\"1d\")\n\t\t} else if fileSize < (3600.0 * 24.0 * 8) {\n\t\t\treturn fmt.Sprintf(\"1w\")\n\t\t} else {\n\t\t\treturn fmt.Sprintf(\"30d\")\n\t\t}\n\t}\n\n\tif fileSize < 0 {\n\t\tfileSize = -fileSize\n\t\tif fileSize < 1024.0 {\n\t\t\treturn fmt.Sprintf(\"%.2fB\", -fileSize)\n\t\t} else if fileSize < (1024.0 * 1024.0) {\n\t\t\treturn fmt.Sprintf(\"%.2fKB\", -fileSize/1024.0)\n\t\t} else if fileSize < (1024.0 * 1024.0 * 1024.0) {\n\t\t\treturn fmt.Sprintf(\"%.2fMB\", -fileSize/1024.0/1024.0)\n\t\t} else if fileSize < (1024.0 * 1024.0 * 1024.0 * 1024.0) {\n\t\t\treturn fmt.Sprintf(\"%.2fGB\", -fileSize/1024.0/1024.0/1024.0)\n\t\t} else if fileSize < (1024.0 * 1024.0 * 1024.0 * 1024.0 * 1024.0) {\n\t\t\treturn fmt.Sprintf(\"%.2fTB\", -fileSize/1024.0/1024.0/1024.0/1024.0)\n\t\t} else { //if fileSize < (1024 * 1024 * 1024 * 1024 * 1024 * 1024)\n\t\t\treturn fmt.Sprintf(\"%.2fEB\", -fileSize/1024.0/1024.0/1024.0/1024.0/1024.0)\n\t\t}\n\t}\n\treturn \"\"\n\n}\n\nfunc FormPercent(r interface{}) float64 {\n\tswitch r.(type) {\n\tcase string:\n\t\tvv, _ := strconv.ParseFloat(r.(string), 64)\n\t\tss, _ := strconv.ParseFloat(fmt.Sprintf(\"%.4f\", vv), 64)\n\t\treturn ss\n\tcase float64:\n\t\tss, _ := strconv.ParseFloat(fmt.Sprintf(\"%.4f\", r.(float64)), 64)\n\t\treturn ss\n\t}\n\treturn 0\n}\n\nfunc TimeToStepForInt(fileSize int64) (size int) {\n\t//处理的单位是秒\n\tif fileSize >= 0 {\n\t\tif fileSize <= 3600.0*24.0*2 {\n\t\t\treturn 60 //1m\n\t\t} else if fileSize <= (3600.0 * 24.0 * 7) {\n\t\t\treturn 3600 //1h fixme 3600 7天间隔特定bug\n\t\t} else {\n\t\t\treturn 86400 //1d\n\t\t}\n\t}\n\treturn 0\n}\n\nfunc GetAvg(vals []float64) float64 {\n\tif len(vals) == 0 {\n\t\treturn 0\n\t}\n\tl := len(vals)\n\tsum := 0.0\n\tfor _, val := range vals {\n\t\tsum += val / float64(l)\n\t}\n\treturn sum\n}\n\nfunc GetMax(slice []float64) float64 {\n\tif len(slice) == 0 {\n\t\treturn 0\n\t}\n\n\tmaxNum := slice[0]\n\tfor _, value := range slice {\n\t\tif value > maxNum {\n\t\t\tmaxNum = value\n\t\t}\n\t}\n\treturn maxNum\n}\n\nfunc GetMin(slice []float64) float64 {\n\tif len(slice) == 0 {\n\t\treturn 0\n\t}\n\n\tminNum := slice[0]\n\tfor _, value := range slice {\n\t\tif value < minNum {\n\t\t\tminNum = value\n\t\t}\n\t}\n\treturn minNum\n}\n\n// Strval 获取变量的字符串值\n// 浮点型 3.0将会转换成字符串3, \"3\"\n// 非数值或字符类型的变量将会被转换成JSON格式字符串\nfunc Strval(value interface{}) string {\n\t// interface 转 string\n\tvar key string\n\tif value == nil {\n\t\treturn key\n\t}\n\n\tswitch value.(type) {\n\tcase float64:\n\t\tft := value.(float64)\n\t\tkey = strconv.FormatFloat(ft, 'f', 2, 64)\n\tcase float32:\n\t\tft := value.(float32)\n\t\tkey = strconv.FormatFloat(float64(ft), 'f', 2, 64)\n\tcase int:\n\t\tit := value.(int)\n\t\tkey = strconv.Itoa(it)\n\tcase uint:\n\t\tit := value.(uint)\n\t\tkey = strconv.Itoa(int(it))\n\tcase int8:\n\t\tit := value.(int8)\n\t\tkey = strconv.Itoa(int(it))\n\tcase uint8:\n\t\tit := value.(uint8)\n\t\tkey = strconv.Itoa(int(it))\n\tcase int16:\n\t\tit := value.(int16)\n\t\tkey = strconv.Itoa(int(it))\n\tcase uint16:\n\t\tit := value.(uint16)\n\t\tkey = strconv.Itoa(int(it))\n\tcase int32:\n\t\tit := value.(int32)\n\t\tkey = strconv.Itoa(int(it))\n\tcase uint32:\n\t\tit := value.(uint32)\n\t\tkey = strconv.Itoa(int(it))\n\tcase int64:\n\t\tit := value.(int64)\n\t\tkey = strconv.FormatInt(it, 10)\n\tcase uint64:\n\t\tit := value.(uint64)\n\t\tkey = strconv.FormatUint(it, 10)\n\tcase string:\n\t\tkey = value.(string)\n\tcase []byte:\n\t\tkey = string(value.([]byte))\n\tcase []interface{}:\n\t\tfloat, _ := strconv.ParseFloat(Strval(value.([]interface{})[1]), 64)\n\t\tkey = string(Strval(float))\n\tdefault:\n\t\tnewValue, _ := json.Marshal(value)\n\t\tkey = string(newValue)\n\t}\n\n\treturn key\n}\n\nfunc FormCMDBStorage(fileSize int) string {\n\tif fileSize >= 0 {\n\t\tif fileSize < 1024 {\n\t\t\treturn fmt.Sprintf(\"%dMB\", fileSize)\n\t\t} else if fileSize < (1024.0 * 1024.0) {\n\t\t\treturn fmt.Sprintf(\"%.2fKB\", fileSize/1024.0)\n\t\t} else if fileSize < (1024.0 * 1024.0 * 1024.0) {\n\t\t\treturn fmt.Sprintf(\"%.2fMB\", fileSize/1024.0/1024.0)\n\t\t} else if fileSize < (1024.0 * 1024.0 * 1024.0 * 1024.0) {\n\t\t\treturn fmt.Sprintf(\"%.2fGB\", fileSize/1024.0/1024.0/1024.0)\n\t\t} else if fileSize < (1024.0 * 1024.0 * 1024.0 * 1024.0 * 1024.0) {\n\t\t\treturn fmt.Sprintf(\"%.2fTB\", fileSize/1024.0/1024.0/1024.0/1024.0)\n\t\t} else { //if fileSize < (1024 * 1024 * 1024 * 1024 * 1024 * 1024)\n\t\t\treturn fmt.Sprintf(\"%.2fEB\", fileSize/1024.0/1024.0/1024.0/1024.0/1024.0)\n\t\t}\n\t}\n\treturn \"\"\n}\n\nfunc FormCMDBStorageM(fileSize int) string {\n\n\tif fileSize >= 0 {\n\t\tif fileSize < 1024 {\n\t\t\treturn fmt.Sprintf(\"%dMB\", fileSize)\n\t\t} else if fileSize < (1024 * 1024) {\n\t\t\treturn fmt.Sprintf(\"%.2dGB\", fileSize/1024)\n\t\t} else if fileSize < (1024 * 1024 * 1024) {\n\t\t\treturn fmt.Sprintf(\"%.2dTB\", fileSize/1024/1024)\n\t\t} else {\n\t\t\treturn fmt.Sprintf(\"%.2fEB\", fileSize/1024.0/1024.0/1024.0/1024.0/1024.0)\n\t\t}\n\t}\n\treturn \"\"\n}\n\nfunc FormatBytes(bytes int) string {\n\tconst (\n\t\tKB = 1024.0\n\t\tMB = KB * 1024.0\n\t\tGB = MB * 1024.0\n\t\tTB = GB * 1024.0\n\t\tEB = TB * 1024.0\n\t)\n\n\tsize := float64(bytes)\n\n\tswitch {\n\tcase size < KB:\n\t\treturn fmt.Sprintf(\"%d B\", bytes)\n\tcase size < MB:\n\t\treturn fmt.Sprintf(\"%.2f KB\", size/KB)\n\tcase size < GB:\n\t\treturn fmt.Sprintf(\"%.2f MB\", size/MB)\n\tcase size < TB:\n\t\treturn fmt.Sprintf(\"%.2f GB\", size/GB)\n\tcase size < EB:\n\t\treturn fmt.Sprintf(\"%.2f TB\", size/TB)\n\tdefault:\n\t\treturn fmt.Sprintf(\"%.2f EB\", size/EB)\n\t}\n}\n\nfunc TypeToRealSize(size string) (res int64) {\n\tidx := strings.Index(size, \"bytes\")\n\tfor i := 0; i < idx; i++ {\n\t\tif size[i] >= '0' && size[i] <= '9' {\n\t\t\tres *= 10\n\t\t\tres += int64(size[i] - '0')\n\t\t}\n\t}\n\treturn\n}\n\nfunc In(haystack interface{}, needle interface{}) bool {\n\tsVal := reflect.ValueOf(haystack)\n\tkind := sVal.Kind()\n\tif kind == reflect.Slice || kind == reflect.Array {\n\t\tfor i := 0; i < sVal.Len(); i++ {\n\t\t\tif sVal.Index(i).Interface() == needle {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\treturn false\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tools/collection/set.go\n```golang\npackage collection\n\nimport (\n\t\"fmt\"\n)\n\nconst (\n\tunmanaged = iota\n\tuntyped\n\tintType\n\tint64Type\n\tuintType\n\tuint64Type\n\tstringType\n)\n\n// PlaceholderType represents a placeholder type.\ntype PlaceholderType = struct{}\n\n// Set is not thread-safe, for concurrent use, make sure to use it with synchronization.\ntype Set struct {\n\tdata map[interface{}]PlaceholderType\n\ttp   int\n}\n\n// NewSet returns a managed Set, can only put the values with the same type.\nfunc NewSet() *Set {\n\treturn &Set{\n\t\tdata: make(map[interface{}]PlaceholderType),\n\t\ttp:   untyped,\n\t}\n}\n\n// NewUnmanagedSet returns a unmanaged Set, which can put values with different types.\nfunc NewUnmanagedSet() *Set {\n\treturn &Set{\n\t\tdata: make(map[interface{}]PlaceholderType),\n\t\ttp:   unmanaged,\n\t}\n}\n\n// Add adds i into s.\nfunc (s *Set) Add(i ...interface{}) {\n\tfor _, each := range i {\n\t\ts.add(each)\n\t}\n}\n\n// AddInt adds int values ii into s.\nfunc (s *Set) AddInt(ii ...int) {\n\tfor _, each := range ii {\n\t\ts.add(each)\n\t}\n}\n\n// AddInt64 adds int64 values ii into s.\nfunc (s *Set) AddInt64(ii ...int64) {\n\tfor _, each := range ii {\n\t\ts.add(each)\n\t}\n}\n\n// AddUint adds uint values ii into s.\nfunc (s *Set) AddUint(ii ...uint) {\n\tfor _, each := range ii {\n\t\ts.add(each)\n\t}\n}\n\n// AddUint64 adds uint64 values ii into s.\nfunc (s *Set) AddUint64(ii ...uint64) {\n\tfor _, each := range ii {\n\t\ts.add(each)\n\t}\n}\n\n// AddStr adds string values ss into s.\nfunc (s *Set) AddStr(ss ...string) {\n\tfor _, each := range ss {\n\t\ts.add(each)\n\t}\n}\n\n// Contains checks if i is in s.\nfunc (s *Set) Contains(i interface{}) bool {\n\tif len(s.data) == 0 {\n\t\treturn false\n\t}\n\n\ts.validate(i)\n\t_, ok := s.data[i]\n\treturn ok\n}\n\n// Keys returns the keys in s.\nfunc (s *Set) Keys() []interface{} {\n\tvar keys []interface{}\n\n\tfor key := range s.data {\n\t\tkeys = append(keys, key)\n\t}\n\n\treturn keys\n}\n\n// KeysInt returns the int keys in s.\nfunc (s *Set) KeysInt() []int {\n\tvar keys []int\n\n\tfor key := range s.data {\n\t\tif intKey, ok := key.(int); ok {\n\t\t\tkeys = append(keys, intKey)\n\t\t}\n\t}\n\n\treturn keys\n}\n\n// KeysInt64 returns int64 keys in s.\nfunc (s *Set) KeysInt64() []int64 {\n\tvar keys []int64\n\n\tfor key := range s.data {\n\t\tif intKey, ok := key.(int64); ok {\n\t\t\tkeys = append(keys, intKey)\n\t\t}\n\t}\n\n\treturn keys\n}\n\n// KeysUint returns uint keys in s.\nfunc (s *Set) KeysUint() []uint {\n\tvar keys []uint\n\n\tfor key := range s.data {\n\t\tif intKey, ok := key.(uint); ok {\n\t\t\tkeys = append(keys, intKey)\n\t\t}\n\t}\n\n\treturn keys\n}\n\n// KeysUint64 returns uint64 keys in s.\nfunc (s *Set) KeysUint64() []uint64 {\n\tvar keys []uint64\n\n\tfor key := range s.data {\n\t\tif intKey, ok := key.(uint64); ok {\n\t\t\tkeys = append(keys, intKey)\n\t\t}\n\t}\n\n\treturn keys\n}\n\n// KeysStr returns string keys in s.\nfunc (s *Set) KeysStr() []string {\n\tvar keys []string\n\n\tfor key := range s.data {\n\t\tif strKey, ok := key.(string); ok {\n\t\t\tkeys = append(keys, strKey)\n\t\t}\n\t}\n\n\treturn keys\n}\n\n// Remove removes i from s.\nfunc (s *Set) Remove(i interface{}) {\n\ts.validate(i)\n\tdelete(s.data, i)\n}\n\n// Count returns the number of items in s.\nfunc (s *Set) Count() int {\n\treturn len(s.data)\n}\n\nfunc (s *Set) add(i interface{}) {\n\tswitch s.tp {\n\tcase unmanaged:\n\t\t// do nothing\n\tcase untyped:\n\t\ts.setType(i)\n\tdefault:\n\t\ts.validate(i)\n\t}\n\ts.data[i] = PlaceholderType{}\n}\n\nfunc (s *Set) setType(i interface{}) {\n\t// s.tp can only be untyped here\n\tswitch i.(type) {\n\tcase int:\n\t\ts.tp = intType\n\tcase int64:\n\t\ts.tp = int64Type\n\tcase uint:\n\t\ts.tp = uintType\n\tcase uint64:\n\t\ts.tp = uint64Type\n\tcase string:\n\t\ts.tp = stringType\n\t}\n}\n\nfunc (s *Set) validate(i interface{}) {\n\tif s.tp == unmanaged {\n\t\treturn\n\t}\n\n\tswitch i.(type) {\n\tcase int:\n\t\tif s.tp != intType {\n\t\t\tfmt.Errorf(\"Error: element is int, but set contains elements with type %d\", s.tp)\n\t\t}\n\tcase int64:\n\t\tif s.tp != int64Type {\n\t\t\tfmt.Errorf(\"Error: element is int64, but set contains elements with type %d\", s.tp)\n\t\t}\n\tcase uint:\n\t\tif s.tp != uintType {\n\t\t\tfmt.Errorf(\"Error: element is uint, but set contains elements with type %d\", s.tp)\n\t\t}\n\tcase uint64:\n\t\tif s.tp != uint64Type {\n\t\t\tfmt.Errorf(\"Error: element is uint64, but set contains elements with type %d\", s.tp)\n\t\t}\n\tcase string:\n\t\tif s.tp != stringType {\n\t\t\tfmt.Errorf(\"Error: element is string, but set contains elements with type %d\", s.tp)\n\t\t}\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/types/overview.go\n```golang\npackage types\n\nconst (\n\t//percent【百分比】、number【数值】，storage【bytes数值，2进制】,storage_bit【bit数值】\n\tTypePercent    = \"percent\"\n\tTypeNumber     = \"number\"\n\tTypeStorage    = \"storage\"\n\tTypeStorageBit = \"storage_bit\"\n\n\t//error、warn、success、info、disabled\n\tKindError    = \"error\"\n\tKindWarn     = \"warn\"\n\tKindSuccess  = \"success\"\n\tKindMinor    = \"minor\"\n\tKindInfo     = \"info\"\n\tKindDisabled = \"disabled\"\n)\n\n// 基础结构\ntype BasicOverviewSlot struct {\n\tInfo   BasicOverviewSlotInfo    `json:\"Info\"`\n\tValues []BasicOverviewSlotValue `json:\"Values\"`\n}\n\ntype BasicOverviewSlotInfo struct {\n\tIndex       int         `json:\"_Index\"` //多y坐标轴标识\n\tCode        string      `json:\"Code,omitempty\"`\n\tName        string      `json:\"Name\"`\n\tValue       interface{} `json:\"Value\"`\n\tAvg         interface{} `json:\"Avg,omitempty\"`\n\tMin         interface{} `json:\"Min,omitempty\"`\n\tMax         interface{} `json:\"Max,omitempty\"`\n\tUnitType    string      `json:\"UnitType\"`\n\tUnit        string      `json:\"Unit\"`\n\tKind        string      `json:\"Kind\"`\n\tPrognosis   int         `json:\"Prognosis\"` //预测值索引\n\tDescription string      `json:\"Description\"`\n}\n\ntype BasicOverviewSlotValue struct {\n\tName        string      `json:\"Name\"`\n\tSubName     string      `json:\"SubName,omitempty\"`\n\tCode        string      `json:\"Code\"`\n\tValue       interface{} `json:\"Value\"`\n\tUnit        string      `json:\"Unit\"`\n\tUnitType    string      `json:\"UnitType\"`\n\tKind        string      `json:\"Kind\"`\n\tDescription string      `json:\"Description\"`\n}\n\n// 分布概览的扩展结构\ntype DistributionOverviewSlot struct {\n\tInfo   BasicOverviewSlotInfo           `json:\"Info\"`\n\tValues []DistributionOverviewSlotValue `json:\"Values\"`\n}\n\ntype DistributionOverviewSlotValue struct {\n\tBasicOverviewSlotValue\n\tRegion string   `json:\"Region\"`\n\tAz     []string `json:\"Az\"`\n}\n\n// OverviewAlert 概览页告警\ntype OverviewAlert struct {\n\tPrefix string `json:\"prefix\"`\n\tLevel  string `json:\"level\"`\n\tUnit   string `json:\"unit\"`\n\tNumber int    `json:\"number\"`\n\tName   string `json:\"name\"`\n\tKind   string `json:\"kind\"`\n\tType   string `json:\"type\"`\n}\n\nfunc ParseUnitTypeByUnit(unit string) string {\n\tswitch unit {\n\tcase \"%\":\n\t\treturn TypePercent\n\tcase \"B\", \"KB\", \"MB\", \"GB\":\n\t\treturn TypeStorage\n\tcase \"bps\", \"Kbps\", \"Mbps\", \"Gbps\":\n\t\treturn TypeStorageBit\n\tdefault:\n\t\treturn TypeNumber\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/attributes.go\n```golang\npackage trace\n\nimport (\n\t\"go.opentelemetry.io/otel/attribute\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.4.0\"\n\tgcodes \"google.golang.org/grpc/codes\"\n)\n\nconst (\n\t// GRPCStatusCodeKey is convention for numeric status code of a gRPC request.\n\tGRPCStatusCodeKey = attribute.Key(\"rpc.grpc.status_code\")\n\t// RPCNameKey is the name of message transmitted or received.\n\tRPCNameKey = attribute.Key(\"name\")\n\t// RPCMessageTypeKey is the type of message transmitted or received.\n\tRPCMessageTypeKey = attribute.Key(\"message.type\")\n\t// RPCMessageIDKey is the identifier of message transmitted or received.\n\tRPCMessageIDKey = attribute.Key(\"message.id\")\n\t// RPCMessageCompressedSizeKey is the compressed size of the message transmitted or received in bytes.\n\tRPCMessageCompressedSizeKey = attribute.Key(\"message.compressed_size\")\n\t// RPCMessageUncompressedSizeKey is the uncompressed size of the message\n\t// transmitted or received in bytes.\n\tRPCMessageUncompressedSizeKey = attribute.Key(\"message.uncompressed_size\")\n)\n\n// Semantic conventions for common RPC attributes.\nvar (\n\t// RPCSystemGRPC is the semantic convention for gRPC as the remoting system.\n\tRPCSystemGRPC = semconv.RPCSystemKey.String(\"grpc\")\n\t// RPCNameMessage is the semantic convention for a message named message.\n\tRPCNameMessage = RPCNameKey.String(\"message\")\n\t// RPCMessageTypeSent is the semantic conventions for sent RPC message types.\n\tRPCMessageTypeSent = RPCMessageTypeKey.String(\"SENT\")\n\t// RPCMessageTypeReceived is the semantic conventions for the received RPC message types.\n\tRPCMessageTypeReceived = RPCMessageTypeKey.String(\"RECEIVED\")\n)\n\n// StatusCodeAttr returns an attribute.KeyValue that represents the give c.\nfunc StatusCodeAttr(c gcodes.Code) attribute.KeyValue {\n\treturn GRPCStatusCodeKey.Int64(int64(c))\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/config.go\n```golang\npackage trace\n\n// TraceName represents the tracing name.\nconst TraceName = \"luban\"\n\n// A Config is an opentelemetry config.\ntype Config struct {\n\tName     string  `json:\",optional\"`\n\tEndpoint string  `json:\",optional\"`\n\tSampler  float64 `json:\",default=1.0\"`\n\tBatcher  string  `json:\",default=jaeger,options=jaeger|zipkin|otlpgrpc|otlphttp|file\"`\n\t// OtlpHeaders represents the headers for OTLP gRPC or HTTP transport.\n\t// For example:\n\t//  uptrace-dsn: 'http://project2_secret_token@localhost:14317/2'\n\tOtlpHeaders map[string]string `json:\",optional\"`\n\t// OtlpHttpPath represents the path for OTLP HTTP transport.\n\t// For example\n\t// /v1/traces\n\tOtlpHttpPath string `json:\",optional\"`\n\t// Disabled indicates whether StartAgent starts the agent.\n\tDisabled bool `json:\",optional\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/utils_test.go\n```golang\npackage trace\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\tsdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.4.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/grpc/peer\"\n)\n\nfunc TestPeerFromContext(t *testing.T) {\n\taddrs, err := net.InterfaceAddrs()\n\tassert.Nil(t, err)\n\tassert.NotEmpty(t, addrs)\n\ttests := []struct {\n\t\tname  string\n\t\tctx   context.Context\n\t\tempty bool\n\t}{\n\t\t{\n\t\t\tname:  \"empty\",\n\t\t\tctx:   context.Background(),\n\t\t\tempty: true,\n\t\t},\n\t\t{\n\t\t\tname:  \"nil\",\n\t\t\tctx:   peer.NewContext(context.Background(), nil),\n\t\t\tempty: true,\n\t\t},\n\t\t{\n\t\t\tname: \"with value\",\n\t\t\tctx: peer.NewContext(context.Background(), &peer.Peer{\n\t\t\t\tAddr: addrs[0],\n\t\t\t}),\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\ttest := test\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\taddr := PeerFromCtx(test.ctx)\n\t\t\tassert.Equal(t, test.empty, len(addr) == 0)\n\t\t})\n\t}\n}\n\nfunc TestParseFullMethod(t *testing.T) {\n\ttests := []struct {\n\t\tfullMethod string\n\t\tname       string\n\t\tattr       []attribute.KeyValue\n\t}{\n\t\t{\n\t\t\tfullMethod: \"/grpc.test.EchoService/Echo\",\n\t\t\tname:       \"grpc.test.EchoService/Echo\",\n\t\t\tattr: []attribute.KeyValue{\n\t\t\t\tsemconv.RPCServiceKey.String(\"grpc.test.EchoService\"),\n\t\t\t\tsemconv.RPCMethodKey.String(\"Echo\"),\n\t\t\t},\n\t\t}, {\n\t\t\tfullMethod: \"/com.example.ExampleRmiService/exampleMethod\",\n\t\t\tname:       \"com.example.ExampleRmiService/exampleMethod\",\n\t\t\tattr: []attribute.KeyValue{\n\t\t\t\tsemconv.RPCServiceKey.String(\"com.example.ExampleRmiService\"),\n\t\t\t\tsemconv.RPCMethodKey.String(\"exampleMethod\"),\n\t\t\t},\n\t\t}, {\n\t\t\tfullMethod: \"/MyCalcService.Calculator/Add\",\n\t\t\tname:       \"MyCalcService.Calculator/Add\",\n\t\t\tattr: []attribute.KeyValue{\n\t\t\t\tsemconv.RPCServiceKey.String(\"MyCalcService.Calculator\"),\n\t\t\t\tsemconv.RPCMethodKey.String(\"Add\"),\n\t\t\t},\n\t\t}, {\n\t\t\tfullMethod: \"/MyServiceReference.ICalculator/Add\",\n\t\t\tname:       \"MyServiceReference.ICalculator/Add\",\n\t\t\tattr: []attribute.KeyValue{\n\t\t\t\tsemconv.RPCServiceKey.String(\"MyServiceReference.ICalculator\"),\n\t\t\t\tsemconv.RPCMethodKey.String(\"Add\"),\n\t\t\t},\n\t\t}, {\n\t\t\tfullMethod: \"/MyServiceWithNoPackage/theMethod\",\n\t\t\tname:       \"MyServiceWithNoPackage/theMethod\",\n\t\t\tattr: []attribute.KeyValue{\n\t\t\t\tsemconv.RPCServiceKey.String(\"MyServiceWithNoPackage\"),\n\t\t\t\tsemconv.RPCMethodKey.String(\"theMethod\"),\n\t\t\t},\n\t\t}, {\n\t\t\tfullMethod: \"/pkg.svr\",\n\t\t\tname:       \"pkg.svr\",\n\t\t\tattr:       []attribute.KeyValue(nil),\n\t\t}, {\n\t\t\tfullMethod: \"/pkg.svr/\",\n\t\t\tname:       \"pkg.svr/\",\n\t\t\tattr: []attribute.KeyValue{\n\t\t\t\tsemconv.RPCServiceKey.String(\"pkg.svr\"),\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\tn, a := ParseFullMethod(test.fullMethod)\n\t\tassert.Equal(t, test.name, n)\n\t\tassert.Equal(t, test.attr, a)\n\t}\n}\n\nfunc TestSpanInfo(t *testing.T) {\n\tval, kvs := SpanInfo(\"/fullMethod\", \"remote\")\n\tassert.Equal(t, \"fullMethod\", val)\n\tassert.NotEmpty(t, kvs)\n}\n\nfunc TestPeerAttr(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\taddr   string\n\t\texpect []attribute.KeyValue\n\t}{\n\t\t{\n\t\t\tname: \"empty\",\n\t\t},\n\t\t{\n\t\t\tname: \"port only\",\n\t\t\taddr: \":8080\",\n\t\t\texpect: []attribute.KeyValue{\n\t\t\t\tsemconv.NetPeerIPKey.String(localhost),\n\t\t\t\tsemconv.NetPeerPortKey.String(\"8080\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"port only\",\n\t\t\taddr: \"192.168.0.2:8080\",\n\t\t\texpect: []attribute.KeyValue{\n\t\t\t\tsemconv.NetPeerIPKey.String(\"192.168.0.2\"),\n\t\t\t\tsemconv.NetPeerPortKey.String(\"8080\"),\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\ttest := test\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\tkvs := PeerAttr(test.addr)\n\t\t\tassert.EqualValues(t, test.expect, kvs)\n\t\t})\n\t}\n}\n\nfunc TestTracerFromContext(t *testing.T) {\n\ttraceFn := func(ctx context.Context, hasTraceId bool) {\n\t\tspanContext := trace.SpanContextFromContext(ctx)\n\t\tassert.Equal(t, spanContext.IsValid(), hasTraceId)\n\t\tparentTraceId := spanContext.TraceID().String()\n\n\t\ttracer := TracerFromContext(ctx)\n\t\t_, span := tracer.Start(ctx, \"b\")\n\t\tdefer span.End()\n\n\t\tspanContext = span.SpanContext()\n\t\tassert.True(t, spanContext.IsValid())\n\t\tif hasTraceId {\n\t\t\tassert.Equal(t, parentTraceId, spanContext.TraceID().String())\n\t\t}\n\n\t}\n\n\tt.Run(\"context\", func(t *testing.T) {\n\t\topts := []sdktrace.TracerProviderOption{\n\t\t\t// Set the sampling rate based on the parent span to 100%\n\t\t\tsdktrace.WithSampler(sdktrace.ParentBased(sdktrace.TraceIDRatioBased(1))),\n\t\t\t// Record information about this application in a Resource.\n\t\t\tsdktrace.WithResource(resource.NewSchemaless(semconv.ServiceNameKey.String(\"test\"))),\n\t\t}\n\t\ttp = sdktrace.NewTracerProvider(opts...)\n\t\totel.SetTracerProvider(tp)\n\t\tctx, span := tp.Tracer(TraceName).Start(context.Background(), \"a\")\n\n\t\tdefer span.End()\n\t\ttraceFn(ctx, true)\n\t})\n\n\tt.Run(\"global\", func(t *testing.T) {\n\t\topts := []sdktrace.TracerProviderOption{\n\t\t\t// Set the sampling rate based on the parent span to 100%\n\t\t\tsdktrace.WithSampler(sdktrace.ParentBased(sdktrace.TraceIDRatioBased(1))),\n\t\t\t// Record information about this application in a Resource.\n\t\t\tsdktrace.WithResource(resource.NewSchemaless(semconv.ServiceNameKey.String(\"test\"))),\n\t\t}\n\t\ttp = sdktrace.NewTracerProvider(opts...)\n\t\totel.SetTracerProvider(tp)\n\n\t\ttraceFn(context.Background(), false)\n\t})\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/vars.go\n```golang\npackage trace\n\nimport \"net/http\"\n\n// TraceIdKey is the trace id header.\n// https://www.w3.org/TR/trace-context/#trace-id\n// May change it to trace-id afterwards.\nvar TraceIdKey = http.CanonicalHeaderKey(\"x-trace-id\")\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/message.go\n```golang\npackage trace\n\nimport (\n\t\"context\"\n\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\nconst messageEvent = \"message\"\n\nvar (\n\t// MessageSent is the type of sent messages.\n\tMessageSent = messageType(RPCMessageTypeSent)\n\t// MessageReceived is the type of received messages.\n\tMessageReceived = messageType(RPCMessageTypeReceived)\n)\n\ntype messageType attribute.KeyValue\n\n// Event adds an event of the messageType to the span associated with the\n// passed context with id and size (if message is a proto message).\nfunc (m messageType) Event(ctx context.Context, id int, message any) {\n\tspan := trace.SpanFromContext(ctx)\n\tif p, ok := message.(proto.Message); ok {\n\t\tspan.AddEvent(messageEvent, trace.WithAttributes(\n\t\t\tattribute.KeyValue(m),\n\t\t\tRPCMessageIDKey.Int(id),\n\t\t\tRPCMessageUncompressedSizeKey.Int(proto.Size(p)),\n\t\t))\n\t} else {\n\t\tspan.AddEvent(messageEvent, trace.WithAttributes(\n\t\t\tattribute.KeyValue(m),\n\t\t\tRPCMessageIDKey.Int(id),\n\t\t))\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/resource.go\n```golang\npackage trace\n\nimport \"go.opentelemetry.io/otel/attribute\"\n\nvar attrResources = make([]attribute.KeyValue, 0)\n\n// AddResources add more resources in addition to configured trace name.\nfunc AddResources(attrs ...attribute.KeyValue) {\n\tattrResources = append(attrResources, attrs...)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/tracer_test.go\n```golang\npackage trace\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\nconst (\n\ttraceIDStr = \"4bf92f3577b34da6a3ce929d0e0e4736\"\n\tspanIDStr  = \"00f067aa0ba902b7\"\n)\n\nvar (\n\ttraceID = mustTraceIDFromHex(traceIDStr)\n\tspanID  = mustSpanIDFromHex(spanIDStr)\n)\n\nfunc mustTraceIDFromHex(s string) (t trace.TraceID) {\n\tvar err error\n\tt, err = trace.TraceIDFromHex(s)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn\n}\n\nfunc mustSpanIDFromHex(s string) (t trace.SpanID) {\n\tvar err error\n\tt, err = trace.SpanIDFromHex(s)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn\n}\n\nfunc TestExtractValidTraceContext(t *testing.T) {\n\tstateStr := \"key1=value1,key2=value2\"\n\tstate, err := trace.ParseTraceState(stateStr)\n\trequire.NoError(t, err)\n\n\ttests := []struct {\n\t\tname        string\n\t\ttraceparent string\n\t\ttracestate  string\n\t\tsc          trace.SpanContext\n\t}{\n\t\t{\n\t\t\tname:        \"not sampled\",\n\t\t\ttraceparent: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-00\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID: traceID,\n\t\t\t\tSpanID:  spanID,\n\t\t\t\tRemote:  true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"sampled\",\n\t\t\ttraceparent: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID:    traceID,\n\t\t\t\tSpanID:     spanID,\n\t\t\t\tTraceFlags: trace.FlagsSampled,\n\t\t\t\tRemote:     true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"valid tracestate\",\n\t\t\ttraceparent: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-00\",\n\t\t\ttracestate:  stateStr,\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID:    traceID,\n\t\t\t\tSpanID:     spanID,\n\t\t\t\tTraceState: state,\n\t\t\t\tRemote:     true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"invalid tracestate perserves traceparent\",\n\t\t\ttraceparent: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-00\",\n\t\t\ttracestate:  \"invalid$@#=invalid\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID: traceID,\n\t\t\t\tSpanID:  spanID,\n\t\t\t\tRemote:  true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"future version not sampled\",\n\t\t\ttraceparent: \"02-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-00\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID: traceID,\n\t\t\t\tSpanID:  spanID,\n\t\t\t\tRemote:  true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"future version sampled\",\n\t\t\ttraceparent: \"02-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID:    traceID,\n\t\t\t\tSpanID:     spanID,\n\t\t\t\tTraceFlags: trace.FlagsSampled,\n\t\t\t\tRemote:     true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"future version sample bit set\",\n\t\t\ttraceparent: \"02-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-09\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID:    traceID,\n\t\t\t\tSpanID:     spanID,\n\t\t\t\tTraceFlags: trace.FlagsSampled,\n\t\t\t\tRemote:     true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"future version sample bit not set\",\n\t\t\ttraceparent: \"02-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-08\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID: traceID,\n\t\t\t\tSpanID:  spanID,\n\t\t\t\tRemote:  true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"future version additional data\",\n\t\t\ttraceparent: \"02-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-00-XYZxsf09\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID: traceID,\n\t\t\t\tSpanID:  spanID,\n\t\t\t\tRemote:  true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"B3 format ending in dash\",\n\t\t\ttraceparent: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-00-\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID: traceID,\n\t\t\t\tSpanID:  spanID,\n\t\t\t\tRemote:  true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"future version B3 format ending in dash\",\n\t\t\ttraceparent: \"03-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-00-\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID: traceID,\n\t\t\t\tSpanID:  spanID,\n\t\t\t\tRemote:  true,\n\t\t\t}),\n\t\t},\n\t}\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(\n\t\tpropagation.TraceContext{}, propagation.Baggage{}))\n\tpropagator := otel.GetTextMapPropagator()\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tctx := context.Background()\n\t\t\tmd := metadata.MD{}\n\t\t\tmd.Set(\"traceparent\", tt.traceparent)\n\t\t\tmd.Set(\"tracestate\", tt.tracestate)\n\t\t\t_, spanCtx := Extract(ctx, propagator, &md)\n\t\t\tassert.Equal(t, tt.sc, spanCtx)\n\t\t})\n\t}\n}\n\nfunc TestExtractInvalidTraceContext(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\theader string\n\t}{\n\t\t{\n\t\t\tname:   \"wrong version length\",\n\t\t\theader: \"0000-00000000000000000000000000000000-0000000000000000-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"wrong trace ID length\",\n\t\t\theader: \"00-ab00000000000000000000000000000000-cd00000000000000-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"wrong span ID length\",\n\t\t\theader: \"00-ab000000000000000000000000000000-cd0000000000000000-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"wrong trace flag length\",\n\t\t\theader: \"00-ab000000000000000000000000000000-cd00000000000000-0100\",\n\t\t},\n\t\t{\n\t\t\tname:   \"bogus version\",\n\t\t\theader: \"qw-00000000000000000000000000000000-0000000000000000-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"bogus trace ID\",\n\t\t\theader: \"00-qw000000000000000000000000000000-cd00000000000000-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"bogus span ID\",\n\t\t\theader: \"00-ab000000000000000000000000000000-qw00000000000000-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"bogus trace flag\",\n\t\t\theader: \"00-ab000000000000000000000000000000-cd00000000000000-qw\",\n\t\t},\n\t\t{\n\t\t\tname:   \"upper case version\",\n\t\t\theader: \"A0-00000000000000000000000000000000-0000000000000000-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"upper case trace ID\",\n\t\t\theader: \"00-AB000000000000000000000000000000-cd00000000000000-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"upper case span ID\",\n\t\t\theader: \"00-ab000000000000000000000000000000-CD00000000000000-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"upper case trace flag\",\n\t\t\theader: \"00-ab000000000000000000000000000000-cd00000000000000-A1\",\n\t\t},\n\t\t{\n\t\t\tname:   \"zero trace ID and span ID\",\n\t\t\theader: \"00-00000000000000000000000000000000-0000000000000000-01\",\n\t\t},\n\t\t{\n\t\t\tname:   \"trace-flag unused bits set\",\n\t\t\theader: \"00-ab000000000000000000000000000000-cd00000000000000-09\",\n\t\t},\n\t\t{\n\t\t\tname:   \"missing options\",\n\t\t\theader: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7\",\n\t\t},\n\t\t{\n\t\t\tname:   \"empty options\",\n\t\t\theader: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-\",\n\t\t},\n\t}\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(\n\t\tpropagation.TraceContext{}, propagation.Baggage{}))\n\tpropagator := otel.GetTextMapPropagator()\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tctx := context.Background()\n\t\t\tmd := metadata.MD{}\n\t\t\tmd.Set(\"traceparent\", tt.header)\n\t\t\t_, spanCtx := Extract(ctx, propagator, &md)\n\t\t\tassert.Equal(t, trace.SpanContext{}, spanCtx)\n\t\t})\n\t}\n}\n\nfunc TestInjectValidTraceContext(t *testing.T) {\n\tstateStr := \"key1=value1,key2=value2\"\n\tstate, err := trace.ParseTraceState(stateStr)\n\trequire.NoError(t, err)\n\n\ttests := []struct {\n\t\tname        string\n\t\ttraceparent string\n\t\ttracestate  string\n\t\tsc          trace.SpanContext\n\t}{\n\t\t{\n\t\t\tname:        \"not sampled\",\n\t\t\ttraceparent: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-00\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID: traceID,\n\t\t\t\tSpanID:  spanID,\n\t\t\t\tRemote:  true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"sampled\",\n\t\t\ttraceparent: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID:    traceID,\n\t\t\t\tSpanID:     spanID,\n\t\t\t\tTraceFlags: trace.FlagsSampled,\n\t\t\t\tRemote:     true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"unsupported trace flag bits dropped\",\n\t\t\ttraceparent: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01\",\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID:    traceID,\n\t\t\t\tSpanID:     spanID,\n\t\t\t\tTraceFlags: 0xff,\n\t\t\t\tRemote:     true,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:        \"with tracestate\",\n\t\t\ttraceparent: \"00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-00\",\n\t\t\ttracestate:  stateStr,\n\t\t\tsc: trace.NewSpanContext(trace.SpanContextConfig{\n\t\t\t\tTraceID:    traceID,\n\t\t\t\tSpanID:     spanID,\n\t\t\t\tTraceState: state,\n\t\t\t\tRemote:     true,\n\t\t\t}),\n\t\t},\n\t}\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(\n\t\tpropagation.TraceContext{}, propagation.Baggage{}))\n\tpropagator := otel.GetTextMapPropagator()\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tctx := context.Background()\n\t\t\tctx = trace.ContextWithRemoteSpanContext(ctx, tt.sc)\n\n\t\t\twant := metadata.MD{}\n\t\t\twant.Set(\"traceparent\", tt.traceparent)\n\t\t\tif len(tt.tracestate) > 0 {\n\t\t\t\twant.Set(\"tracestate\", tt.tracestate)\n\t\t\t}\n\n\t\t\tmd := metadata.MD{}\n\t\t\tInject(ctx, propagator, &md)\n\t\t\tassert.Equal(t, want, md)\n\n\t\t\tmm := &metadataSupplier{\n\t\t\t\tmetadata: &md,\n\t\t\t}\n\t\t\tassert.NotEmpty(t, mm.Keys())\n\t\t})\n\t}\n}\n\nfunc TestInvalidSpanContextDropped(t *testing.T) {\n\tinvalidSC := trace.SpanContext{}\n\trequire.False(t, invalidSC.IsValid())\n\tctx := trace.ContextWithRemoteSpanContext(context.Background(), invalidSC)\n\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(\n\t\tpropagation.TraceContext{}, propagation.Baggage{}))\n\tpropagator := otel.GetTextMapPropagator()\n\n\tmd := metadata.MD{}\n\tInject(ctx, propagator, &md)\n\tmm := &metadataSupplier{\n\t\tmetadata: &md,\n\t}\n\tassert.Empty(t, mm.Keys())\n\tassert.Equal(t, \"\", mm.Get(\"traceparent\"), \"injected invalid SpanContext\")\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/message_test.go\n```golang\npackage trace\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/types/dynamicpb\"\n)\n\nfunc TestMessageType_Event(t *testing.T) {\n\tvar span mockSpan\n\tctx := trace.ContextWithSpan(context.Background(), &span)\n\tMessageReceived.Event(ctx, 1, \"foo\")\n\tassert.Equal(t, messageEvent, span.name)\n\tassert.NotEmpty(t, span.options)\n}\n\nfunc TestMessageType_EventProtoMessage(t *testing.T) {\n\tvar span mockSpan\n\tvar message mockMessage\n\tctx := trace.ContextWithSpan(context.Background(), &span)\n\tMessageReceived.Event(ctx, 1, message)\n\tassert.Equal(t, messageEvent, span.name)\n\tassert.NotEmpty(t, span.options)\n}\n\ntype mockSpan struct {\n\tname    string\n\toptions []trace.EventOption\n}\n\nfunc (m *mockSpan) End(options ...trace.SpanEndOption) {\n}\n\nfunc (m *mockSpan) AddEvent(name string, options ...trace.EventOption) {\n\tm.name = name\n\tm.options = options\n}\n\nfunc (m *mockSpan) IsRecording() bool {\n\treturn false\n}\n\nfunc (m *mockSpan) RecordError(err error, options ...trace.EventOption) {\n}\n\nfunc (m *mockSpan) SpanContext() trace.SpanContext {\n\tpanic(\"implement me\")\n}\n\nfunc (m *mockSpan) SetStatus(code codes.Code, description string) {\n}\n\nfunc (m *mockSpan) SetName(name string) {\n}\n\nfunc (m *mockSpan) SetAttributes(kv ...attribute.KeyValue) {\n}\n\nfunc (m *mockSpan) TracerProvider() trace.TracerProvider {\n\treturn nil\n}\n\ntype mockMessage struct{}\n\nfunc (m mockMessage) ProtoReflect() protoreflect.Message {\n\treturn new(dynamicpb.Message)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/attributes_test.go\n```golang\npackage trace\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\tgcodes \"google.golang.org/grpc/codes\"\n)\n\nfunc TestStatusCodeAttr(t *testing.T) {\n\tassert.Equal(t, GRPCStatusCodeKey.Int(int(gcodes.DataLoss)), StatusCodeAttr(gcodes.DataLoss))\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/agent.go\n```golang\npackage trace\n\nimport (\n\t\"context\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/lang\"\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"sync\"\n\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/exporters/jaeger\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\"\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdouttrace\"\n\t\"go.opentelemetry.io/otel/exporters/zipkin\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\tsdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.4.0\"\n)\n\nconst (\n\tkindJaeger   = \"jaeger\"\n\tkindZipkin   = \"zipkin\"\n\tkindOtlpGrpc = \"otlpgrpc\"\n\tkindOtlpHttp = \"otlphttp\"\n\tkindFile     = \"file\"\n\tkindStdout   = \"stdout\"\n\tprotocolUdp  = \"udp\"\n)\n\nvar (\n\tagents = make(map[string]lang.PlaceholderType)\n\tlock   sync.Mutex\n\ttp     *sdktrace.TracerProvider\n)\n\n// StartAgent starts an opentelemetry agent.\nfunc StartAgent(c Config) {\n\tif c.Disabled {\n\t\treturn\n\t}\n\n\tlock.Lock()\n\tdefer lock.Unlock()\n\n\t_, ok := agents[c.Endpoint]\n\tif ok {\n\t\treturn\n\t}\n\n\t// if error happens, let later calls run.\n\tif err := startAgent(c); err != nil {\n\t\treturn\n\t}\n\n\tagents[c.Endpoint] = lang.Placeholder\n}\n\n// StopAgent shuts down the span processors in the order they were registered.\nfunc StopAgent() {\n\t_ = tp.Shutdown(context.Background())\n}\n\nfunc createExporter(c Config) (sdktrace.SpanExporter, error) {\n\t// Just support jaeger and zipkin now, more for later\n\tswitch c.Batcher {\n\tcase kindJaeger:\n\t\tu, err := url.Parse(c.Endpoint)\n\t\tif err == nil && u.Scheme == protocolUdp {\n\t\t\treturn jaeger.New(jaeger.WithAgentEndpoint(jaeger.WithAgentHost(u.Hostname()),\n\t\t\t\tjaeger.WithAgentPort(u.Port())))\n\t\t}\n\t\treturn jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(c.Endpoint)))\n\tcase kindZipkin:\n\t\treturn zipkin.New(c.Endpoint)\n\tcase kindOtlpGrpc:\n\t\t// Always treat trace exporter as optional component, so we use nonblock here,\n\t\t// otherwise this would slow down app start up even set a dial timeout here when\n\t\t// endpoint can not reach.\n\t\t// If the connection not dial success, the global otel ErrorHandler will catch error\n\t\t// when reporting data like other exporters.\n\t\topts := []otlptracegrpc.Option{\n\t\t\totlptracegrpc.WithInsecure(),\n\t\t\totlptracegrpc.WithEndpoint(c.Endpoint),\n\t\t}\n\t\tif len(c.OtlpHeaders) > 0 {\n\t\t\topts = append(opts, otlptracegrpc.WithHeaders(c.OtlpHeaders))\n\t\t}\n\t\treturn otlptracegrpc.New(context.Background(), opts...)\n\tcase kindOtlpHttp:\n\t\t// Not support flexible configuration now.\n\t\topts := []otlptracehttp.Option{\n\t\t\totlptracehttp.WithInsecure(),\n\t\t\totlptracehttp.WithEndpoint(c.Endpoint),\n\t\t}\n\t\tif len(c.OtlpHeaders) > 0 {\n\t\t\topts = append(opts, otlptracehttp.WithHeaders(c.OtlpHeaders))\n\t\t}\n\t\tif len(c.OtlpHttpPath) > 0 {\n\t\t\topts = append(opts, otlptracehttp.WithURLPath(c.OtlpHttpPath))\n\t\t}\n\t\treturn otlptracehttp.New(context.Background(), opts...)\n\tcase kindFile:\n\t\tf, err := os.OpenFile(c.Endpoint, os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0666)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"file exporter endpoint error: %s\", err.Error())\n\t\t}\n\t\treturn stdouttrace.New(stdouttrace.WithWriter(f))\n\tcase kindStdout:\n\t\treturn stdouttrace.New(stdouttrace.WithPrettyPrint())\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unknown exporter: %s\", c.Batcher)\n\t}\n}\n\nfunc startAgent(c Config) error {\n\tAddResources(semconv.ServiceNameKey.String(c.Name))\n\n\topts := []sdktrace.TracerProviderOption{\n\t\t// Set the sampling rate based on the parent span to 100%\n\t\t//sdktrace.WithSampler(sdktrace.ParentBased(sdktrace.TraceIDRatioBased(c.Sampler))),\n\t\tsdktrace.WithSampler(sdktrace.AlwaysSample()),\n\n\t\t// Record information about this application in a Resource.\n\t\tsdktrace.WithResource(resource.NewSchemaless(attrResources...)),\n\t}\n\n\tif len(c.Endpoint) > 0 {\n\t\texp, err := createExporter(c)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\treturn err\n\t\t}\n\n\t\t// Always be sure to batch in production.\n\t\topts = append(opts, sdktrace.WithBatcher(exp))\n\t}\n\n\ttp = sdktrace.NewTracerProvider(opts...)\n\totel.SetTracerProvider(tp)\n\totel.SetErrorHandler(otel.ErrorHandlerFunc(func(err error) {\n\t\tfmt.Errorf(\"[otel] error: %v\", err)\n\t}))\n\n\treturn nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/propagation.go\n```golang\npackage trace\n\nimport (\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n)\n\nfunc init() {\n\totel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(\n\t\tpropagation.TraceContext{}, propagation.Baggage{}))\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/utils.go\n```golang\npackage trace\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"strings\"\n\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.4.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/grpc/peer\"\n)\n\nconst localhost = \"127.0.0.1\"\n\n// ParseFullMethod returns the method name and attributes.\nfunc ParseFullMethod(fullMethod string) (string, []attribute.KeyValue) {\n\tname := strings.TrimLeft(fullMethod, \"/\")\n\tparts := strings.SplitN(name, \"/\", 2)\n\tif len(parts) != 2 {\n\t\t// Invalid format, does not follow `/package.service/method`.\n\t\treturn name, []attribute.KeyValue(nil)\n\t}\n\n\tvar attrs []attribute.KeyValue\n\tif service := parts[0]; service != \"\" {\n\t\tattrs = append(attrs, semconv.RPCServiceKey.String(service))\n\t}\n\tif method := parts[1]; method != \"\" {\n\t\tattrs = append(attrs, semconv.RPCMethodKey.String(method))\n\t}\n\n\treturn name, attrs\n}\n\n// PeerAttr returns the peer attributes.\nfunc PeerAttr(addr string) []attribute.KeyValue {\n\thost, port, err := net.SplitHostPort(addr)\n\tif err != nil {\n\t\treturn nil\n\t}\n\n\tif len(host) == 0 {\n\t\thost = localhost\n\t}\n\n\treturn []attribute.KeyValue{\n\t\tsemconv.NetPeerIPKey.String(host),\n\t\tsemconv.NetPeerPortKey.String(port),\n\t}\n}\n\n// PeerFromCtx returns the peer from ctx.\nfunc PeerFromCtx(ctx context.Context) string {\n\tp, ok := peer.FromContext(ctx)\n\tif !ok || p == nil {\n\t\treturn \"\"\n\t}\n\n\treturn p.Addr.String()\n}\n\n// SpanInfo returns the span info.\nfunc SpanInfo(fullMethod, peerAddress string) (string, []attribute.KeyValue) {\n\tattrs := []attribute.KeyValue{RPCSystemGRPC}\n\tname, mAttrs := ParseFullMethod(fullMethod)\n\tattrs = append(attrs, mAttrs...)\n\tattrs = append(attrs, PeerAttr(peerAddress)...)\n\treturn name, attrs\n}\n\n// TracerFromContext returns a tracer in ctx, otherwise returns a global tracer.\nfunc TracerFromContext(ctx context.Context) (tracer trace.Tracer) {\n\tif span := trace.SpanFromContext(ctx); span.SpanContext().IsValid() {\n\t\ttracer = span.TracerProvider().Tracer(TraceName)\n\t} else {\n\t\ttracer = otel.Tracer(TraceName)\n\t}\n\n\treturn\n}\n\nfunc SpanIDFromContext(ctx context.Context) string {\n\tspanCtx := trace.SpanContextFromContext(ctx)\n\tif spanCtx.HasSpanID() {\n\t\treturn spanCtx.SpanID().String()\n\t}\n\n\treturn \"\"\n}\n\nfunc TraceIDFromContext(ctx context.Context) string {\n\tspanCtx := trace.SpanContextFromContext(ctx)\n\tif spanCtx.HasTraceID() {\n\t\treturn spanCtx.TraceID().String()\n\t}\n\n\treturn \"\"\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/agent_test.go\n```golang\npackage trace\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestStartAgent(t *testing.T) {\n\n\tconst (\n\t\tendpoint1  = \"localhost:1234\"\n\t\tendpoint2  = \"remotehost:1234\"\n\t\tendpoint3  = \"localhost:1235\"\n\t\tendpoint4  = \"localhost:1236\"\n\t\tendpoint5  = \"udp://localhost:6831\"\n\t\tendpoint6  = \"localhost:1237\"\n\t\tendpoint71 = \"/tmp/trace.log\"\n\t\tendpoint72 = \"/not-exist-fs/trace.log\"\n\t)\n\tc1 := Config{\n\t\tName: \"foo\",\n\t}\n\tc2 := Config{\n\t\tName:     \"bar\",\n\t\tEndpoint: endpoint1,\n\t\tBatcher:  kindJaeger,\n\t}\n\tc3 := Config{\n\t\tName:     \"any\",\n\t\tEndpoint: endpoint2,\n\t\tBatcher:  kindZipkin,\n\t}\n\tc4 := Config{\n\t\tName:     \"bla\",\n\t\tEndpoint: endpoint3,\n\t\tBatcher:  \"otlp\",\n\t}\n\tc5 := Config{\n\t\tName:     \"otlpgrpc\",\n\t\tEndpoint: endpoint3,\n\t\tBatcher:  kindOtlpGrpc,\n\t\tOtlpHeaders: map[string]string{\n\t\t\t\"uptrace-dsn\": \"http://project2_secret_token@localhost:14317/2\",\n\t\t},\n\t}\n\tc6 := Config{\n\t\tName:     \"otlphttp\",\n\t\tEndpoint: endpoint4,\n\t\tBatcher:  kindOtlpHttp,\n\t\tOtlpHeaders: map[string]string{\n\t\t\t\"uptrace-dsn\": \"http://project2_secret_token@localhost:14318/2\",\n\t\t},\n\t\tOtlpHttpPath: \"/v1/traces\",\n\t}\n\tc7 := Config{\n\t\tName:     \"UDP\",\n\t\tEndpoint: endpoint5,\n\t\tBatcher:  kindJaeger,\n\t}\n\tc8 := Config{\n\t\tDisabled: true,\n\t\tEndpoint: endpoint6,\n\t\tBatcher:  kindJaeger,\n\t}\n\tc9 := Config{\n\t\tName:     \"file\",\n\t\tEndpoint: endpoint71,\n\t\tBatcher:  kindFile,\n\t}\n\tc10 := Config{\n\t\tName:     \"file\",\n\t\tEndpoint: endpoint72,\n\t\tBatcher:  kindFile,\n\t}\n\n\tStartAgent(c1)\n\tStartAgent(c1)\n\tStartAgent(c2)\n\tStartAgent(c3)\n\tStartAgent(c4)\n\tStartAgent(c5)\n\tStartAgent(c6)\n\tStartAgent(c7)\n\tStartAgent(c8)\n\tStartAgent(c9)\n\tStartAgent(c10)\n\tdefer StopAgent()\n\n\tlock.Lock()\n\tdefer lock.Unlock()\n\n\t// because remotehost cannot be resolved\n\tassert.Equal(t, 6, len(agents))\n\t_, ok := agents[\"\"]\n\tassert.True(t, ok)\n\t_, ok = agents[endpoint1]\n\tassert.True(t, ok)\n\t_, ok = agents[endpoint2]\n\tassert.False(t, ok)\n\t_, ok = agents[endpoint5]\n\tassert.True(t, ok)\n\t_, ok = agents[endpoint6]\n\tassert.False(t, ok)\n\t_, ok = agents[endpoint71]\n\tassert.True(t, ok)\n\t_, ok = agents[endpoint72]\n\tassert.False(t, ok)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/tracer.go\n```golang\npackage trace\n\nimport (\n\t\"context\"\n\n\t\"go.opentelemetry.io/otel/baggage\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\tsdktrace \"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\n// assert that metadataSupplier implements the TextMapCarrier interface\nvar _ propagation.TextMapCarrier = (*metadataSupplier)(nil)\n\ntype metadataSupplier struct {\n\tmetadata *metadata.MD\n}\n\nfunc (s *metadataSupplier) Get(key string) string {\n\tvalues := s.metadata.Get(key)\n\tif len(values) == 0 {\n\t\treturn \"\"\n\t}\n\n\treturn values[0]\n}\n\nfunc (s *metadataSupplier) Set(key, value string) {\n\ts.metadata.Set(key, value)\n}\n\nfunc (s *metadataSupplier) Keys() []string {\n\tout := make([]string, 0, len(*s.metadata))\n\tfor key := range *s.metadata {\n\t\tout = append(out, key)\n\t}\n\n\treturn out\n}\n\n// Inject injects cross-cutting concerns from the ctx into the metadata.\nfunc Inject(ctx context.Context, p propagation.TextMapPropagator, metadata *metadata.MD) {\n\tp.Inject(ctx, &metadataSupplier{\n\t\tmetadata: metadata,\n\t})\n}\n\n// Extract extracts the metadata from ctx.\nfunc Extract(ctx context.Context, p propagation.TextMapPropagator, metadata *metadata.MD) (\n\tbaggage.Baggage, sdktrace.SpanContext) {\n\tctx = p.Extract(ctx, &metadataSupplier{\n\t\tmetadata: metadata,\n\t})\n\n\treturn baggage.FromContext(ctx), sdktrace.SpanContextFromContext(ctx)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/trace/tracetest/tracetest.go\n```golang\npackage tracetest\n\nimport (\n\t\"testing\"\n\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n)\n\n// NewInMemoryExporter returns a new InMemoryExporter\n// and sets it as the global for tests.\nfunc NewInMemoryExporter(t *testing.T) *tracetest.InMemoryExporter {\n\tme := tracetest.NewInMemoryExporter()\n\tt.Cleanup(func() {\n\t\tme.Reset()\n\t})\n\totel.SetTracerProvider(trace.NewTracerProvider(trace.WithSyncer(me)))\n\n\treturn me\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/rpc_client/resource/client.go\n```golang\npackage resource\n\nimport (\n\tresource_networkv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\t\"google.golang.org/grpc\"\n)\n\ntype NetworkClient struct {\n}\n\nfunc NewNetworkClient(cc grpc.ClientConnInterface) resource_networkv1alpha.ResourceNetworkClient {\n\treturn resource_networkv1alpha.NewResourceNetworkClient(cc)\n}\n\nfunc NewServerClient(cc grpc.ClientConnInterface) resource_serverv1alpha.ResourceServiceClient {\n\treturn resource_serverv1alpha.NewResourceServiceClient(cc)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/mr/mapreduce_fuzz_test.go\n```golang\n//go:build go1.18\n// +build go1.18\n\npackage mr\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"runtime\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.uber.org/goleak\"\n)\n\nfunc FuzzMapReduce(f *testing.F) {\n\trand.Seed(time.Now().UnixNano())\n\n\tf.Add(uint(10), uint(runtime.NumCPU()))\n\tf.Fuzz(func(t *testing.T, num uint, workers uint) {\n\t\tn := int64(num)%5000 + 5000\n\t\tgenPanic := rand.Intn(100) == 0\n\t\tmapperPanic := rand.Intn(100) == 0\n\t\treducerPanic := rand.Intn(100) == 0\n\t\tgenIdx := rand.Int63n(n)\n\t\tmapperIdx := rand.Int63n(n)\n\t\treducerIdx := rand.Int63n(n)\n\t\tsquareSum := (n - 1) * n * (2*n - 1) / 6\n\n\t\tfn := func() (interface{}, error) {\n\t\t\tdefer goleak.VerifyNone(t, goleak.IgnoreCurrent())\n\n\t\t\treturn MapReduce(func(source chan<- interface{}) {\n\t\t\t\tfor i := int64(0); i < n; i++ {\n\t\t\t\t\tsource <- i\n\t\t\t\t\tif genPanic && i == genIdx {\n\t\t\t\t\t\tpanic(\"foo\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\t\tv := item.(int64)\n\t\t\t\tif mapperPanic && v == mapperIdx {\n\t\t\t\t\tpanic(\"bar\")\n\t\t\t\t}\n\t\t\t\twriter.Write(v * v)\n\t\t\t}, func(pipe <-chan interface{}, writer Writer, cancel func(error)) {\n\t\t\t\tvar idx int64\n\t\t\t\tvar total int64\n\t\t\t\tfor v := range pipe {\n\t\t\t\t\tif reducerPanic && idx == reducerIdx {\n\t\t\t\t\t\tpanic(\"baz\")\n\t\t\t\t\t}\n\t\t\t\t\ttotal += v.(int64)\n\t\t\t\t\tidx++\n\t\t\t\t}\n\t\t\t\twriter.Write(total)\n\t\t\t}, WithWorkers(int(workers)%50+runtime.NumCPU()/2))\n\t\t}\n\n\t\tif genPanic || mapperPanic || reducerPanic {\n\t\t\tvar buf strings.Builder\n\t\t\tbuf.WriteString(fmt.Sprintf(\"n: %d\", n))\n\t\t\tbuf.WriteString(fmt.Sprintf(\", genPanic: %t\", genPanic))\n\t\t\tbuf.WriteString(fmt.Sprintf(\", mapperPanic: %t\", mapperPanic))\n\t\t\tbuf.WriteString(fmt.Sprintf(\", reducerPanic: %t\", reducerPanic))\n\t\t\tbuf.WriteString(fmt.Sprintf(\", genIdx: %d\", genIdx))\n\t\t\tbuf.WriteString(fmt.Sprintf(\", mapperIdx: %d\", mapperIdx))\n\t\t\tbuf.WriteString(fmt.Sprintf(\", reducerIdx: %d\", reducerIdx))\n\t\t\tassert.Panicsf(t, func() { fn() }, buf.String())\n\t\t} else {\n\t\t\tval, err := fn()\n\t\t\tassert.Nil(t, err)\n\t\t\tassert.Equal(t, squareSum, val.(int64))\n\t\t}\n\t})\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/mr/mapreduce.go\n```golang\npackage mr\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/errorx\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/lang\"\n)\n\nconst (\n\tdefaultWorkers = 16\n\tminWorkers     = 1\n)\n\nvar (\n\t// ErrCancelWithNil is an error that mapreduce was cancelled with nil.\n\tErrCancelWithNil = errors.New(\"mapreduce cancelled with nil\")\n\t// ErrReduceNoOutput is an error that reduce did not output a value.\n\tErrReduceNoOutput = errors.New(\"reduce not writing value\")\n)\n\ntype (\n\t// ForEachFunc is used to do element processing, but no output.\n\tForEachFunc func(item interface{})\n\t// GenerateFunc is used to let callers send elements into source.\n\tGenerateFunc func(source chan<- interface{})\n\t// MapFunc is used to do element processing and write the output to writer.\n\tMapFunc func(item interface{}, writer Writer)\n\t// MapperFunc is used to do element processing and write the output to writer,\n\t// use cancel func to cancel the processing.\n\tMapperFunc func(item interface{}, writer Writer, cancel func(error))\n\t// ReducerFunc is used to reduce all the mapping output and write to writer,\n\t// use cancel func to cancel the processing.\n\tReducerFunc func(pipe <-chan interface{}, writer Writer, cancel func(error))\n\t// VoidReducerFunc is used to reduce all the mapping output, but no output.\n\t// Use cancel func to cancel the processing.\n\tVoidReducerFunc func(pipe <-chan interface{}, cancel func(error))\n\t// Option defines the method to customize the mapreduce.\n\tOption func(opts *mapReduceOptions)\n\n\tmapperContext struct {\n\t\tctx       context.Context\n\t\tmapper    MapFunc\n\t\tsource    <-chan interface{}\n\t\tpanicChan *onceChan\n\t\tcollector chan<- interface{}\n\t\tdoneChan  <-chan lang.PlaceholderType\n\t\tworkers   int\n\t}\n\n\tmapReduceOptions struct {\n\t\tctx     context.Context\n\t\tworkers int\n\t}\n\n\t// Writer interface wraps Write method.\n\tWriter interface {\n\t\tWrite(v interface{})\n\t}\n)\n\n// Finish runs fns parallelly, cancelled on any error.\nfunc Finish(fns ...func() error) error {\n\tif len(fns) == 0 {\n\t\treturn nil\n\t}\n\n\treturn MapReduceVoid(func(source chan<- interface{}) {\n\t\tfor _, fn := range fns {\n\t\t\tsource <- fn\n\t\t}\n\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\tfn := item.(func() error)\n\t\tif err := fn(); err != nil {\n\t\t\tcancel(err)\n\t\t}\n\t}, func(pipe <-chan interface{}, cancel func(error)) {\n\t}, WithWorkers(len(fns)))\n}\n\n// FinishVoid runs fns parallelly.\nfunc FinishVoid(fns ...func()) {\n\tif len(fns) == 0 {\n\t\treturn\n\t}\n\n\tForEach(func(source chan<- interface{}) {\n\t\tfor _, fn := range fns {\n\t\t\tsource <- fn\n\t\t}\n\t}, func(item interface{}) {\n\t\tfn := item.(func())\n\t\tfn()\n\t}, WithWorkers(len(fns)))\n}\n\n// ForEach maps all elements from given generate but no output.\nfunc ForEach(generate GenerateFunc, mapper ForEachFunc, opts ...Option) {\n\toptions := buildOptions(opts...)\n\tpanicChan := &onceChan{channel: make(chan interface{})}\n\tsource := buildSource(generate, panicChan)\n\tcollector := make(chan interface{})\n\tdone := make(chan lang.PlaceholderType)\n\n\tgo executeMappers(mapperContext{\n\t\tctx: options.ctx,\n\t\tmapper: func(item interface{}, _ Writer) {\n\t\t\tmapper(item)\n\t\t},\n\t\tsource:    source,\n\t\tpanicChan: panicChan,\n\t\tcollector: collector,\n\t\tdoneChan:  done,\n\t\tworkers:   options.workers,\n\t})\n\n\tfor {\n\t\tselect {\n\t\tcase v := <-panicChan.channel:\n\t\t\tpanic(v)\n\t\tcase _, ok := <-collector:\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n}\n\n// MapReduce maps all elements generated from given generate func,\n// and reduces the output elements with given reducer.\nfunc MapReduce(generate GenerateFunc, mapper MapperFunc, reducer ReducerFunc,\n\topts ...Option) (interface{}, error) {\n\tpanicChan := &onceChan{channel: make(chan interface{})}\n\tsource := buildSource(generate, panicChan)\n\treturn mapReduceWithPanicChan(source, panicChan, mapper, reducer, opts...)\n}\n\n// MapReduceChan maps all elements from source, and reduce the output elements with given reducer.\nfunc MapReduceChan(source <-chan interface{}, mapper MapperFunc, reducer ReducerFunc,\n\topts ...Option) (interface{}, error) {\n\tpanicChan := &onceChan{channel: make(chan interface{})}\n\treturn mapReduceWithPanicChan(source, panicChan, mapper, reducer, opts...)\n}\n\n// MapReduceChan maps all elements from source, and reduce the output elements with given reducer.\nfunc mapReduceWithPanicChan(source <-chan interface{}, panicChan *onceChan, mapper MapperFunc,\n\treducer ReducerFunc, opts ...Option) (interface{}, error) {\n\toptions := buildOptions(opts...)\n\t// output is used to write the final result\n\toutput := make(chan interface{})\n\tdefer func() {\n\t\t// reducer can only write once, if more, panic\n\t\tfor range output {\n\t\t\tpanic(\"more than one element written in reducer\")\n\t\t}\n\t}()\n\n\t// collector is used to collect data from mapper, and consume in reducer\n\tcollector := make(chan interface{}, options.workers)\n\t// if done is closed, all mappers and reducer should stop processing\n\tdone := make(chan lang.PlaceholderType)\n\twriter := newGuardedWriter(options.ctx, output, done)\n\tvar closeOnce sync.Once\n\t// use atomic.Value to avoid data race\n\tvar retErr errorx.AtomicError\n\tfinish := func() {\n\t\tcloseOnce.Do(func() {\n\t\t\tclose(done)\n\t\t\tclose(output)\n\t\t})\n\t}\n\tcancel := once(func(err error) {\n\t\tif err != nil {\n\t\t\tretErr.Set(err)\n\t\t} else {\n\t\t\tretErr.Set(ErrCancelWithNil)\n\t\t}\n\n\t\tdrain(source)\n\t\tfinish()\n\t})\n\n\tgo func() {\n\t\tdefer func() {\n\t\t\tdrain(collector)\n\t\t\tif r := recover(); r != nil {\n\t\t\t\tpanicChan.write(r)\n\t\t\t}\n\t\t\tfinish()\n\t\t}()\n\n\t\treducer(collector, writer, cancel)\n\t}()\n\n\tgo executeMappers(mapperContext{\n\t\tctx: options.ctx,\n\t\tmapper: func(item interface{}, w Writer) {\n\t\t\tmapper(item, w, cancel)\n\t\t},\n\t\tsource:    source,\n\t\tpanicChan: panicChan,\n\t\tcollector: collector,\n\t\tdoneChan:  done,\n\t\tworkers:   options.workers,\n\t})\n\n\tselect {\n\tcase <-options.ctx.Done():\n\t\tcancel(context.DeadlineExceeded)\n\t\treturn nil, context.DeadlineExceeded\n\tcase v := <-panicChan.channel:\n\t\tpanic(v)\n\tcase v, ok := <-output:\n\t\tif err := retErr.Load(); err != nil {\n\t\t\treturn nil, err\n\t\t} else if ok {\n\t\t\treturn v, nil\n\t\t} else {\n\t\t\treturn nil, ErrReduceNoOutput\n\t\t}\n\t}\n}\n\n// MapReduceVoid maps all elements generated from given generate,\n// and reduce the output elements with given reducer.\nfunc MapReduceVoid(generate GenerateFunc, mapper MapperFunc, reducer VoidReducerFunc, opts ...Option) error {\n\t_, err := MapReduce(generate, mapper, func(input <-chan interface{}, writer Writer, cancel func(error)) {\n\t\treducer(input, cancel)\n\t}, opts...)\n\tif errors.Is(err, ErrReduceNoOutput) {\n\t\treturn nil\n\t}\n\n\treturn err\n}\n\n// WithContext customizes a mapreduce processing accepts a given ctx.\nfunc WithContext(ctx context.Context) Option {\n\treturn func(opts *mapReduceOptions) {\n\t\topts.ctx = ctx\n\t}\n}\n\n// WithWorkers customizes a mapreduce processing with given workers.\nfunc WithWorkers(workers int) Option {\n\treturn func(opts *mapReduceOptions) {\n\t\tif workers < minWorkers {\n\t\t\topts.workers = minWorkers\n\t\t} else {\n\t\t\topts.workers = workers\n\t\t}\n\t}\n}\n\nfunc buildOptions(opts ...Option) *mapReduceOptions {\n\toptions := newOptions()\n\tfor _, opt := range opts {\n\t\topt(options)\n\t}\n\n\treturn options\n}\n\nfunc buildSource(generate GenerateFunc, panicChan *onceChan) chan interface{} {\n\tsource := make(chan interface{})\n\tgo func() {\n\t\tdefer func() {\n\t\t\tif r := recover(); r != nil {\n\t\t\t\tpanicChan.write(r)\n\t\t\t}\n\t\t\tclose(source)\n\t\t}()\n\n\t\tgenerate(source)\n\t}()\n\n\treturn source\n}\n\n// drain drains the channel.\nfunc drain(channel <-chan interface{}) {\n\t// drain the channel\n\tfor range channel {\n\t}\n}\n\nfunc executeMappers(mCtx mapperContext) {\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(mCtx.collector)\n\t\tdrain(mCtx.source)\n\t}()\n\n\tvar failed int32\n\tpool := make(chan lang.PlaceholderType, mCtx.workers)\n\twriter := newGuardedWriter(mCtx.ctx, mCtx.collector, mCtx.doneChan)\n\tfor atomic.LoadInt32(&failed) == 0 {\n\t\tselect {\n\t\tcase <-mCtx.ctx.Done():\n\t\t\treturn\n\t\tcase <-mCtx.doneChan:\n\t\t\treturn\n\t\tcase pool <- lang.Placeholder:\n\t\t\titem, ok := <-mCtx.source\n\t\t\tif !ok {\n\t\t\t\t<-pool\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\twg.Add(1)\n\t\t\tgo func() {\n\t\t\t\tdefer func() {\n\t\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\t\tatomic.AddInt32(&failed, 1)\n\t\t\t\t\t\tmCtx.panicChan.write(r)\n\t\t\t\t\t}\n\t\t\t\t\twg.Done()\n\t\t\t\t\t<-pool\n\t\t\t\t}()\n\n\t\t\t\tmCtx.mapper(item, writer)\n\t\t\t}()\n\t\t}\n\t}\n}\n\nfunc newOptions() *mapReduceOptions {\n\treturn &mapReduceOptions{\n\t\tctx:     context.Background(),\n\t\tworkers: defaultWorkers,\n\t}\n}\n\nfunc once(fn func(error)) func(error) {\n\tonce := new(sync.Once)\n\treturn func(err error) {\n\t\tonce.Do(func() {\n\t\t\tfn(err)\n\t\t})\n\t}\n}\n\ntype guardedWriter struct {\n\tctx     context.Context\n\tchannel chan<- interface{}\n\tdone    <-chan lang.PlaceholderType\n}\n\nfunc newGuardedWriter(ctx context.Context, channel chan<- interface{},\n\tdone <-chan lang.PlaceholderType) guardedWriter {\n\treturn guardedWriter{\n\t\tctx:     ctx,\n\t\tchannel: channel,\n\t\tdone:    done,\n\t}\n}\n\nfunc (gw guardedWriter) Write(v interface{}) {\n\tselect {\n\tcase <-gw.ctx.Done():\n\t\treturn\n\tcase <-gw.done:\n\t\treturn\n\tdefault:\n\t\tgw.channel <- v\n\t}\n}\n\ntype onceChan struct {\n\tchannel chan interface{}\n\twrote   int32\n}\n\nfunc (oc *onceChan) write(val interface{}) {\n\tif atomic.CompareAndSwapInt32(&oc.wrote, 0, 1) {\n\t\toc.channel <- val\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/mr/mapreduce_test.go\n```golang\npackage mr\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"runtime\"\n\t\"sync/atomic\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.uber.org/goleak\"\n)\n\nvar errDummy = errors.New(\"dummy\")\n\nfunc init() {\n\tlog.SetOutput(ioutil.Discard)\n}\n\nfunc TestFinish(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tvar total uint32\n\terr := Finish(func() error {\n\t\tatomic.AddUint32(&total, 2)\n\t\treturn nil\n\t}, func() error {\n\t\tatomic.AddUint32(&total, 3)\n\t\treturn nil\n\t}, func() error {\n\t\tatomic.AddUint32(&total, 5)\n\t\treturn nil\n\t})\n\n\tassert.Equal(t, uint32(10), atomic.LoadUint32(&total))\n\tassert.Nil(t, err)\n}\n\nfunc TestFinishNone(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tassert.Nil(t, Finish())\n}\n\nfunc TestFinishVoidNone(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tFinishVoid()\n}\n\nfunc TestFinishErr(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tvar total uint32\n\terr := Finish(func() error {\n\t\tatomic.AddUint32(&total, 2)\n\t\treturn nil\n\t}, func() error {\n\t\tatomic.AddUint32(&total, 3)\n\t\treturn errDummy\n\t}, func() error {\n\t\tatomic.AddUint32(&total, 5)\n\t\treturn nil\n\t})\n\n\tassert.Equal(t, errDummy, err)\n}\n\nfunc TestFinishVoid(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tvar total uint32\n\tFinishVoid(func() {\n\t\tatomic.AddUint32(&total, 2)\n\t}, func() {\n\t\tatomic.AddUint32(&total, 3)\n\t}, func() {\n\t\tatomic.AddUint32(&total, 5)\n\t})\n\n\tassert.Equal(t, uint32(10), atomic.LoadUint32(&total))\n}\n\nfunc TestForEach(t *testing.T) {\n\tconst tasks = 1000\n\n\tt.Run(\"all\", func(t *testing.T) {\n\t\tdefer goleak.VerifyNone(t)\n\n\t\tvar count uint32\n\t\tForEach(func(source chan<- interface{}) {\n\t\t\tfor i := 0; i < tasks; i++ {\n\t\t\t\tsource <- i\n\t\t\t}\n\t\t}, func(item interface{}) {\n\t\t\tatomic.AddUint32(&count, 1)\n\t\t}, WithWorkers(-1))\n\n\t\tassert.Equal(t, tasks, int(count))\n\t})\n\n\tt.Run(\"odd\", func(t *testing.T) {\n\t\tdefer goleak.VerifyNone(t)\n\n\t\tvar count uint32\n\t\tForEach(func(source chan<- interface{}) {\n\t\t\tfor i := 0; i < tasks; i++ {\n\t\t\t\tsource <- i\n\t\t\t}\n\t\t}, func(item interface{}) {\n\t\t\tif item.(int)%2 == 0 {\n\t\t\t\tatomic.AddUint32(&count, 1)\n\t\t\t}\n\t\t})\n\n\t\tassert.Equal(t, tasks/2, int(count))\n\t})\n\n\tt.Run(\"all\", func(t *testing.T) {\n\t\tdefer goleak.VerifyNone(t)\n\n\t\tassert.PanicsWithValue(t, \"foo\", func() {\n\t\t\tForEach(func(source chan<- interface{}) {\n\t\t\t\tfor i := 0; i < tasks; i++ {\n\t\t\t\t\tsource <- i\n\t\t\t\t}\n\t\t\t}, func(item interface{}) {\n\t\t\t\tpanic(\"foo\")\n\t\t\t})\n\t\t})\n\t})\n}\n\nfunc TestGeneratePanic(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tt.Run(\"all\", func(t *testing.T) {\n\t\tassert.PanicsWithValue(t, \"foo\", func() {\n\t\t\tForEach(func(source chan<- interface{}) {\n\t\t\t\tpanic(\"foo\")\n\t\t\t}, func(item interface{}) {\n\t\t\t})\n\t\t})\n\t})\n}\n\nfunc TestMapperPanic(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tconst tasks = 1000\n\tvar run int32\n\tt.Run(\"all\", func(t *testing.T) {\n\t\tassert.PanicsWithValue(t, \"foo\", func() {\n\t\t\t_, _ = MapReduce(func(source chan<- interface{}) {\n\t\t\t\tfor i := 0; i < tasks; i++ {\n\t\t\t\t\tsource <- i\n\t\t\t\t}\n\t\t\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\t\tatomic.AddInt32(&run, 1)\n\t\t\t\tpanic(\"foo\")\n\t\t\t}, func(pipe <-chan interface{}, writer Writer, cancel func(error)) {\n\t\t\t})\n\t\t})\n\t\tassert.True(t, atomic.LoadInt32(&run) < tasks/2)\n\t})\n}\n\nfunc TestMapReduce(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\ttests := []struct {\n\t\tname        string\n\t\tmapper      MapperFunc\n\t\treducer     ReducerFunc\n\t\texpectErr   error\n\t\texpectValue interface{}\n\t}{\n\t\t{\n\t\t\tname:        \"simple\",\n\t\t\texpectErr:   nil,\n\t\t\texpectValue: 30,\n\t\t},\n\t\t{\n\t\t\tname: \"cancel with error\",\n\t\t\tmapper: func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\t\tv := item.(int)\n\t\t\t\tif v%3 == 0 {\n\t\t\t\t\tcancel(errDummy)\n\t\t\t\t}\n\t\t\t\twriter.Write(v * v)\n\t\t\t},\n\t\t\texpectErr: errDummy,\n\t\t},\n\t\t{\n\t\t\tname: \"cancel with nil\",\n\t\t\tmapper: func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\t\tv := item.(int)\n\t\t\t\tif v%3 == 0 {\n\t\t\t\t\tcancel(nil)\n\t\t\t\t}\n\t\t\t\twriter.Write(v * v)\n\t\t\t},\n\t\t\texpectErr:   ErrCancelWithNil,\n\t\t\texpectValue: nil,\n\t\t},\n\t\t{\n\t\t\tname: \"cancel with more\",\n\t\t\treducer: func(pipe <-chan interface{}, writer Writer, cancel func(error)) {\n\t\t\t\tvar result int\n\t\t\t\tfor item := range pipe {\n\t\t\t\t\tresult += item.(int)\n\t\t\t\t\tif result > 10 {\n\t\t\t\t\t\tcancel(errDummy)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twriter.Write(result)\n\t\t\t},\n\t\t\texpectErr: errDummy,\n\t\t},\n\t}\n\n\tt.Run(\"MapReduce\", func(t *testing.T) {\n\t\tfor _, test := range tests {\n\t\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\t\tif test.mapper == nil {\n\t\t\t\t\ttest.mapper = func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\t\t\t\tv := item.(int)\n\t\t\t\t\t\twriter.Write(v * v)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif test.reducer == nil {\n\t\t\t\t\ttest.reducer = func(pipe <-chan interface{}, writer Writer, cancel func(error)) {\n\t\t\t\t\t\tvar result int\n\t\t\t\t\t\tfor item := range pipe {\n\t\t\t\t\t\t\tresult += item.(int)\n\t\t\t\t\t\t}\n\t\t\t\t\t\twriter.Write(result)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvalue, err := MapReduce(func(source chan<- interface{}) {\n\t\t\t\t\tfor i := 1; i < 5; i++ {\n\t\t\t\t\t\tsource <- i\n\t\t\t\t\t}\n\t\t\t\t}, test.mapper, test.reducer, WithWorkers(runtime.NumCPU()))\n\n\t\t\t\tassert.Equal(t, test.expectErr, err)\n\t\t\t\tassert.Equal(t, test.expectValue, value)\n\t\t\t})\n\t\t}\n\t})\n\n\tt.Run(\"MapReduce\", func(t *testing.T) {\n\t\tfor _, test := range tests {\n\t\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\t\tif test.mapper == nil {\n\t\t\t\t\ttest.mapper = func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\t\t\t\tv := item.(int)\n\t\t\t\t\t\twriter.Write(v * v)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif test.reducer == nil {\n\t\t\t\t\ttest.reducer = func(pipe <-chan interface{}, writer Writer, cancel func(error)) {\n\t\t\t\t\t\tvar result int\n\t\t\t\t\t\tfor item := range pipe {\n\t\t\t\t\t\t\tresult += item.(int)\n\t\t\t\t\t\t}\n\t\t\t\t\t\twriter.Write(result)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsource := make(chan interface{})\n\t\t\t\tgo func() {\n\t\t\t\t\tfor i := 1; i < 5; i++ {\n\t\t\t\t\t\tsource <- i\n\t\t\t\t\t}\n\t\t\t\t\tclose(source)\n\t\t\t\t}()\n\n\t\t\t\tvalue, err := MapReduceChan(source, test.mapper, test.reducer, WithWorkers(-1))\n\t\t\t\tassert.Equal(t, test.expectErr, err)\n\t\t\t\tassert.Equal(t, test.expectValue, value)\n\t\t\t})\n\t\t}\n\t})\n}\n\nfunc TestMapReduceWithReduerWriteMoreThanOnce(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tassert.Panics(t, func() {\n\t\tMapReduce(func(source chan<- interface{}) {\n\t\t\tfor i := 0; i < 10; i++ {\n\t\t\t\tsource <- i\n\t\t\t}\n\t\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\twriter.Write(item)\n\t\t}, func(pipe <-chan interface{}, writer Writer, cancel func(error)) {\n\t\t\tdrain(pipe)\n\t\t\twriter.Write(\"one\")\n\t\t\twriter.Write(\"two\")\n\t\t})\n\t})\n}\n\nfunc TestMapReduceVoid(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tvar value uint32\n\ttests := []struct {\n\t\tname        string\n\t\tmapper      MapperFunc\n\t\treducer     VoidReducerFunc\n\t\texpectValue uint32\n\t\texpectErr   error\n\t}{\n\t\t{\n\t\t\tname:        \"simple\",\n\t\t\texpectValue: 30,\n\t\t\texpectErr:   nil,\n\t\t},\n\t\t{\n\t\t\tname: \"cancel with error\",\n\t\t\tmapper: func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\t\tv := item.(int)\n\t\t\t\tif v%3 == 0 {\n\t\t\t\t\tcancel(errDummy)\n\t\t\t\t}\n\t\t\t\twriter.Write(v * v)\n\t\t\t},\n\t\t\texpectErr: errDummy,\n\t\t},\n\t\t{\n\t\t\tname: \"cancel with nil\",\n\t\t\tmapper: func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\t\tv := item.(int)\n\t\t\t\tif v%3 == 0 {\n\t\t\t\t\tcancel(nil)\n\t\t\t\t}\n\t\t\t\twriter.Write(v * v)\n\t\t\t},\n\t\t\texpectErr: ErrCancelWithNil,\n\t\t},\n\t\t{\n\t\t\tname: \"cancel with more\",\n\t\t\treducer: func(pipe <-chan interface{}, cancel func(error)) {\n\t\t\t\tfor item := range pipe {\n\t\t\t\t\tresult := atomic.AddUint32(&value, uint32(item.(int)))\n\t\t\t\t\tif result > 10 {\n\t\t\t\t\t\tcancel(errDummy)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\texpectErr: errDummy,\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\tatomic.StoreUint32(&value, 0)\n\n\t\t\tif test.mapper == nil {\n\t\t\t\ttest.mapper = func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\t\t\tv := item.(int)\n\t\t\t\t\twriter.Write(v * v)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif test.reducer == nil {\n\t\t\t\ttest.reducer = func(pipe <-chan interface{}, cancel func(error)) {\n\t\t\t\t\tfor item := range pipe {\n\t\t\t\t\t\tatomic.AddUint32(&value, uint32(item.(int)))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\terr := MapReduceVoid(func(source chan<- interface{}) {\n\t\t\t\tfor i := 1; i < 5; i++ {\n\t\t\t\t\tsource <- i\n\t\t\t\t}\n\t\t\t}, test.mapper, test.reducer)\n\n\t\t\tassert.Equal(t, test.expectErr, err)\n\t\t\tif err == nil {\n\t\t\t\tassert.Equal(t, test.expectValue, atomic.LoadUint32(&value))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestMapReduceVoidWithDelay(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tvar result []int\n\terr := MapReduceVoid(func(source chan<- interface{}) {\n\t\tsource <- 0\n\t\tsource <- 1\n\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\ti := item.(int)\n\t\tif i == 0 {\n\t\t\ttime.Sleep(time.Millisecond * 50)\n\t\t}\n\t\twriter.Write(i)\n\t}, func(pipe <-chan interface{}, cancel func(error)) {\n\t\tfor item := range pipe {\n\t\t\ti := item.(int)\n\t\t\tresult = append(result, i)\n\t\t}\n\t})\n\tassert.Nil(t, err)\n\tassert.Equal(t, 2, len(result))\n\tassert.Equal(t, 1, result[0])\n\tassert.Equal(t, 0, result[1])\n}\n\nfunc TestMapReducePanic(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tassert.Panics(t, func() {\n\t\t_, _ = MapReduce(func(source chan<- interface{}) {\n\t\t\tsource <- 0\n\t\t\tsource <- 1\n\t\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\ti := item.(int)\n\t\t\twriter.Write(i)\n\t\t}, func(pipe <-chan interface{}, writer Writer, cancel func(error)) {\n\t\t\tfor range pipe {\n\t\t\t\tpanic(\"panic\")\n\t\t\t}\n\t\t})\n\t})\n}\n\nfunc TestMapReducePanicOnce(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tassert.Panics(t, func() {\n\t\t_, _ = MapReduce(func(source chan<- interface{}) {\n\t\t\tfor i := 0; i < 100; i++ {\n\t\t\t\tsource <- i\n\t\t\t}\n\t\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\ti := item.(int)\n\t\t\tif i == 0 {\n\t\t\t\tpanic(\"foo\")\n\t\t\t}\n\t\t\twriter.Write(i)\n\t\t}, func(pipe <-chan interface{}, writer Writer, cancel func(error)) {\n\t\t\tfor range pipe {\n\t\t\t\tpanic(\"bar\")\n\t\t\t}\n\t\t})\n\t})\n}\n\nfunc TestMapReducePanicBothMapperAndReducer(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tassert.Panics(t, func() {\n\t\t_, _ = MapReduce(func(source chan<- interface{}) {\n\t\t\tsource <- 0\n\t\t\tsource <- 1\n\t\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\tpanic(\"foo\")\n\t\t}, func(pipe <-chan interface{}, writer Writer, cancel func(error)) {\n\t\t\tpanic(\"bar\")\n\t\t})\n\t})\n}\n\nfunc TestMapReduceVoidCancel(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tvar result []int\n\terr := MapReduceVoid(func(source chan<- interface{}) {\n\t\tsource <- 0\n\t\tsource <- 1\n\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\ti := item.(int)\n\t\tif i == 1 {\n\t\t\tcancel(errors.New(\"anything\"))\n\t\t}\n\t\twriter.Write(i)\n\t}, func(pipe <-chan interface{}, cancel func(error)) {\n\t\tfor item := range pipe {\n\t\t\ti := item.(int)\n\t\t\tresult = append(result, i)\n\t\t}\n\t})\n\tassert.NotNil(t, err)\n\tassert.Equal(t, \"anything\", err.Error())\n}\n\nfunc TestMapReduceVoidCancelWithRemains(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tvar done int32\n\tvar result []int\n\terr := MapReduceVoid(func(source chan<- interface{}) {\n\t\tfor i := 0; i < defaultWorkers*2; i++ {\n\t\t\tsource <- i\n\t\t}\n\t\tatomic.AddInt32(&done, 1)\n\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\ti := item.(int)\n\t\tif i == defaultWorkers/2 {\n\t\t\tcancel(errors.New(\"anything\"))\n\t\t}\n\t\twriter.Write(i)\n\t}, func(pipe <-chan interface{}, cancel func(error)) {\n\t\tfor item := range pipe {\n\t\t\ti := item.(int)\n\t\t\tresult = append(result, i)\n\t\t}\n\t})\n\tassert.NotNil(t, err)\n\tassert.Equal(t, \"anything\", err.Error())\n\tassert.Equal(t, int32(1), done)\n}\n\nfunc TestMapReduceWithoutReducerWrite(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tuids := []int{1, 2, 3}\n\tres, err := MapReduce(func(source chan<- interface{}) {\n\t\tfor _, uid := range uids {\n\t\t\tsource <- uid\n\t\t}\n\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\twriter.Write(item)\n\t}, func(pipe <-chan interface{}, writer Writer, cancel func(error)) {\n\t\tdrain(pipe)\n\t\t// not calling writer.Write(...), should not panic\n\t})\n\tassert.Equal(t, ErrReduceNoOutput, err)\n\tassert.Nil(t, res)\n}\n\nfunc TestMapReduceVoidPanicInReducer(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tconst message = \"foo\"\n\tassert.Panics(t, func() {\n\t\tvar done int32\n\t\t_ = MapReduceVoid(func(source chan<- interface{}) {\n\t\t\tfor i := 0; i < defaultWorkers*2; i++ {\n\t\t\t\tsource <- i\n\t\t\t}\n\t\t\tatomic.AddInt32(&done, 1)\n\t\t}, func(item interface{}, writer Writer, cancel func(error)) {\n\t\t\ti := item.(int)\n\t\t\twriter.Write(i)\n\t\t}, func(pipe <-chan interface{}, cancel func(error)) {\n\t\t\tpanic(message)\n\t\t}, WithWorkers(1))\n\t})\n}\n\nfunc TestForEachWithContext(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tvar done int32\n\tctx, cancel := context.WithCancel(context.Background())\n\tForEach(func(source chan<- interface{}) {\n\t\tfor i := 0; i < defaultWorkers*2; i++ {\n\t\t\tsource <- i\n\t\t}\n\t\tatomic.AddInt32(&done, 1)\n\t}, func(item interface{}) {\n\t\ti := item.(int)\n\t\tif i == defaultWorkers/2 {\n\t\t\tcancel()\n\t\t}\n\t}, WithContext(ctx))\n}\n\nfunc TestMapReduceWithContext(t *testing.T) {\n\tdefer goleak.VerifyNone(t)\n\n\tvar done int32\n\tvar result []int\n\tctx, cancel := context.WithCancel(context.Background())\n\terr := MapReduceVoid(func(source chan<- interface{}) {\n\t\tfor i := 0; i < defaultWorkers*2; i++ {\n\t\t\tsource <- i\n\t\t}\n\t\tatomic.AddInt32(&done, 1)\n\t}, func(item interface{}, writer Writer, c func(error)) {\n\t\ti := item.(int)\n\t\tif i == defaultWorkers/2 {\n\t\t\tcancel()\n\t\t}\n\t\twriter.Write(i)\n\t}, func(pipe <-chan interface{}, cancel func(error)) {\n\t\tfor item := range pipe {\n\t\t\ti := item.(int)\n\t\t\tresult = append(result, i)\n\t\t}\n\t}, WithContext(ctx))\n\tassert.NotNil(t, err)\n\tassert.Equal(t, context.DeadlineExceeded, err)\n}\n\nfunc BenchmarkMapReduce(b *testing.B) {\n\tb.ReportAllocs()\n\n\tmapper := func(v interface{}, writer Writer, cancel func(error)) {\n\t\twriter.Write(v.(int64) * v.(int64))\n\t}\n\treducer := func(input <-chan interface{}, writer Writer, cancel func(error)) {\n\t\tvar result int64\n\t\tfor v := range input {\n\t\t\tresult += v.(int64)\n\t\t}\n\t\twriter.Write(result)\n\t}\n\n\tfor i := 0; i < b.N; i++ {\n\t\tMapReduce(func(input chan<- interface{}) {\n\t\t\tfor j := 0; j < 2; j++ {\n\t\t\t\tinput <- int64(j)\n\t\t\t}\n\t\t}, mapper, reducer)\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/errorx/callchain_test.go\n```golang\npackage errorx\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestChain(t *testing.T) {\n\terrDummy := errors.New(\"dummy\")\n\tassert.Nil(t, Chain(func() error {\n\t\treturn nil\n\t}, func() error {\n\t\treturn nil\n\t}))\n\tassert.Equal(t, errDummy, Chain(func() error {\n\t\treturn errDummy\n\t}, func() error {\n\t\treturn nil\n\t}))\n\tassert.Equal(t, errDummy, Chain(func() error {\n\t\treturn nil\n\t}, func() error {\n\t\treturn errDummy\n\t}))\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/errorx/atomicerror_test.go\n```golang\npackage errorx\n\nimport (\n\t\"errors\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nvar errDummy = errors.New(\"hello\")\n\nfunc TestAtomicError(t *testing.T) {\n\tvar err AtomicError\n\terr.Set(errDummy)\n\tassert.Equal(t, errDummy, err.Load())\n}\n\nfunc TestAtomicErrorSetNil(t *testing.T) {\n\tvar (\n\t\terrNil error\n\t\terr    AtomicError\n\t)\n\terr.Set(errNil)\n\tassert.Equal(t, errNil, err.Load())\n}\n\nfunc TestAtomicErrorNil(t *testing.T) {\n\tvar err AtomicError\n\tassert.Nil(t, err.Load())\n}\n\nfunc BenchmarkAtomicError(b *testing.B) {\n\tvar aerr AtomicError\n\twg := sync.WaitGroup{}\n\n\tb.Run(\"Load\", func(b *testing.B) {\n\t\tvar done uint32\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tif atomic.LoadUint32(&done) != 0 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\twg.Add(1)\n\t\t\t\tgo func() {\n\t\t\t\t\taerr.Set(errDummy)\n\t\t\t\t\twg.Done()\n\t\t\t\t}()\n\t\t\t}\n\t\t}()\n\t\tb.ResetTimer()\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\t_ = aerr.Load()\n\t\t}\n\t\tb.StopTimer()\n\t\tatomic.StoreUint32(&done, 1)\n\t\twg.Wait()\n\t})\n\tb.Run(\"Set\", func(b *testing.B) {\n\t\tvar done uint32\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tif atomic.LoadUint32(&done) != 0 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\twg.Add(1)\n\t\t\t\tgo func() {\n\t\t\t\t\t_ = aerr.Load()\n\t\t\t\t\twg.Done()\n\t\t\t\t}()\n\t\t\t}\n\t\t}()\n\t\tb.ResetTimer()\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\taerr.Set(errDummy)\n\t\t}\n\t\tb.StopTimer()\n\t\tatomic.StoreUint32(&done, 1)\n\t\twg.Wait()\n\t})\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/errorx/atomicerror.go\n```golang\npackage errorx\n\nimport \"sync/atomic\"\n\n// AtomicError defines an atomic error.\ntype AtomicError struct {\n\terr atomic.Value // error\n}\n\n// Set sets the error.\nfunc (ae *AtomicError) Set(err error) {\n\tif err != nil {\n\t\tae.err.Store(err)\n\t}\n}\n\n// Load returns the error.\nfunc (ae *AtomicError) Load() error {\n\tif v := ae.err.Load(); v != nil {\n\t\treturn v.(error)\n\t}\n\treturn nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/errorx/callchain.go\n```golang\npackage errorx\n\n// Chain runs funs one by one until an error occurred.\nfunc Chain(fns ...func() error) error {\n\tfor _, fn := range fns {\n\t\tif err := fn(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/errorx/batcherror.go\n```golang\npackage errorx\n\nimport \"bytes\"\n\ntype (\n\t// A BatchError is an error that can hold multiple errors.\n\tBatchError struct {\n\t\terrs errorArray\n\t}\n\n\terrorArray []error\n)\n\n// Add adds errs to be, nil errors are ignored.\nfunc (be *BatchError) Add(errs ...error) {\n\tfor _, err := range errs {\n\t\tif err != nil {\n\t\t\tbe.errs = append(be.errs, err)\n\t\t}\n\t}\n}\n\n// Err returns an error that represents all errors.\nfunc (be *BatchError) Err() error {\n\tswitch len(be.errs) {\n\tcase 0:\n\t\treturn nil\n\tcase 1:\n\t\treturn be.errs[0]\n\tdefault:\n\t\treturn be.errs\n\t}\n}\n\n// NotNil checks if any error inside.\nfunc (be *BatchError) NotNil() bool {\n\treturn len(be.errs) > 0\n}\n\n// Error returns a string that represents inside errors.\nfunc (ea errorArray) Error() string {\n\tvar buf bytes.Buffer\n\n\tfor i := range ea {\n\t\tif i > 0 {\n\t\t\tbuf.WriteByte('\\n')\n\t\t}\n\t\tbuf.WriteString(ea[i].Error())\n\t}\n\n\treturn buf.String()\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/errorx/wrap_test.go\n```golang\npackage errorx\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestWrap(t *testing.T) {\n\tassert.Nil(t, Wrap(nil, \"test\"))\n\tassert.Equal(t, \"foo: bar\", Wrap(errors.New(\"bar\"), \"foo\").Error())\n\n\terr := errors.New(\"foo\")\n\tassert.True(t, errors.Is(Wrap(err, \"bar\"), err))\n}\n\nfunc TestWrapf(t *testing.T) {\n\tassert.Nil(t, Wrapf(nil, \"%s\", \"test\"))\n\tassert.Equal(t, \"foo bar: quz\", Wrapf(errors.New(\"quz\"), \"foo %s\", \"bar\").Error())\n\n\terr := errors.New(\"foo\")\n\tassert.True(t, errors.Is(Wrapf(err, \"foo %s\", \"bar\"), err))\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/errorx/wrap.go\n```golang\npackage errorx\n\nimport \"fmt\"\n\n// Wrap returns an error that wraps err with given message.\nfunc Wrap(err error, message string) error {\n\tif err == nil {\n\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"%s: %w\", message, err)\n}\n\n// Wrapf returns an error that wraps err with given format and args.\nfunc Wrapf(err error, format string, args ...interface{}) error {\n\tif err == nil {\n\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"%s: %w\", fmt.Sprintf(format, args...), err)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/errorx/batcherror_test.go\n```golang\npackage errorx\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nconst (\n\terr1 = \"first error\"\n\terr2 = \"second error\"\n)\n\nfunc TestBatchErrorNil(t *testing.T) {\n\tvar batch BatchError\n\tassert.Nil(t, batch.Err())\n\tassert.False(t, batch.NotNil())\n\tbatch.Add(nil)\n\tassert.Nil(t, batch.Err())\n\tassert.False(t, batch.NotNil())\n}\n\nfunc TestBatchErrorNilFromFunc(t *testing.T) {\n\terr := func() error {\n\t\tvar be BatchError\n\t\treturn be.Err()\n\t}()\n\tassert.True(t, err == nil)\n}\n\nfunc TestBatchErrorOneError(t *testing.T) {\n\tvar batch BatchError\n\tbatch.Add(errors.New(err1))\n\tassert.NotNil(t, batch)\n\tassert.Equal(t, err1, batch.Err().Error())\n\tassert.True(t, batch.NotNil())\n}\n\nfunc TestBatchErrorWithErrors(t *testing.T) {\n\tvar batch BatchError\n\tbatch.Add(errors.New(err1))\n\tbatch.Add(errors.New(err2))\n\tassert.NotNil(t, batch)\n\tassert.Equal(t, fmt.Sprintf(\"%s\\n%s\", err1, err2), batch.Err().Error())\n\tassert.True(t, batch.NotNil())\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/matcher.go\n```golang\n// Copyright 2017 The Prometheus Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage template\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/prometheus/common/model\"\n)\n\n// MatchType is an enum for label matching types.\ntype MatchType int\n\n// Possible MatchTypes.\nconst (\n\tMatchEqual MatchType = iota\n\tMatchNotEqual\n\tMatchRegexp\n\tMatchNotRegexp\n)\n\nvar matchTypeToStr = [...]string{\n\tMatchEqual:     \"=\",\n\tMatchNotEqual:  \"!=\",\n\tMatchRegexp:    \"=~\",\n\tMatchNotRegexp: \"!~\",\n}\n\nfunc (m MatchType) String() string {\n\tif m < MatchEqual || m > MatchNotRegexp {\n\t\tm = MatchEqual\n\t}\n\treturn matchTypeToStr[m]\n}\n\n// Matcher models the matching of a label.\ntype Matcher struct {\n\tType  MatchType\n\tName  model.LabelName\n\tValue model.LabelValue\n\n\tre *FastRegexMatcher\n}\n\n// NewMatcher returns a matcher object.\nfunc NewMatcher(mt MatchType, n, v string) (*Matcher, error) {\n\tm := &Matcher{\n\t\tType:  mt,\n\t\tName:  model.LabelName(n),\n\t\tValue: model.LabelValue(v),\n\t}\n\tif mt == MatchRegexp || mt == MatchNotRegexp {\n\t\tre, err := NewFastRegexMatcher(v)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tm.re = re\n\t}\n\treturn m, nil\n}\n\nfunc (m *Matcher) String() string {\n\treturn fmt.Sprintf(\"%s%s%q\", m.Name, m.Type, m.Value)\n}\n\n// Matches returns whether the matcher matches the given string value.\nfunc (m *Matcher) Matches(s string) bool {\n\tswitch m.Type {\n\tcase MatchEqual:\n\t\treturn model.LabelValue(s) == m.Value\n\tcase MatchNotEqual:\n\t\treturn model.LabelValue(s) != m.Value\n\tcase MatchRegexp:\n\t\treturn m.re.MatchString(s)\n\tcase MatchNotRegexp:\n\t\treturn !m.re.MatchString(s)\n\tdefault:\n\t\treturn false\n\t}\n}\n\n// GetRegexString returns the regex string.\nfunc (m *Matcher) GetRegexString() string {\n\tif m.re == nil {\n\t\treturn \"\"\n\t}\n\treturn m.re.GetRegexString()\n}\n\n// MatcherPairs is a sortable slice of Matcher pointers. It implements\n// sort.Interface.\ntype MatcherPairs []*Matcher\n\nfunc (mps MatcherPairs) Len() int {\n\treturn len(mps)\n}\n\nfunc (mps MatcherPairs) Less(i, j int) bool {\n\tswitch {\n\tcase mps[i].Name > mps[j].Name:\n\t\treturn false\n\tcase mps[i].Name < mps[j].Name:\n\t\treturn true\n\tcase mps[i].Value > mps[j].Value:\n\t\treturn false\n\tcase mps[i].Value < mps[j].Value:\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\n\nfunc (mps MatcherPairs) Swap(i, j int) {\n\tmps[i], mps[j] = mps[j], mps[i]\n}\n\nfunc (mps MatcherPairs) String() string {\n\tmatcherStrings := make([]string, 0, mps.Len())\n\tfor _, m := range mps {\n\t\tmatcherStrings = append(matcherStrings, m.String())\n\t}\n\treturn strings.Join(matcherStrings, \",\")\n}\n\nfunc (mps *MatcherPairs) AddMatcher(mt MatchType, n, v string) error {\n\tm, err := NewMatcher(mt, n, v)\n\tif err != nil {\n\t\treturn err\n\t}\n\t*mps = append(*mps, m)\n\treturn nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/types.go\n```golang\npackage template\n\nimport (\n\t\"bytes\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\t\"fmt\"\n\t\"github.com/prometheus/common/model\"\n\t\"text/template\"\n)\n\ntype PromQLReq func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest\n\ntype QuerySql struct {\n\tName        string\n\tUnit        string\n\tSqlTemplate string\n\tLabels      MatcherPairs\n\tTopK        int\n\tDuration    int64\n\tBy          model.LabelNames\n}\n\nfunc (qs *QuerySql) Render() (string, error) {\n\n\tfmt.Printf(\"QuerySql: %+v\\n\", qs)\n\n\tsqlTemplate, err := template.New(qs.Name).Parse(qs.SqlTemplate)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tbuf := new(bytes.Buffer)\n\tif err = sqlTemplate.Execute(buf, qs); err != nil {\n\t\treturn \"\", err\n\t}\n\treturn buf.String(), nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/regexp.go\n```golang\n// Copyright 2020 The Prometheus Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage template\n\nimport (\n\t\"strings\"\n\n\t\"github.com/grafana/regexp\"\n\t\"github.com/grafana/regexp/syntax\"\n)\n\ntype FastRegexMatcher struct {\n\tre       *regexp.Regexp\n\tprefix   string\n\tsuffix   string\n\tcontains string\n}\n\nfunc NewFastRegexMatcher(v string) (*FastRegexMatcher, error) {\n\tre, err := regexp.Compile(\"^(?:\" + v + \")$\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tparsed, err := syntax.Parse(v, syntax.Perl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tm := &FastRegexMatcher{\n\t\tre: re,\n\t}\n\n\tif parsed.Op == syntax.OpConcat {\n\t\tm.prefix, m.suffix, m.contains = optimizeConcatRegex(parsed)\n\t}\n\n\treturn m, nil\n}\n\nfunc (m *FastRegexMatcher) MatchString(s string) bool {\n\tif m.prefix != \"\" && !strings.HasPrefix(s, m.prefix) {\n\t\treturn false\n\t}\n\tif m.suffix != \"\" && !strings.HasSuffix(s, m.suffix) {\n\t\treturn false\n\t}\n\tif m.contains != \"\" && !strings.Contains(s, m.contains) {\n\t\treturn false\n\t}\n\treturn m.re.MatchString(s)\n}\n\nfunc (m *FastRegexMatcher) GetRegexString() string {\n\treturn m.re.String()\n}\n\n// optimizeConcatRegex returns literal prefix/suffix text that can be safely\n// checked against the label value before running the regexp matcher.\nfunc optimizeConcatRegex(r *syntax.Regexp) (prefix, suffix, contains string) {\n\tsub := r.Sub\n\n\t// We can safely remove begin and end text matchers respectively\n\t// at the beginning and end of the regexp.\n\tif len(sub) > 0 && sub[0].Op == syntax.OpBeginText {\n\t\tsub = sub[1:]\n\t}\n\tif len(sub) > 0 && sub[len(sub)-1].Op == syntax.OpEndText {\n\t\tsub = sub[:len(sub)-1]\n\t}\n\n\tif len(sub) == 0 {\n\t\treturn\n\t}\n\n\t// Given Prometheus regex matchers are always anchored to the begin/end\n\t// of the text, if the first/last operations are literals, we can safely\n\t// treat them as prefix/suffix.\n\tif sub[0].Op == syntax.OpLiteral && (sub[0].Flags&syntax.FoldCase) == 0 {\n\t\tprefix = string(sub[0].Rune)\n\t}\n\tif last := len(sub) - 1; sub[last].Op == syntax.OpLiteral && (sub[last].Flags&syntax.FoldCase) == 0 {\n\t\tsuffix = string(sub[last].Rune)\n\t}\n\n\t// If contains any literal which is not a prefix/suffix, we keep the\n\t// 1st one. We do not keep the whole list of literals to simplify the\n\t// fast path.\n\tfor i := 1; i < len(sub)-1; i++ {\n\t\tif sub[i].Op == syntax.OpLiteral && (sub[i].Flags&syntax.FoldCase) == 0 {\n\t\t\tcontains = string(sub[i].Rune)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/objectstorage/template.go\n```golang\npackage objectstorage\n\nimport alarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\ntype objectStorageReqFunc func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest\n\nvar MetricMap = map[string]string{\n\tObjectPoolTotal:                   \"总量\",\n\tObjectPoolUsageRate:               \"使用率\",\n\tObjectPoolUsage:                   \"使用量\",\n\tObjectPoolCapacityInventory:       \"存储容量库存\",\n\tObjectPoolStandardStorage:         \"标准存储\",\n\tObjectPoolInfrequentAccessStorage: \"低频存储\",\n\tObjectPoolArchiveStorage:          \"归档存储\",\n\n\tObjectPoolStatusCodesReturnNumber2XX:       \"2XX\",\n\tObjectPoolStatusCodesReturnNumber4XX:       \"4XX\",\n\tObjectPoolStatusCodesReturnNumber5XX:       \"5XX\",\n\tObjectPoolStatusCodesReturnNumber3XX:       \"3XX\",\n\tObjectPoolApiRequestNumber:                 \"资源池API请求数\",\n\tObjectPoolPutRequestNumber:                 \"资源池PUT请求数\",\n\tObjectPoolGetRequestNumber:                 \"资源池GET请求数\",\n\tObjectPoolPostRequestNumber:                \"资源池POST请求数\",\n\tObjectPoolHeadRequestNumber:                \"资源池HEAD请求数\",\n\tObjectPoolDeleteRequestNumber:              \"资源池DELETE请求数\",\n\tObjectPoolOptionsRequestNumber:             \"资源池OPTIONS请求数\",\n\tObjectPoolExternalNetworkUploadBandwidth:   \"资源池内外网上传带宽\",\n\tObjectPoolExternalNetworkDownloadBandwidth: \"资源池内外网下载带宽\",\n\tObjectPoolCRRUploadBandwidth:               \"资源池CRR上传带宽\",\n\tObjectPoolCRRDownloadBandwidth:             \"资源池CRR下载带宽\",\n\tObjectPoolExternalNetworkUploadFlow:        \"资源池内外网上传流量\",\n\tObjectPoolExternalNetworkDownloadFlow:      \"资源池内外网下载流量\",\n\tObjectPoolCRRUploadFlow:                    \"资源池CRR上传流量\",\n\tObjectPoolCRRDownloadFlow:                  \"资源池CRR下载流量\",\n\n\tObjectPoolTotalCapacity:          \"总量\",\n\tObjectPoolCapacityIncrement:      \"增量\",\n\tObjectPoolCapacityDeleteQuantity: \"删除量\",\n\n\tObjectStorageVolumeTotalRequestPUT: \"PUT请求数\", //--\n\tObjectStorageVolumeTotalRequestGET: \"GET请求数\", //--\n\t//ObjectStorageVolumeSpaceCapacity:         \"空间容量\",\n\tObjectStorageVolumeAbnormalReturnRanking: \"存储空间异常返回排名\", //--\n\tObjectStorageVolumeWriteSuccessRateCount: \"写入成功率\",\n\tObjectStorageVolumeReadSuccessRateCount:  \"读取成功率\",\n\n\tObjectStorageVolumeStorageCurrentTotal:     \"存储当前总量\",\n\tObjectStorageVolumeDownloads30day:          \"30天下载量\",\n\tObjectStorageVolumeFileSum:                 \"Object总量\",\n\tObjectStorageVolumeApiRequest30day:         \"30天API请求数\",\n\tObjectVolumeCapacityTotal:                  \"存储空间容量\",\n\tObjectVolumeCapacityIncrement:              \"存储容量增量\",\n\tObjectVolumeCapacityDeleteQuantity:         \"存储容量删除数量\",\n\tObjectVolumePublicNetworkUploadFlow:        \"内外网流入\",     // --\n\tObjectVolumePublicNetworkDownloadFlow:      \"内外网流出\",     // --\n\tObjectVolumeCRRUploadFlow:                  \"CRR流入\",        // --\n\tObjectVolumeCRRDownloadFlow:                \"CRR流出\",        // --\n\tObjectVolumePublicNetworkUploadBandwidth:   \"内外网上传带宽\", // --\n\tObjectVolumePublicNetworkDownloadBandwidth: \"内外网下载带宽\", // --\n\tObjectVolumeCRRUploadBandwidth:             \"CRR上传带宽\",    // --\n\tObjectVolumeCRRDownloadBandwidth:           \"CRR下载带宽\",    // --\n\tObjectVolumeGetRequestSum:                  \"GET请求数\",      // --\n\tObjectVolumePutRequestSum:                  \"PUT请求数\",      // --\n\tObjectVolumePostRequestSum:                 \"POST请求数\",     // --\n\tObjectVolumeHeadRequestSum:                 \"HEAD请求数\",     // --\n\tObjectVolumeDeleteRequestSum:               \"DELETE请求数\",   // --\n\tObjectVolumeOptionsRequestSum:              \"OPTIONS请求数\",  // --\n\tObjectVolume2xxRequestSum:                  \"状态码:2xx\",     // --\n\tObjectVolume3xxRequestSum:                  \"状态码:3xx\",     // --\n\tObjectVolume4xxRequestSum:                  \"状态码:4xx\",     // --\n\tObjectVolume5xxRequestSum:                  \"状态码:5xx\",     // --\n\tObjectVolumeWriteSuccessRate:               \"写成功率\",       // --\n\tObjectVolumeReadSuccessRate:                \"读成功率\",       // --\n\n\tObjectVolumePutDelay: \"PUT延时\",\n\tObjectVolumeGetDelay: \"GET延时\",\n\n\tObjectStorageVolumeTotalInflowPublicNetwork:               \"总流入流量\",\n\tObjectStorageVolumeTotalOutflowPublicNetwork:              \"总流出流量\",\n\tObjectStorageVolumeBucketCount:                            \"存储空间(Bucket)数量\",\n\tObjectStorageResourcePoolCrrDownloadFlowCount:             \"CRR总下载流量\",\n\tObjectStorageResourcePoolCrrUploadFlowCount:               \"CRR总上传流量\",\n\tObjectStorageResourcePoolExternalNetworkDownloadFlowCount: \"内外网下载流量\",\n\tObjectStorageResourcePoolExternalNetworkUploadFlowCount:   \"内外网上传流量\",\n\tObjectStorageVolumeTotalRequestPutCount:                   \"PUT请求\",\n\tObjectStorageVolumeTotalRequestGetCount:                   \"GET请求\",\n\tObjectStorageResourcePoolApiRequestNumberCount:            \"总体API请求\",\n\n\tObjectStorageResourcePoolPutRequestNumberCount:     \"PUT请求\",\n\tObjectStorageResourcePoolGetRequestNumberCount:     \"GET请求\",\n\tObjectStorageResourcePoolPostRequestNumberCount:    \"POST请求\",\n\tObjectStorageResourcePoolHeadRequestNumberCount:    \"HEAD请求\",\n\tObjectStorageResourcePoolDeleteRequestNumberCount:  \"DELETE请求\",\n\tObjectStorageResourcePoolOptionsRequestNumberCount: \"OPTIONS请求\",\n\n\tObjectStorageResourcePoolExternalNetworkUploadBandwidthCount:   \"object_storage_resource_pool_external_network_upload_bandwidth_count\",   // 内外网上传带宽（sum()）// --\n\tObjectStorageResourcePoolExternalNetworkDownloadBandwidthCount: \"object_storage_resource_pool_external_network_download_bandwidth_count\", // 内外网下载带宽（sum()）// --\n\tObjectStorageResourcePoolCrrUploadBandwidthCount:               \"object_storage_resource_pool_crr_upload_bandwidth_count\",                // CRR上传带宽（sum()）// --\n\tObjectStorageResourcePoolCrrDownloadBandwidthCount:             \"object_storage_resource_pool_crr_download_bandwidth_count\",              // CRR下载带宽（sum()）// --\n\n}\n\nvar MetricTopMap = map[string]string{}\n\nconst (\n\t// 资源池对象存储-概览\n\tObjectPoolTotal                   = \"object_storage_resource_pool_total\"                     // 对象存储资源池总量--总数\n\tObjectPoolUsageRate               = \"object_storage_resource_pool_usage_rate\"                // 对象存储资源池使用率--总数\n\tObjectPoolUsage                   = \"object_storage_resource_pool_usage\"                     // 对象存储资源池使用量--计算\n\tObjectPoolCapacityInventory       = \"object_storage_resource_pool_capacity_inventory\"        // 对象存储资源池容量库存--总数\n\tObjectPoolStandardStorage         = \"object_storage_resource_pool_standard_storage\"          // 对象存储资源池标准存储--总数\n\tObjectPoolInfrequentAccessStorage = \"object_storage_resource_pool_infrequent_access_storage\" // 对象存储资源池低频存储--总数\n\tObjectPoolArchiveStorage          = \"object_storage_resource_pool_archive_storage\"           // 对象存储资源池归档存储--总数\n\n\tObjectPoolStatusCodesReturnNumber2XX       = \"object_storage_resource_pool_status_codes_return_number_2xx_count\" // 对象存储资源池状态码返回数2XX--总数（sum ObjectVolume2xxRequestSum）\n\tObjectPoolStatusCodesReturnNumber4XX       = \"object_storage_resource_pool_status_codes_return_number_4xx_count\" // 对象存储资源池状态码返回数4XX-总数（sum ObjectVolume4xxRequestSum）\n\tObjectPoolStatusCodesReturnNumber5XX       = \"object_storage_resource_pool_status_codes_return_number_5xx_count\" // 对象存储资源池状态码返回数5XX-总数（sum ObjectVolume5xxRequestSum）\n\tObjectPoolStatusCodesReturnNumber3XX       = \"object_storage_resource_pool_status_codes_return_number_3xx_count\" // 对象存储资源池状态码返回数3XX-总数（sum ObjectVolume3xxRequestSum）\n\tObjectPoolApiRequestNumber                 = \"object_storage_resource_pool_api_request_number\"                   // 对象存储资源池API请求数--总数（sum ObjectVolumeApiRequest30day）\n\tObjectPoolPutRequestNumber                 = \"object_storage_resource_pool_put_request_number\"                   // 对象存储资源池PUT请求数（sum ...）\n\tObjectPoolGetRequestNumber                 = \"object_storage_resource_pool_get_request_number\"                   // 对象存储资源池GET请求数（sum ...）\n\tObjectPoolPostRequestNumber                = \"object_storage_resource_pool_post_request_number\"                  // 对象存储资源池POST请求数（sum ...）\n\tObjectPoolHeadRequestNumber                = \"object_storage_resource_pool_head_request_number\"                  // 对象存储资源池HEAD请求数（sum ...）\n\tObjectPoolDeleteRequestNumber              = \"object_storage_resource_pool_delete_request_number\"                // 对象存储资源池DELETE请求数（sum ...）\n\tObjectPoolOptionsRequestNumber             = \"object_storage_resource_pool_options_request_number\"               // 对象存储资源池OPTIONS请求数（sum ...）\n\tObjectPoolExternalNetworkUploadBandwidth   = \"object_storage_resource_pool_external_network_upload_bandwidth\"    // 对象存储资源池内外网上传带宽（sum ...）\n\tObjectPoolExternalNetworkDownloadBandwidth = \"object_storage_resource_pool_external_network_download_bandwidth\"  // 对象存储资源池内外网下载带宽（sum ...）\n\tObjectPoolCRRUploadBandwidth               = \"object_storage_resource_pool_crr_upload_bandwidth\"                 // 对象存储资源池CRR上传带宽（sum ...）\n\tObjectPoolCRRDownloadBandwidth             = \"object_storage_resource_pool_crr_download_bandwidth\"               // 对象存储资源池CRR下载带宽（sum ...）\n\tObjectPoolExternalNetworkUploadFlow        = \"object_storage_resource_pool_external_network_upload_flow\"         // 对象存储资源池内外网上传流量（sum ...）\n\tObjectPoolExternalNetworkDownloadFlow      = \"object_storage_resource_pool_external_network_download_flow\"       // 对象存储资源池内外网下载流量（sum ...）\n\tObjectPoolCRRUploadFlow                    = \"object_storage_resource_pool_crr_upload_flow\"                      // 对象存储资源池CRR上传流量（sum ...）\n\tObjectPoolCRRDownloadFlow                  = \"object_storage_resource_pool_crr_download_flow\"                    // 对象存储资源池CRR下载流量（sum ...）\n\n\t// 资源池对象存储-详情\n\tObjectPoolTotalCapacity          = \"object_storage_resource_pool_total_capacity\"           // 对象存储资源池总容量 - 未采集（sum ObjectVolumeCapacityTotal）// --\n\tObjectPoolCapacityIncrement      = \"object_storage_resource_pool_capacity_increment\"       // 对象存储资源池容量增量 - 未采集（sum ObjectVolumeCapacityIncrement）// --\n\tObjectPoolCapacityDeleteQuantity = \"object_storage_resource_pool_capacity_delete_quantity\" // 对象存储资源池容量删除数量 - 未采集（sum ObjectVolumeCapacityDeleteQuantity）// --\n\n\t// 云产品对象存储-概览\n\tObjectStorageVolumeTotalInflowPublicNetwork  = \"object_storage_volume_total_inflow_public_network_count\"  // 对象存储云产品公网总流入-内外网--未采集（sum ObjectVolumePublicNetworkUploadFlow）//--\n\tObjectStorageVolumeTotalOutflowPublicNetwork = \"object_storage_volume_total_outflow_public_network_count\" // 对象存储云产品公网总流出-内外网--未采集（sum ObjectVolumePublicNetworkDownloadFlow）//--\n\n\tObjectStorageVolumeBucketCount = \"object_storage_volume_bucket_count\" // 对象存储云产品bucket数量--总数 //--\n\n\tObjectStorageVolumeTotalRequestPUT = \"object_storage_volume_total_request_put\" // 对象存储云产品总PUT请求数--单个 //--\n\tObjectStorageVolumeTotalRequestGET = \"object_storage_volume_total_request_get\" // 对象存储云产品总GET请求数--单个 //--\n\n\t//ObjectStorageVolumeSpaceCapacity         = \"object_storage_volume_space_capacity\"          // 对象存储云产品空间总容量--单个（sum ObjectVolumeCapacityTotal）\n\tObjectStorageVolumeAbnormalReturnRanking = \"object_storage_volume_abnormal_return_ranking\" // 对象存储云产品异常返回排名--单个（sum ObjectStorageVolumeAbnormalReturnRanking）// --\n\n\tObjectStorageVolumeWriteSuccessRateCount = \"object_storage_volume_write_success_rate_count\" // 对象存储云产品写入成功率--单个（sum ObjectVolumeWriteSuccessRate）\n\tObjectStorageVolumeReadSuccessRateCount  = \"object_storage_volume_read_success_rate_count\"  // 对象存储云产品读取成功率--单个（sum ObjectVolumeReadSuccessRate）\n\n\t// 云产品对象存储-详情\n\tObjectStorageVolumeStorageCurrentTotal     = \"object_storage_volume_storage_current_total\"             // 对象存储云产品存储当前总量\n\tObjectStorageVolumeDownloads30day          = \"object_storage_volume_downloads_30day\"                   // 对象存储云产品30天下载量 // --\n\tObjectStorageVolumeApiRequest30day         = \"object_storage_volume_api_request_30day\"                 // 对象存储云产品30天API请求数 // --\n\tObjectVolumeCapacityTotal                  = \"object_storage_volume_capacity_total\"                    // 对象卷单个容量总量 // --\n\tObjectVolumeCapacityIncrement              = \"object_storage_volume_capacity_increment\"                // 对象卷单个容量增量 // --\n\tObjectVolumeCapacityDeleteQuantity         = \"object_storage_volume_capacity_delete_quantity\"          // 对象卷单个容量删除数量 // --\n\tObjectVolumePublicNetworkUploadFlow        = \"object_storage_volume_public_network_upload_flow\"        // 对象卷外网上传流量-内外网 //--\n\tObjectVolumePublicNetworkDownloadFlow      = \"object_storage_volume_public_network_download_flow\"      // 对象卷外网下载流量-内外网 //--\n\tObjectVolumeCRRUploadFlow                  = \"object_storage_volume_crr_upload_flow\"                   // 对象卷CRR上传流量 //--\n\tObjectVolumeCRRDownloadFlow                = \"object_storage_volume_crr_download_flow\"                 // 对象卷CRR下载流量 //--\n\tObjectVolumePublicNetworkUploadBandwidth   = \"object_storage_volume_public_network_upload_bandwidth\"   // 对象卷外网上传带宽-内外网 //--\n\tObjectVolumePublicNetworkDownloadBandwidth = \"object_storage_volume_public_network_download_bandwidth\" // 对象卷外网下载带宽-内外网 //--\n\tObjectVolumeCRRUploadBandwidth             = \"object_storage_volume_crr_upload_bandwidth\"              // 对象卷CRR上传带宽 //--\n\tObjectVolumeCRRDownloadBandwidth           = \"object_storage_volume_crr_download_bandwidth\"            // 对象卷CRR下载带宽 //--\n\tObjectVolumeGetRequestSum                  = \"object_storage_volume_get_request_sum\"                   // 对象卷GET请求数 // --\n\tObjectVolumePutRequestSum                  = \"object_storage_volume_put_request_sum\"                   // 对象卷PUT请求数 // --\n\tObjectVolumePostRequestSum                 = \"object_storage_volume_post_request_sum\"                  // 对象卷POST请求数 // --\n\tObjectVolumeHeadRequestSum                 = \"object_storage_volume_head_request_sum\"                  // 对象卷HEAD请求数 // --\n\tObjectVolumeDeleteRequestSum               = \"object_storage_volume_delete_request_sum\"                // 对象卷DELETE请求数 // --\n\tObjectVolumeOptionsRequestSum              = \"object_storage_volume_options_request_sum\"               // 对象卷OPTIONS请求数 // --\n\tObjectVolume2xxRequestSum                  = \"object_storage_volume_2xx_request_sum\"                   // 对象卷2xx请求数 // --\n\tObjectVolume3xxRequestSum                  = \"object_storage_volume_3xx_request_sum\"                   // 对象卷3xx请求数 // --\n\tObjectVolume4xxRequestSum                  = \"object_storage_volume_4xx_request_sum\"                   // 对象卷4xx请求数 // --\n\tObjectVolume5xxRequestSum                  = \"object_storage_volume_5xx_request_sum\"                   // 对象卷5xx请求数 // --\n\tObjectVolumeWriteSuccessRate               = \"object_storage_volume_write_success_rate\"                // 对象卷写入成功率 //--\n\tObjectVolumeReadSuccessRate                = \"object_storage_volume_read_success_rate\"                 // 对象卷读取成功率 //--\n\n\tObjectVolumePutDelay = \"object_volume_put_delay\" // 对象卷PUT延时 - 未定义\n\tObjectVolumeGetDelay = \"object_volume_get_delay\" // 对象卷GET延时 - 未定义\n\n\tObjectStorageResourcePoolCrrDownloadFlowCount             = \"object_storage_resource_pool_crr_download_flow_count\"              // 对象存储CRR总下载流量 // --\n\tObjectStorageResourcePoolCrrUploadFlowCount               = \"object_storage_resource_pool_crr_upload_flow_count\"                // 对象存储CRR总上传流量 // --\n\tObjectStorageResourcePoolExternalNetworkDownloadFlowCount = \"object_storage_resource_pool_external_network_download_flow_count\" // 对象存储外网总下载流量 // --\n\tObjectStorageResourcePoolExternalNetworkUploadFlowCount   = \"object_storage_resource_pool_external_network_upload_flow_count\"   // 对象存储外网总上传流量 // --\n\tObjectStorageVolumeTotalRequestPutCount                   = \"object_storage_volume_total_request_put_count\"                     // 对象存储云产品总PUT请求数--总数（sum ObjectStorageVolumeTotalRequestPUT）// --\n\tObjectStorageVolumeTotalRequestGetCount                   = \"object_storage_volume_total_request_get_count\"                     // 对象存储云产品总GET请求数--总数（sum ObjectStorageVolumeTotalRequestGET）// --\n\tObjectStorageResourcePoolApiRequestNumberCount            = \"object_storage_resource_pool_api_request_number_count\"             // 对象存储API请求数（sum()）// --\n\n\tObjectStorageResourcePoolPutRequestNumberCount     = \"object_storage_resource_pool_put_request_number_count\"     // 对象存储PUT总请求数（sum()）// --\n\tObjectStorageResourcePoolGetRequestNumberCount     = \"object_storage_resource_pool_get_request_number_count\"     // 对象存储GET总请求数（sum()）// --\n\tObjectStorageResourcePoolPostRequestNumberCount    = \"object_storage_resource_pool_post_request_number_count\"    // 对象存储POST总请求数（sum()）// --\n\tObjectStorageResourcePoolHeadRequestNumberCount    = \"object_storage_resource_pool_head_request_number_count\"    // 对象存储HEAD总请求数（sum()）// --\n\tObjectStorageResourcePoolDeleteRequestNumberCount  = \"object_storage_resource_pool_delete_request_number_count\"  // 对象存储DELETE总请求数（sum()）// --\n\tObjectStorageResourcePoolOptionsRequestNumberCount = \"object_storage_resource_pool_options_request_number_count\" // 对象存储OPTIONS总请求数（sum()）// --\n\n\tObjectStorageResourcePoolExternalNetworkUploadBandwidthCount   = \"object_storage_resource_pool_external_network_upload_bandwidth_count\"   // 对象存储外网总上传带宽（sum()）// --\n\tObjectStorageResourcePoolExternalNetworkDownloadBandwidthCount = \"object_storage_resource_pool_external_network_download_bandwidth_count\" // 对象存储外网总下载带宽（sum()）// --\n\tObjectStorageResourcePoolCrrUploadBandwidthCount               = \"object_storage_resource_pool_crr_upload_bandwidth_count\"                // 对象存储CRR总上传带宽（sum()）// --\n\tObjectStorageResourcePoolCrrDownloadBandwidthCount             = \"object_storage_resource_pool_crr_download_bandwidth_count\"              // 对象存储CRR总下载带宽（sum()）// --\n\n\tObjectStorageVolumeFileSum = \"object_storage_volume_file_sum\" // Object总量（文件数）// --\n\n)\n\nvar TemplateMap = map[string]objectStorageReqFunc{\n\t// 资源池概览\n\tObjectPoolTotal: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_total\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolUsageRate: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_usage_rate\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolCapacityInventory: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_capacity_inventory\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolStandardStorage: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_standard_storage\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolInfrequentAccessStorage: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_infrequent_access_storage\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolArchiveStorage: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_archive_storage\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolPutRequestNumberCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_put_request_number_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolGetRequestNumberCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_get_request_number_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolPostRequestNumberCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_post_request_number_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolHeadRequestNumberCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_head_request_number_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolDeleteRequestNumberCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_delete_request_number_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolOptionsRequestNumberCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_options_request_number_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolExternalNetworkUploadBandwidthCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_external_network_upload_bandwidth_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolExternalNetworkDownloadBandwidthCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_external_network_download_bandwidth_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolCrrUploadBandwidthCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_crr_upload_bandwidth_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolCrrDownloadBandwidthCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_crr_download_bandwidth_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\n\tObjectPoolTotalCapacity: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_total_capacity\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolCapacityIncrement: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_capacity_increment\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolCapacityDeleteQuantity: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_capacity_delete_quantity\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageVolumeFileSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_file_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageVolumeApiRequest30day: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_api_request_30day\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageVolumeStorageCurrentTotal: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_storage_current_total\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\n\n\t// 云产品\n\t// 监控项\n\tObjectStorageVolumeTotalInflowPublicNetwork: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_total_inflow_public_network_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageVolumeTotalOutflowPublicNetwork: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_total_outflow_public_network_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageVolumeTotalRequestGetCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_total_request_get_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageVolumeTotalRequestPutCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_total_request_put_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolApiRequestNumberCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_api_request_number_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\n\tObjectStorageResourcePoolExternalNetworkUploadFlowCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_external_network_upload_flow_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolExternalNetworkDownloadFlowCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_external_network_download_flow_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolCrrUploadFlowCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_crr_upload_flow_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageResourcePoolCrrDownloadFlowCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_crr_download_flow_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageVolumeBucketCount: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_bucket_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\n\t// TOP\n\tObjectStorageVolumeTotalRequestPUT: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_total_request_put\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectStorageVolumeTotalRequestGET: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_total_request_get\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolumePublicNetworkUploadBandwidth: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_public_network_upload_bandwidth\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_public_network_upload_bandwidth\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectVolumePublicNetworkDownloadBandwidth: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_public_network_download_bandwidth\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_public_network_download_bandwidth\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectVolumeCRRUploadBandwidth: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_crr_upload_bandwidth\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_crr_upload_bandwidth\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectVolumeCRRDownloadBandwidth: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_crr_download_bandwidth\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_crr_download_bandwidth\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectVolumePublicNetworkUploadFlow: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_public_network_upload_flow\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_public_network_upload_flow\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectVolumePublicNetworkDownloadFlow: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_public_network_download_flow\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_public_network_download_flow\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectVolumeCRRUploadFlow: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_crr_upload_flow\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_crr_upload_flow\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectVolumeCRRDownloadFlow: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_crr_download_flow\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_crr_download_flow\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectVolumeCapacityTotal: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_capacity_total\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_capacity_total\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectStorageVolumeAbnormalReturnRanking: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_abnormal_return_ranking\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolumeWriteSuccessRate: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_write_success_rate\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_write_success_rate\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectVolumeReadSuccessRate: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_read_success_rate\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_read_success_rate\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectStorageVolumeDownloads30day: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_downloads_30day\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\n\t// 详情\n\tObjectVolumeCapacityIncrement: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_capacity_increment\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_capacity_increment\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t},\n\tObjectVolumeCapacityDeleteQuantity: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\tif bucketID == \"\" {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_capacity_delete_quantity\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\t\tName:            \"object_storage_volume_capacity_delete_quantity\",\n\t\t\t\tResourceSubType: \"ks3\",\n\t\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\t\tOperation: \"=\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tObjectVolumeGetRequestSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_get_request_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolumePutRequestSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_put_request_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolumePostRequestSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_post_request_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolumeHeadRequestSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_head_request_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolumeDeleteRequestSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_delete_request_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolumeOptionsRequestSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_options_request_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolume2xxRequestSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_2xx_request_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolume3xxRequestSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_3xx_request_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolume4xxRequestSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_4xx_request_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectVolume5xxRequestSum: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_volume_5xx_request_sum\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"bucket_id\",\n\t\t\t\t\tValue:     bucketID,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolStatusCodesReturnNumber2XX: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_status_codes_return_number_2xx_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolStatusCodesReturnNumber3XX: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_status_codes_return_number_3xx_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolStatusCodesReturnNumber4XX: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_status_codes_return_number_4xx_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tObjectPoolStatusCodesReturnNumber5XX: func(region, bucketID, resourcePool, resourcePoolType, name string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"object_storage_resource_pool_status_codes_return_number_5xx_count\",\n\t\t\tResourceSubType: \"ks3\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/objectstorage/object_template.go\n```golang\npackage objectstorage\n\nfunc GetPredictObjectCapacity(resourcePoolType, t, tt string) string {\n\tpsql := `avg without (pod, instance) (predict_linear(object_storage_resource_pool_capacity_inventory{resource_pool = \"` + resourcePoolType + `\"}[` + t + `],` + tt + `))`\n\treturn psql\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/blockstorage/template.go\n```golang\npackage blockstorage\n\nimport alarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\ntype blockStorageReqFunc func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest\n\nconst (\n\tEbsCapacity             = \"storage_resource_pool_capacity\"\n\tEbsCapTotal             = \"storage_resource_pool_total\"\n\tEbsCapUsed              = \"storage_resource_pool_usage\"\n\tEbsCapRate              = \"storage_resource_pool_use_rate\"\n\tCloudDiskCount          = \"cloud_disk_count\"\n\tCloudDiskUnMountPercent = \"cloud_disk_unmount_percent\"\n\tEbsIOReadQps            = \"storage_resource_pool_io_read_qps\"\n\tEbsIOWriteQps           = \"storage_resource_pool_io_write_qps\"\n\tEbsIOReadDelay          = \"storage_resource_pool_io_read_delay\"\n\tEbsIOWriteDelay         = \"storage_resource_pool_io_write_delay\"\n\tEbsIOReadBand           = \"storage_resource_pool_io_read_band\"\n\tEbsIOWriteBand          = \"storage_resource_pool_io_write_band\"\n)\n\nvar MetricMap = map[string]string{\n\tEbsCapacity:             \"存储容量库存\",\n\tCloudDiskCount:          \"块存储总数\",\n\tEbsCapTotal:             \"总量\",\n\tEbsCapRate:              \"用量趋势\",\n\tCloudDiskUnMountPercent: \"待挂载块存储占比\",\n\tEbsIOReadQps:            \"读\",\n\tEbsIOWriteQps:           \"写\",\n\tEbsIOReadDelay:          \"读延时\",\n\tEbsIOWriteDelay:         \"写延时\",\n\tEbsIOReadBand:           \"读带宽\",\n\tEbsIOWriteBand:          \"写带宽\",\n}\n\nvar TemplateMap = map[string]blockStorageReqFunc{\n\tEbsCapacity: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"storage_resource_pool_capacity\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     poolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tEbsCapTotal: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"storage_resource_pool_total\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tEbsCapUsed: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"storage_resource_pool_usage\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tEbsCapRate: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"storage_resource_pool_use_rate\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCloudDiskCount: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"cloud_disk_count\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     poolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCloudDiskUnMountPercent: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"cloud_disk_unmount_percent\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     poolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tEbsIOReadQps: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"storage_resource_pool_io_read_qps\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"lubanResourceName\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resourcePool\",\n\t\t\t\t\tValue:     poolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tEbsIOWriteQps: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"storage_resource_pool_io_write_qps\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resourcePoolName\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resourcePool\",\n\t\t\t\t\tValue:     poolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tEbsIOReadDelay: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"storage_resource_pool_io_read_delay\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"lubanResourceName\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resourcePool\",\n\t\t\t\t\tValue:     poolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tEbsIOWriteDelay: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"storage_resource_pool_io_write_delay\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"lubanResourceName\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resourcePool\",\n\t\t\t\t\tValue:     poolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tEbsIOReadBand: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"storage_resource_pool_io_read_band\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"lubanResourceName\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resourcePool\",\n\t\t\t\t\tValue:     poolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tEbsIOWriteBand: func(region, az, poolName, poolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"storage_resource_pool_io_write_band\",\n\t\t\tResourceSubType: \"ebs\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"lubanResourceName\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resourcePool\",\n\t\t\t\t\tValue:     poolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/blockstorage/native_template.go\n```golang\npackage blockstorage\n\nfunc GetPredictEbsCapacity(resourcePoolType, t, tt string) string {\n\tpsql := `avg without (pod, instance) (predict_linear(storage_resource_pool_capacity{resource_pool = \"` + resourcePoolType + `\"}[` + t + `],` + tt + `))`\n\treturn psql\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/network/native_template.go\n```golang\npackage network\n\nimport (\n\ttemplate \"ezone.ksyun.com/ezone/luban/monitor/common/promql_template\"\n\t\"strings\"\n)\n\nconst (\n\tSlbConns                   = \"slbConns\"\n\tSlbTrafficIn               = \"slbTrafficIn\"\n\tSlbTrafficOut              = \"slbTrafficOut\"\n\tTengineSlbConns            = \"tengineSlbConns\"\n\tTengineSlbTrafficIn        = \"tengineSlbTrafficIn\"\n\tTengineSlbTrafficOut       = \"tengineSlbTrafficOut\"\n\tEipTrafficIn               = \"eipTrafficIn\"\n\tEipTrafficOut              = \"eipTrafficOut\"\n\tNatTrafficIn               = \"natTrafficIn\"\n\tNatTrafficOut              = \"natTrafficOut\"\n\tTgwLpeerBytesIn            = \"tgwLpeerBytesIn\"\n\tTgwLpeerBytesOut           = \"tgwLpeerBytesOut\"\n\tTgwDcytesIn                = \"tgwDcytesIn\"\n\tTgwDcBytesOut              = \"tgwDcBytesOut\"\n\tTgwVpnBytesIn              = \"tgwVpnBytesIn\"\n\tTgwVpnBytesOut             = \"tgwVpnBytesOut\"\n\tSgwPublicDropPacketRateIn  = \"sgwPublicDropPacketRateIn\"\n\tSgwPublicDropPacketRateOut = \"sgwPublicDropPacketRateOut\"\n\tSgwPublicEipTrafficIn      = \"sgwPublicEipTrafficIn\"\n\tSgwPublicEipTrafficOut     = \"sgwPublicEipTrafficOut\"\n)\n\nvar NativeTemplateMap = map[string]template.QuerySql{\n\tSlbConns: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(xgw_lb_curr_local_conns{ {{.Labels}} }[10m]))`,\n\t\tName:        \"SLB连接数\",\n\t\tUnit:        \"个\",\n\t},\n\tSlbTrafficIn: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(xgw_lb_in_traffic{ {{.Labels}} }[10m]))`,\n\t\tName:        \"SLB入口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tSlbTrafficOut: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(xgw_lb_out_traffic{ {{.Labels}} }[10m]))`,\n\t\tName:        \"SLB出口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tTengineSlbConns: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(tengine_conn_total{ {{.Labels}} }[10m]))`,\n\t\tName:        \"Tengine连接数\",\n\t\tUnit:        \"个\",\n\t},\n\tTengineSlbTrafficIn: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(tengine_traffic_in{ {{.Labels}} }[10m]))`,\n\t\tName:        \"Tengine入口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tTengineSlbTrafficOut: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(tengine_traffic_out{ {{.Labels}} }[10m]))`,\n\t\tName:        \"Tengine出口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tEipTrafficIn: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(xgw_eip_in_traffic{ {{.Labels}} }[10m]))`,\n\t\tName:        \"EIP入口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tEipTrafficOut: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(xgw_eip_out_traffic{ {{.Labels}} }[10m]))`,\n\t\tName:        \"EIP出口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tNatTrafficIn: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(nat_traffic_in{ {{.Labels}} }[{{.Duration}}s]))`,\n\t\tName:        \"NAT入口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tNatTrafficOut: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(nat_traffic_out{ {{.Labels}} }[{{.Duration}}s]))`,\n\t\tName:        \"NAT出口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tTgwLpeerBytesIn: {\n\t\tSqlTemplate: `topK({{.TopK}},sum(avg_over_time(tgw_bytes_in{ {{.Labels}} ,tgwtype = \"lpeer\"}[10m]))by(vni, domain,dip, tgwtype))`,\n\t\tName:        \"TGW Lpeer入口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tTgwLpeerBytesOut: {\n\t\tSqlTemplate: `topK({{.TopK}},sum(avg_over_time(tgw_bytes_out{ {{.Labels}} ,tgwtype = \"lpeer\"}[10m]))by(vni, domain,dip, tgwtype))`,\n\t\tName:        \"TGW Lpeer出口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tTgwDcytesIn: {\n\t\tSqlTemplate: `topK({{.TopK}},sum(avg_over_time(tgw_bytes_in{ {{.Labels}} ,tgwtype = \"DC\"}[10m]))by(vni, domain,dip, tgwtype))`,\n\t\tName:        \"TGW DC入口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tTgwDcBytesOut: {\n\t\tSqlTemplate: `topK({{.TopK}},sum(avg_over_time(tgw_bytes_out{ {{.Labels}} ,tgwtype = \"DC\"}[10m]))by(vni, domain,dip, tgwtype))`,\n\t\tName:        \"TGW DC出口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tTgwVpnBytesIn: {\n\t\tSqlTemplate: `topK({{.TopK}},sum(avg_over_time(tgw_bytes_in{ {{.Labels}} ,tgwtype = \"vpn\"}[10m]))by(vni, domain,dip, tgwtype))`,\n\t\tName:        \"TGW VPN入口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tTgwVpnBytesOut: {\n\t\tSqlTemplate: `topK({{.TopK}},sum(avg_over_time(tgw_bytes_out{ {{.Labels}} ,tgwtype = \"vpn\"}[10m]))by(vni, domain,dip, tgwtype))`,\n\t\tName:        \"TGW VPN出口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tSgwPublicDropPacketRateIn: {\n\t\tSqlTemplate: `topK({{.TopK}},rate(sgw_eip_in_drop_packet{ {{.Labels}} }[10m]))`,\n\t\tName:        \"SGW公网入口丢包率\",\n\t\tUnit:        \"%\",\n\t},\n\tSgwPublicDropPacketRateOut: {\n\t\tSqlTemplate: `topK({{.TopK}},rate(sgw_eip_out_drop_packet{ {{.Labels}} }[10m]))`,\n\t\tName:        \"SGW公网出口丢包率\",\n\t\tUnit:        \"%\",\n\t},\n\tSgwPublicEipTrafficIn: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(sgw_eip_in_traffic{ {{.Labels}} }[10m]))`,\n\t\tName:        \"SGW公网EIP入口流量\",\n\t\tUnit:        \"B\",\n\t},\n\tSgwPublicEipTrafficOut: {\n\t\tSqlTemplate: `topK({{.TopK}},avg_over_time(sgw_eip_out_traffic{ {{.Labels}} }[10m]))`,\n\t\tName:        \"SGW公网EIP出口流量\",\n\t\tUnit:        \"B\",\n\t},\n}\n\n// XGW-LB 总活动连接数预测\nfunc GetPredictNodeNetstatTcpCurrEstabSum(ipList []string, t, tt string) string {\n\tstr := strings.Join(ipList, \"|\")\n\tpsql := `predict_linear(sum(node_netstat_Tcp_CurrEstab{instance =~ \"` + str + `\"})[` + t + `:],` + tt + `)`\n\treturn psql\n}\n\n// XGW-LB 节点活动连接数预测\nfunc GetPredictNodeNetstatTcpCurrEstab(ip string, t, tt string) string {\n\tpsql := `predict_linear(node_netstat_Tcp_CurrEstab{instance = \"` + ip + `\"}[` + t + `],` + tt + `)`\n\treturn psql\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/server/multiple_keys_template.go\n```golang\npackage server\n\nimport (\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\ttemplate \"ezone.ksyun.com/ezone/luban/monitor/common/promql_template\"\n)\n\nconst (\n\tIpmiSensorState            = \"ipmi_sensor_state\"\n\tNetworkReceiveBytes        = \"network_receive_bytes\"\n\tNetworkTransmitBytes       = \"network_transmit_bytes\"\n\tNetworkReceiveErrs         = \"network_receive_errs_\"\n\tNetworkTransmitErrs        = \"network_transmit_errs\"\n\tNetworkReceiveDrop         = \"network_receive_drop\"\n\tNetworkTransmitDrop        = \"network_transmit_drop\"\n\tSwitchInterfaceOutDropRate = \"switch_interface_out_drop_rate\"\n\tSwitchInterfaceInDropRate  = \"switch_interface_in_drop_rate\"\n\tSwitchInFlow               = \"switch_in_flow\"\n\tSwitchOutFlow              = \"switch_out_flow\"\n\tSwitchInPacketRate         = \"switch_in_packet_rate\"\n\tSwitchOutPacketRate        = \"switch_out_packet_rate\"\n)\n\nvar MultipleKeysTemplateMap = map[string]template.PromQLReq{\n\tIpmiSensorState: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"ipmi_sensor_state\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tNetworkReceiveBytes: func(Labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"network_receive_bytes\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels:          Labels,\n\t\t}\n\t},\n\tNetworkTransmitBytes: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"network_transmit_bytes\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tNetworkReceiveErrs: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"network_receive_errs\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tNetworkTransmitErrs: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"network_transmit_errs\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tNetworkReceiveDrop: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"network_receive_drop\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tNetworkTransmitDrop: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"network_transmit_drop\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tSwitchInterfaceOutDropRate: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"switch_interface_out_drop_rate\",\n\t\t\tResourceSubType: \"physicalSwitch\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tSwitchInterfaceInDropRate: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"switch_interface_in_drop_rate\",\n\t\t\tResourceSubType: \"physicalSwitch\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tSwitchInFlow: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"switch_in_flow\",\n\t\t\tResourceSubType: \"physicalSwitch\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tSwitchOutFlow: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"switch_out_flow\",\n\t\t\tResourceSubType: \"physicalSwitch\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tSwitchInPacketRate: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"switch_in_packet_rate\",\n\t\t\tResourceSubType: \"physicalSwitch\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n\tSwitchOutPacketRate: func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"switch_out_packet_rate\",\n\t\t\tResourceSubType: \"physicalSwitch\",\n\t\t\tLabels:          labels,\n\t\t}\n\t},\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/server/template.go\n```golang\npackage server\n\nimport (\n\t\"strings\"\n\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n)\n\nconst (\n\t// 与前端定义，传入的值\n\tStatus                     = \"server_status\"\n\tCpuTotal                   = \"cpu_total\"\n\tCpuUsageRate               = \"cpu_usage_rate\"\n\tCpuUsageSumRate            = \"cpu_usage_sum_rate\" //多个节点的汇总使用率\n\tMemTotal                   = \"memory_total\"\n\tMemUsageRate               = \"memory_usage_rate\"\n\tMemUsage                   = \"memory_usage\"\n\tMemUsageSumRate            = \"memory_usage_sum_rate\" //多个节点的汇总使用率\n\tDiskUsageRate              = \"disk_usage_rate\"\n\tDiskUsage                  = \"disk_usage\"\n\tDiskUsageSumRate           = \"disk_usage_sum_rate\"             //多个节点的汇总使用率\n\tNodeNetstatTcpCurrEstab    = \"node_netstat_tcp_curr_estab\"     //节点tcp连接数\n\tNodeNetstatTcpCurrEstabSum = \"node_netstat_tcp_curr_estab_sum\" //节点tcp连接数汇总\n\tNodeNetworkPps             = \"node_network_pps\"\n\tNodeNetworkBps             = \"node_network_bps\"\n\tNetworkReceive24h          = \"server_network_receive_24h\"\n\tNetworkTransmit24h         = \"server_network_transmit_24h\"\n\tDiskAvailEvery             = \"server_disk_avail_every\"\n\tCpuMode                    = \"server_cpu_mode\"\n\tCpuNodeLoad1               = \"node_load1\"\n\tCpuNodeLoad5               = \"node_load5\"\n\tCpuNodeLoad15              = \"node_load15\"\n\tNodeMemoryFree             = \"node_memory_free\"\n\tNodeMemoryTotal            = \"node_memory_total\"\n\tNodeMemoryAvailable        = \"node_memory_available\"\n\tDiskReadBytes              = \"disk_read_bytes\"\n\tDiskWrittenBytes           = \"disk_written_bytes\"\n\tDiskWriteIo                = \"disk_write_io\"\n\tDiskReadIo                 = \"disk_read_io\"\n\tDiskIoReadCount            = \"disk_io_reads_count\"\n\tDiskIoWriteCount           = \"disk_io_writes_count\"\n\tDiskIoReadDelay            = \"disk_io_read_delay\"\n\tDiskIoWriteDelay           = \"disk_io_write_delay\"\n\tNetworkCardList            = \"network_card_list\"\n\tIpmiUp                     = \"ipmi_up\"\n\tInTemp                     = \"in_temp\"\n\tOutTemp                    = \"out_temp\"\n\tIpmiSensorStateCpu         = \"ipmi_sensor_state_cpu\"\n\tIpmiSensorStateMem         = \"ipmi_sensor_state_mem\"\n\tIpmiSensorStatePower       = \"ipmi_sensor_state_power\"\n\tIpmiSensorStateFan         = \"ipmi_sensor_state_fan\"\n\tIpmiFanSpeedRpm            = \"ipmi_fan_speed_rpm\"\n\tSwitchStatus               = \"switch_status\"\n\tSwitchCpuUsageRate         = \"switch_cpu_usage_rate\"\n\tSwitchMemUsageRate         = \"switch_mem_usage_rate\"\n)\n\n//如果label的类型不固定，使用这个func\n//type promQLReq func(labels []*alarmv1alpha.Label) *alarmv1alpha.ListPromQLsRequest\n\ntype serverReqFunc func(ipList []string) *alarmv1alpha.ListPromQLsRequest\n\nvar TemplateMap = map[string]serverReqFunc{\n\tStatus: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"server_status\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"), //127.0.0.1:9100|127.0.0.2:9100\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCpuTotal: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"cpu_total\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCpuUsageRate: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"cpu_usage_rate\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCpuUsageSumRate: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"cpu_usage_sum_rate\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tMemTotal: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"memory_total\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tMemUsageRate: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"memory_usage_rate\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tMemUsage: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"memory_usage\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tMemUsageSumRate: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"memory_usage_sum_rate\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskUsageRate: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_usage_rate\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskUsage: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_usage\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskUsageSumRate: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_usage_sum_rate\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tNodeNetstatTcpCurrEstab: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"node_netstat_tcp_curr_estab\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tNodeNetstatTcpCurrEstabSum: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"node_netstat_tcp_curr_estab_sum\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tNodeNetworkPps: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"node_network_pps\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tNodeNetworkBps: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"node_network_bps\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tNetworkReceive24h: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"server_network_receive_24h\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tNetworkTransmit24h: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"Server_network_transmit_24h\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskAvailEvery: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"server_disk_avail_every\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCpuMode: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"server_cpu_mode\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCpuNodeLoad1: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"cpu_node_load1\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCpuNodeLoad5: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"cpu_node_load5\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCpuNodeLoad15: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"cpu_node_load15\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tNodeMemoryFree: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"node_memory_free\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tNodeMemoryTotal: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"node_memory_total\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tNodeMemoryAvailable: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"node_memory_available\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskReadBytes: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_read_bytes\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskWrittenBytes: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_written_bytes\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskReadIo: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_read_io\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskWriteIo: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_write_io\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tNetworkCardList: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"network_card_list\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tIpmiUp: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"ipmi_up\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tInTemp: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"in_temp\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tOutTemp: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"out_temp\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tIpmiSensorStateCpu: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"ipmi_sensor_state_cpu\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tIpmiSensorStateMem: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"ipmi_sensor_state_mem\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tIpmiSensorStatePower: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"ipmi_sensor_state_power\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tIpmiSensorStateFan: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"ipmi_sensor_state_fan\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tIpmiFanSpeedRpm: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"ipmi_fan_speed_rpm\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tSwitchStatus: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"switch_status\",\n\t\t\tResourceSubType: \"physicalSwitch\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"), //127.0.0.1:9100|127.0.0.2:9100\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tSwitchCpuUsageRate: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"switch_cpu_usage_rate\",\n\t\t\tResourceSubType: \"physicalSwitch\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tSwitchMemUsageRate: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"switch_mem_usage_rate\",\n\t\t\tResourceSubType: \"physicalSwitch\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskIoReadCount: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_io_reads_count\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskIoWriteCount: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_io_writes_count\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskIoReadDelay: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_io_read_delay\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskIoWriteDelay: func(ipList []string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_io_write_delay\",\n\t\t\tResourceSubType: \"physicalServer\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     strings.Join(ipList, \"|\"),\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/server/native_template.go\n```golang\npackage server\n\n// GetCpuRateTop 获取CPU使用率Top\nfunc GetCpuRateTop(topK, ips, t string) string {\n\tpsql := `topk(` + topK + `,1-sum(avg_over_time(node_cpu_seconds_total{instance=~\"(` + ips + `)\",mode=\"idle\"}[` + t + `]))by(instance,hostname)/sum(avg_over_time(node_cpu_seconds_total{instance=~\"(` + ips + `)\"}[` + t + `]))by(instance,hostname))`\n\treturn psql\n}\n\nfunc GetCpuRateTopByHostName(topK, hostNames, t string) string {\n\tpsql := `topk(` + topK + `, avg_over_time(instance:node_cpu_usage:rate10m{hostname=~\"(` + hostNames + `)\"}[` + t + `]))`\n\treturn psql\n}\n\nfunc GetMemoryRateTopK(topK, ips, t string) string {\n\tparam := `topk(` + topK + `,1-(avg_over_time(node_memory_MemAvailable_bytes{instance=~\"(` + ips + `)\"}[` + t + `]))/(avg_over_time(node_memory_MemTotal_bytes{instance=~\"(` + ips + `)\"}[` + t + `])))`\n\treturn param\n}\n\nfunc GetDiskRateTopK(topK, ips, t string) string {\n\tparam := `topk(` + topK + `,1 - sum(avg_over_time(node_filesystem_free_bytes{instance=~\"(` + ips + `)\",mountpoint=~\"/vm_data|/|/boot\",fstype!=\"rootfs\"}[` + t + `]))by(instance,hostname) / sum(avg_over_time(node_filesystem_size_bytes{instance=~\"(` + ips + `)\",mountpoint=~\"/vm_data|/|/boot\",fstype!=\"rootfs\"}[` + t + `]))by(instance,hostname))`\n\treturn param\n}\n\nfunc GetNetworkReceiveRateTopK(topK, ips, t string) string {\n\tparam := `topk(` + topK + `,sum(avg_over_time(node_network_receive_bytes_total{instance=~\"(` + ips + `)\",device=~\"(?i)^(en|eth).+$\"}[` + t + `]))by(instance,hostname))`\n\treturn param\n}\n\nfunc GetNetworkTransmitRateTopK(topK, ips, t string) string {\n\tparam := `topk(` + topK + `,sum(avg_over_time(node_network_transmit_bytes_total{instance=~\"(` + ips + `)\",device=~\"(?i)^(en|eth).+$\"}[` + t + `]))by(instance,hostname))`\n\treturn param\n}\n\nfunc GetSwitchCpuRateTop(topK, ips, t string) string {\n\tpsql := `topk(` + topK + `, avg_over_time(cpuUsageRate{instance=~\"` + ips + `\"}[` + t + `]))`\n\treturn psql\n}\n\nfunc GetSwitchMemRateTop(topK, ips, t string) string {\n\tpsql := `topk(` + topK + `, avg_over_time(memoryUsageRate{instance=~\"` + ips + `\"}[` + t + `]))`\n\treturn psql\n}\n\nfunc SwitchInterfaceOutDropRates(ips, ifIndex, t string) string {\n\tparam := `rate(ifOutDiscards{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `]) / rate(ifHCOutUcastPkts{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])`\n\treturn param\n}\n\nfunc SwitchInterfaceInDropRates(ips, ifIndex, t string) string {\n\tparam := `rate(ifInDiscards{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `]) / rate(ifHCInUcastPkts{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])`\n\treturn param\n}\n\nfunc SwitchInterfaceOutErrRates(ips, ifIndex, t string) string {\n\tparam := `rate(ifOutErrors{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `]) / rate(ifHCOutUcastPkts{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])`\n\treturn param\n}\n\n// rate(ifHCOutOctets{instance=\"10.177.60.15\"}[30m])/((ifHighSpeed{instance=\"10.177.60.15\"}) * 1024 * 1024 / 8 )\nfunc SwitchInterfaceInErrRates(ips, ifIndex, t string) string {\n\tparam := `rate(ifInErrors{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `]) / rate(ifHCInUcastPkts{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])`\n\treturn param\n}\n\n// ifHCOutOctets 单位字节(Bytes)\n// ifHighSpeed 单位字节(Mbit/s)\nfunc SwitchInterfaceBandOutRates(ips, ifIndex, t string) string {\n\tparam := `rate(ifHCOutOctets{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])/(ifHighSpeed{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}/8*1024*1024)`\n\treturn param\n}\n\nfunc SwitchInterfaceBandInRates(ips, ifIndex, t string) string {\n\tparam := `rate(ifHCInOctets{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])/(ifHighSpeed{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}/8*1024*1024)`\n\treturn param\n}\n\nfunc SwitchInterfaceInErrNum(ips, ifIndex, t string) string {\n\tparam := `rate(ifInErrors{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])`\n\treturn param\n}\n\nfunc SwitchInterfaceOutErrNum(ips, ifIndex, t string) string {\n\tparam := `rate(ifOutErrors{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])`\n\treturn param\n}\n\nfunc SwitchInterfaceInDropNum(ips, ifIndex, t string) string {\n\tparam := `rate(ifInDiscards{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])`\n\treturn param\n}\n\nfunc SwitchInterfaceOutDropNum(ips, ifIndex, t string) string {\n\tparam := `rate(ifOutDiscards{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])`\n\treturn param\n}\n\nfunc SwitchInterfaceInFlow(ips, ifIndex, t string) string {\n\tparam := `rate(ifHCInOctets{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])`\n\treturn param\n}\n\nfunc SwitchInterfaceOutFlow(ips, ifIndex, t string) string {\n\tparam := `rate(ifHCOutOctets{instance=~\"` + ips + `\",ifIndex=~\"` + ifIndex + `\"}[` + t + `])`\n\treturn param\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/compute/template.go\n```golang\npackage compute\n\nimport (\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n)\n\nconst (\n\tVCpuStock   = \"vcpu_stock\"\n\tMemoryStock = \"memory_stock\"\n\tCpuRate     = \"cpu_usage_rate\"\n\tMemoryRate  = \"memory_usage_rate\"\n\tDiskRate    = \"disk_usage_rate\"\n)\n\ntype computeReqFunc func(region string, az string, poolName string) *alarmv1alpha.ListPromQLsRequest\n\nvar TemplateMap = map[string]computeReqFunc{\n\tVCpuStock: func(region string, az string, poolName string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"vcpu_stock\",\n\t\t\tResourceSubType: \"kec\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tMemoryStock: func(region string, az string, poolName string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"memory_stock\",\n\t\t\tResourceSubType: \"kec\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCpuRate: func(region string, az string, poolName string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"cpu_usage_rate\",\n\t\t\tResourceSubType: \"kec\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tMemoryRate: func(region string, az string, poolName string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"memory_usage_rate\",\n\t\t\tResourceSubType: \"kec\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskRate: func(region string, az string, poolName string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_usage_rate\",\n\t\t\tResourceSubType: \"kec\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     poolName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/compute/native_template.go\n```golang\npackage compute\n\n// 预测库存\nfunc GetPredictVCpuStock(resourcePool, resourcePoolType, t, tt string) string {\n\tpsql := `avg without (pod, instance) (predict_linear(aggregate_vcpu_remain_count{resource_pool = \"` + resourcePool + `\",resource_pool_type=\"` + resourcePoolType + `\"}[` + t + `],` + tt + `))`\n\treturn psql\n}\n\nfunc GetPredictMemoryStock(resourcePool, resourcePoolType, t, tt string) string {\n\tpsql := `avg without (pod, instance) (predict_linear(aggregate_memory_remain_count{resource_pool = \"` + resourcePool + `\",resource_pool_type=\"` + resourcePoolType + `\"}[` + t + `],` + tt + `))`\n\treturn psql\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/db/template.go\n```golang\npackage db\n\nimport (\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n)\n\nconst (\n\tCpuUsage            = \"cpu_usage\"\n\tMemoryUsage         = \"memory_usage\"\n\tDiskUsage           = \"disk_usage\"\n\tDbVcpuRemainCount   = \"db_vcpu_remain_count\"\n\tDbMemoryRemainCount = \"db_memory_remain_count\"\n\tDbDiskRemainCount   = \"db_disk_remain_count\"\n)\n\ntype dbReqFunc func(region, az, resourcePool, resourcePoolType string) *alarmv1alpha.ListPromQLsRequest\n\nvar TemplateMap = map[string]dbReqFunc{\n\tDbVcpuRemainCount: func(region, az, resourcePool, resourcePoolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"db_vcpu_remain_count\",\n\t\t\tResourceSubType: \"rds\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     resourcePool,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDbMemoryRemainCount: func(region, az, resourcePool, resourcePoolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"db_memory_remain_count\",\n\t\t\tResourceSubType: \"rds\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     resourcePool,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDbDiskRemainCount: func(region, az, resourcePool, resourcePoolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"db_disk_remain_count\",\n\t\t\tResourceSubType: \"rds\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"az\",\n\t\t\t\t\tValue:     az,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     resourcePool,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tCpuUsage: func(region, az, resourcePool, resourcePoolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"cpu_usage\",\n\t\t\tResourceSubType: \"rds\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t//{\n\t\t\t\t//\tKey:       \"az\",\n\t\t\t\t//\tValue:     az,\n\t\t\t\t//\tOperation: \"=\",\n\t\t\t\t//},\n\t\t\t},\n\t\t\tAssistedLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     resourcePool,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tMemoryUsage: func(region, az, resourcePool, resourcePoolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"memory_usage\",\n\t\t\tResourceSubType: \"rds\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t//{\n\t\t\t\t//\tKey:       \"az\",\n\t\t\t\t//\tValue:     az,\n\t\t\t\t//\tOperation: \"=\",\n\t\t\t\t//},\n\t\t\t},\n\t\t\tAssistedLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     resourcePool,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n\tDiskUsage: func(region, az, resourcePool, resourcePoolType string) *alarmv1alpha.ListPromQLsRequest {\n\t\treturn &alarmv1alpha.ListPromQLsRequest{\n\t\t\tName:            \"disk_usage\",\n\t\t\tResourceSubType: \"rds\",\n\t\t\tLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"region\",\n\t\t\t\t\tValue:     region,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t//{\n\t\t\t\t//\tKey:       \"az\",\n\t\t\t\t//\tValue:     az,\n\t\t\t\t//\tOperation: \"=\",\n\t\t\t\t//},\n\t\t\t},\n\t\t\tAssistedLabels: []*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool\",\n\t\t\t\t\tValue:     resourcePool,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tKey:       \"resource_pool_type\",\n\t\t\t\t\tValue:     resourcePoolType,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/promql_template/db/native_template.go\n```golang\npackage db\n\n// GetPredictVCpuRemain 获取vcpu库存\nfunc GetPredictVCpuRemain(resourcePool, resourcePoolType, t, tt string) string {\n\tpsql := `predict_linear(db_vcpu_remain_count{resource_pool = \"` + resourcePool + `\",resource_pool_type=\"` + resourcePoolType + `\"}[` + t + `],` + tt + `)`\n\treturn psql\n}\n\nfunc GetPredictMemRemain(resourcePool, resourcePoolType, t, tt string) string {\n\tpsql := `predict_linear(db_memory_remain_count{resource_pool = \"` + resourcePool + `\",resource_pool_type=\"` + resourcePoolType + `\"}[` + t + `],` + tt + `)`\n\treturn psql\n}\n\nfunc GetPredictDiskRemain(resourcePool, resourcePoolType, t, tt string) string {\n\tpsql := `predict_linear(db_disk_remain_count{resource_pool = \"` + resourcePool + `\",resource_pool_type=\"` + resourcePoolType + `\"}[` + t + `],` + tt + `)`\n\treturn psql\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/utils/alert_count.go\n```golang\npackage utils\n\nimport alarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\nfunc CountAlertsNum(alerts []*alarmv1alpha.AlertInfo, poolTye, level string) int {\n\tvar num int\n\tfor _, alert := range alerts {\n\t\tif alert.ResourceSubType == poolTye && alert.Level == level {\n\t\t\tnum++\n\t\t}\n\t}\n\treturn num\n}\n\nfunc CountAlertsListNum(alerts []*alarmv1alpha.AlertInfo, resource_sub_type string) map[string]int {\n\tif alerts == nil || len(alerts) == 0 {\n\t\treturn nil\n\t}\n\tres := make(map[string]int)\n\tfor _, alt := range alerts {\n\t\tlevel := alt.Labels[\"level\"]\n\t\t//只保留 p0  p1 p2 p3 级别告警\n\t\tif level != \"p0\" && level != \"p1\" && level != \"p2\" && level != \"p3\" {\n\t\t\tcontinue\n\t\t}\n\t\t//只保留gms告警策略创建出来的告警\n\t\tif alt.Labels[\"policy_id\"] == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tvar hostName string\n\t\tif resource_sub_type == \"physicalServer\" || resource_sub_type == \"physicalSwitch\" { //服务器 交换机\n\t\t\thostName = alt.Labels[\"hostname\"]\n\t\t}\n\t\tif ins, ok := res[hostName]; ok {\n\t\t\tres[hostName] = ins + 1\n\t\t} else {\n\t\t\tres[hostName] = 1\n\t\t}\n\n\t}\n\treturn res\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/utils/page.go\n```golang\npackage utils\n\nfunc Paginate(data []interface{}, pageSize int, PageNo int) []interface{} {\n\t//-1不分页，返回全部\n\tif pageSize == -1 {\n\t\treturn data\n\t}\n\n\tstartIndex := (PageNo - 1) * pageSize\n\tendIndex := PageNo * pageSize\n\tif endIndex > len(data) {\n\t\tendIndex = len(data)\n\t}\n\treturn data[startIndex:endIndex]\n}\n\n// 定义一个通用的结构体\ntype Bucket struct {\n\tSlice []interface{}               //承载以任意结构体为元素构成的Slice\n\tBy    func(a, b interface{}) bool //排序规则函数,当需要对新的结构体slice进行排序时，只需定义这个函数即可\n}\n\n/*\n定义三个必须方法的准则：接收者不能为指针\n*/\nfunc (this Bucket) Len() int { return len(this.Slice) }\n\nfunc (this Bucket) Swap(i, j int) { this.Slice[i], this.Slice[j] = this.Slice[j], this.Slice[i] }\n\nfunc (this Bucket) Less(i, j int) bool { return this.By(this.Slice[i], this.Slice[j]) }\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/utils/gosafe.go\n```golang\npackage utils\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"k8s.io/klog/v2\"\n\t\"runtime\"\n\t\"runtime/debug\"\n\t\"strconv\"\n)\n\n// GoSafe runs the given fn using another goroutine, recovers if fn panics.\nfunc GoSafe(fn func()) {\n\tgo RunSafe(fn)\n}\n\n// RoutineId is only for debug, never use it in production.\nfunc RoutineId() uint64 {\n\tb := make([]byte, 64)\n\tb = b[:runtime.Stack(b, false)]\n\tb = bytes.TrimPrefix(b, []byte(\"goroutine \"))\n\tb = b[:bytes.IndexByte(b, ' ')]\n\t// if error, just return 0\n\tn, _ := strconv.ParseUint(string(b), 10, 64)\n\n\treturn n\n}\n\n// RunSafe runs the given fn, recovers if fn panics.\nfunc RunSafe(fn func()) {\n\tdefer Recover()\n\n\tfn()\n}\n\n// Recover is used with defer to do cleanup on panics.\n// Use it like:\n//\n//\tdefer Recover(func() {})\nfunc Recover(cleanups ...func()) {\n\tfor _, cleanup := range cleanups {\n\t\tcleanup()\n\t}\n\n\tif p := recover(); p != nil {\n\t\tklog.Error(fmt.Sprintf(\"%s\\n%s\", p, string(debug.Stack())))\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/utils/page_test.go\n```golang\npackage utils\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestPaginate(t *testing.T) {\n\tdata := []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\n\t// Positive test case\n\tpageSize := 3\n\tpageNo := 2\n\texpected := []interface{}{4, 5, 6}\n\tresult := Paginate(data, pageSize, pageNo)\n\tif !reflect.DeepEqual(result, expected) {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n\n\t// Boundary test case\n\tpageSize = 5\n\tpageNo = 1\n\texpected = []interface{}{1, 2, 3, 4, 5}\n\tresult = Paginate(data, pageSize, pageNo)\n\tif !reflect.DeepEqual(result, expected) {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n\n\t// Edge test case\n\tpageSize = 2\n\tpageNo = 6\n\texpected = []interface{}{}\n\tresult = Paginate(data, pageSize, pageNo)\n\tif !reflect.DeepEqual(result, expected) {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n\n\t// Test case for pageSize = -1\n\tpageSize = -1\n\tpageNo = 1\n\texpected = []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tresult = Paginate(data, pageSize, pageNo)\n\tif !reflect.DeepEqual(result, expected) {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/lang/lang.go\n```golang\npackage lang\n\n// Placeholder is a placeholder object that can be used globally.\nvar Placeholder PlaceholderType\n\ntype (\n\t// AnyType can be used to hold any type.\n\tAnyType = interface{}\n\t// PlaceholderType represents a placeholder type.\n\tPlaceholderType = struct{}\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/gormSerializer/jsonserializer.go\n```golang\npackage gormSerializer\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"gorm.io/gorm/schema\"\n\t\"reflect\"\n)\n\n// JSONSerializer json序列化器\ntype JSONSerializer struct {\n}\n\n// 实现 Scan 方法\nfunc (JSONSerializer) Scan(ctx context.Context, field *schema.Field, dst reflect.Value, dbValue interface{}) (err error) {\n\tfieldValue := reflect.New(field.FieldType)\n\n\tif dbValue != nil {\n\t\tvar bytes []byte\n\t\tswitch v := dbValue.(type) {\n\t\tcase []byte:\n\t\t\tbytes = v\n\t\tcase string:\n\t\t\tbytes = []byte(v)\n\t\tdefault:\n\t\t\treturn fmt.Errorf(\"failed to unmarshal JSONB value: %#v\", dbValue)\n\t\t}\n\n\t\terr = json.Unmarshal(bytes, fieldValue.Interface())\n\t}\n\n\tfield.ReflectValueOf(ctx, dst).Set(fieldValue.Elem())\n\treturn\n}\n\n// 实现 Value 方法\nfunc (JSONSerializer) Value(ctx context.Context, field *schema.Field, dst reflect.Value, fieldValue interface{}) (interface{}, error) {\n\treturn json.Marshal(fieldValue)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/paging/paging.go\n```golang\npackage paging\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n)\n\n// Pagination 存储分页结果\ntype Pagination struct {\n\tTotal       int         // 总记录数\n\tPerPage     int         // 每页记录数\n\tCurrentPage int         // 当前页码\n\tLastPage    int         // 最后一页页码\n\tData        interface{} // 数据\n}\n\n// Paginate 分页查询方法\nfunc Paginate(db *gorm.DB, model interface{}, page int, perPage int) (*Pagination, error) {\n\tvar count int\n\terr := db.Model(model).Count(&count).Error\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\toffset := (page - 1) * perPage\n\terr = db.Model(model).Offset(offset).Limit(perPage).Find(model).Error\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tlastPage := int(count/perPage) + 1\n\tpagination := &Pagination{\n\t\tTotal:       count,\n\t\tPerPage:     perPage,\n\t\tCurrentPage: page,\n\t\tLastPage:    lastPage,\n\t\tData:        model,\n\t}\n\n\treturn pagination, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/version/version.go\n```golang\npackage version\n\nimport \"fmt\"\n\nvar (\n\tVersion   = \"v0.1.0\"\n\tGitHash   = \"unknown\"\n\tBuildTime = \"unknown\"\n\tGoVersion = \"unknown\"\n)\n\nfunc Info() string {\n\treturn fmt.Sprintf(\"Version: %s\\nGitHash: %s\\nBuildTime: %s\\nGoVersion: %s\\n\", Version, GitHash, BuildTime, GoVersion)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/job/switch/fan_job.go\n```golang\npackage _switch\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tsdbql_template/types.go\n```golang\npackage tsdbql_template\n\nimport \"strings\"\n\ntype TsdbQuery struct {\n\tMetric  string `json:\"metric\"`\n\tHostTag string `json:\"host_tag\"`\n}\n\nfunc ParseTsdbQuery(productLine, metricPrefix, id string) TsdbQuery {\n\t//ksceip--024561cc-b2e8-48d9-bee4-fec9486471b8\n\thostTag := productLine + \"--\" + id\n\tif productLine == \"ksckcs2\" {\n\t\thostTag = productLine + \"-\" + id\n\t}\n\tif productLine == \"ksclb\" {\n\t\thostTag = productLine + \"---\" + id\n\t}\n\tif productLine == \"kec\" || productLine == \"ebs\" {\n\t\thostTag = id\n\t}\n\t//eip.bps.in.ksceip--024561cc-b2e8-48d9-bee4-fec9486471b8\n\tfullMetric := metricPrefix + \".\" + hostTag\n\t//fmt.Printf(\"OpenTSDB Meric DEBUG: fullMetric: %s\\n\", fullMetric)\n\treturn TsdbQuery{\n\t\tMetric:  fullMetric,\n\t\tHostTag: hostTag,\n\t}\n}\n\nfunc GetInstanceIdFromHostTag(hostTag string) string {\n\t//ksceip--024561cc-b2e8-48d9-bee4-fec9486471b8\n\tif strings.Index(hostTag, \"---\") != -1 {\n\t\treturn strings.Split(hostTag, \"ksclb---\")[1]\n\t}\n\tif strings.Index(hostTag, \"--\") != -1 {\n\t\treturn strings.Split(hostTag, \"--\")[1]\n\t}\n\tif strings.Index(hostTag, \"ksckcs2-\") != -1 {\n\t\treturn strings.Split(hostTag, \"ksckcs2-\")[1]\n\t}\n\treturn hostTag\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tsdbql_template/redis/redis.go\n```golang\npackage redis\n\nconst (\n\tRedis_cpu_load           = \"redis_cpu_load\"\n\tRedis_memory_load        = \"redis_memory_load\"\n\tRedis_intranet_in_ratio  = \"redis_intranet_in_ratio\"\n\tRedis_intranet_out_ratio = \"redis_intranet_out_ratio\"\n\tRedis_connection_usage   = \"redis_connection_usage\"\n\tRedis_hit_rate           = \"redis_hit_rate\"\n\tRedis_slowlog_len        = \"redis_slowlog_len\"\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tsdbql_template/object_volume/object_volume.go\n```golang\npackage object_volume\n\nconst (\n\tObjectVolumeBandReadKs3     = \"ebs_volume_band_read_ks3\"\n\tObjectVolumeBandWriteKs3    = \"ebs_volume_band_write_ks3\"\n\tObjectVolumeIOReadKs3       = \"ebs_volume_io_read_ks3\"\n\tObjectVolumeIOWriteKs3      = \"ebs_volume_io_write_ks3\"\n\tObjectVolumeIOReadDelayKs3  = \"ebs_volume_io_read_delay_ks3\"\n\tObjectVolumeIOWriteDelayKs3 = \"ebs_volume_io_write_delay_ks3\"\n\n\tObjectVolumeBandReadObs     = \"ebs_volume_band_read_obs\"\n\tObjectVolumeBandWriteObs    = \"ebs_volume_band_write_obs\"\n\tObjectVolumeIOReadObs       = \"ebs_volume_io_read_obs\"\n\tObjectVolumeIOWriteObs      = \"ebs_volume_io_write_obs\"\n\tObjectVolumeIOReadDelayObs  = \"ebs_volume_io_read_delay_obs\"\n\tObjectVolumeIOWriteDelayObs = \"ebs_volume_io_write_delay_obs\"\n)\n\nvar ObjectVolumeTopKs3Metrics = []string{\n\tObjectVolumeBandReadKs3,\n\tObjectVolumeBandWriteKs3,\n\tObjectVolumeIOReadKs3,\n\tObjectVolumeIOWriteKs3,\n}\n\nvar ObjectVolumeTopObsMetrics = []string{\n\tObjectVolumeBandReadObs,\n\tObjectVolumeBandWriteObs,\n\tObjectVolumeIOReadObs,\n\tObjectVolumeIOWriteObs,\n}\n\ntype TsdbQuery struct {\n\tMetric string            `json:\"metric\"`\n\tTags   map[string]string `json:\"Tag\"`\n}\n\nfunc ParseTsdbQuery(code, metricPrefix, id string) TsdbQuery {\n\tfullMetric := metricPrefix + \".\" + id\n\ttags := make(map[string]string)\n\tswitch code {\n\tcase ObjectVolumeBandReadKs3, ObjectVolumeBandWriteKs3, ObjectVolumeBandReadObs, ObjectVolumeBandWriteObs:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"vda\", // 以挂盘区分\n\t\t}\n\tcase ObjectVolumeIOReadKs3, ObjectVolumeIOWriteKs3, ObjectVolumeIOReadObs, ObjectVolumeIOWriteObs:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"vda\",\n\t\t}\n\tcase ObjectVolumeIOReadDelayKs3, ObjectVolumeIOWriteDelayKs3, ObjectVolumeIOReadDelayObs, ObjectVolumeIOWriteDelayObs:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"vda\",\n\t\t}\n\t}\n\treturn TsdbQuery{\n\t\tMetric: fullMetric,\n\t\tTags:   tags,\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tsdbql_template/nat/nat.go\n```golang\npackage nat\n\nconst (\n\tNat_bps_in                 = \"nat_bps_in\"\n\tNat_bps_out                = \"nat_bps_out\"\n\tNat_public_bps_in          = \"nat_public_bps_in\"\n\tNat_public_bps_out         = \"nat_public_bps_out\"\n\tNat_pps_in                 = \"nat_pps_in\"\n\tNat_pps_out                = \"nat_pps_out\"\n\tNat_public_pps_in          = \"nat_public_pps_in\"\n\tNat_public_pps_out         = \"nat_public_pps_out\"\n\tNat_public_utilization_in  = \"nat_public_utilization_in\"\n\tNat_public_utilization_out = \"nat_public_utilization_out\"\n\tNat_ipconflict             = \"nat_ipconflict\"\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tsdbql_template/lb/lb.go\n```golang\npackage lb\n\nconst (\n\tLb_flow_in        = \"lb_flow_in\"\n\tLb_flow_out       = \"lb_flow_out\"\n\tLb_pps_in         = \"lb_pps_in\"\n\tLb_pps_out        = \"lb_pps_out\"\n\tLb_cps            = \"lb_cps\"\n\tLb_activeconn     = \"lb_activeconn\"\n\tLb_concurrentconn = \"lb_concurrentconn\"\n\tLb_inactiveconn   = \"lb_inactiveconn\"\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tsdbql_template/ebs_volume/ebs_volume.go\n```golang\npackage ebs_volume\n\nconst (\n\tEbsVolumeBandReadEhdd     = \"ebs_volume_band_read_ehdd\"\n\tEbsVolumeBandWriteEhdd    = \"ebs_volume_band_write_ehdd\"\n\tEbsVolumeIOReadEhdd       = \"ebs_volume_io_read_ehdd\"\n\tEbsVolumeIOWriteEhdd      = \"ebs_volume_io_write_ehdd\"\n\tEbsVolumeIOReadDelayEhdd  = \"ebs_volume_io_read_delay_ehdd\"\n\tEbsVolumeIOWriteDelayEhdd = \"ebs_volume_io_write_delay_ehdd\"\n\n\tEbsVolumeBandReadSSD     = \"ebs_volume_band_read_ssd3.0\"\n\tEbsVolumeBandWriteSSD    = \"ebs_volume_band_write_ssd3.0\"\n\tEbsVolumeIOReadSSD       = \"ebs_volume_io_read_ssd3.0\"\n\tEbsVolumeIOWriteSSD      = \"ebs_volume_io_write_ssd3.0\"\n\tEbsVolumeIOReadDelaySSD  = \"ebs_volume_io_read_delay_ssd3.0\"\n\tEbsVolumeIOWriteDelaySSD = \"ebs_volume_io_write_delay_ssd3.0\"\n)\n\nvar EbsVolumeTopEhddMetrics = []string{\n\tEbsVolumeBandReadEhdd,\n\tEbsVolumeBandWriteEhdd,\n\tEbsVolumeIOReadEhdd,\n\tEbsVolumeIOWriteEhdd,\n\tEbsVolumeIOReadDelayEhdd,\n\tEbsVolumeIOWriteDelayEhdd,\n}\n\nvar EbsVolumeTopSSDMetrics = []string{\n\tEbsVolumeBandReadSSD,\n\tEbsVolumeBandWriteSSD,\n\tEbsVolumeIOReadSSD,\n\tEbsVolumeIOWriteSSD,\n\tEbsVolumeIOReadDelaySSD,\n\tEbsVolumeIOWriteDelaySSD,\n}\n\ntype TsdbQuery struct {\n\tMetric string            `json:\"metric\"`\n\tTags   map[string]string `json:\"Tag\"`\n}\n\nfunc ParseTsdbQuery(code, metricPrefix, id string) TsdbQuery {\n\tfullMetric := metricPrefix + \".\" + id\n\ttags := make(map[string]string)\n\tswitch code {\n\tcase EbsVolumeBandReadEhdd, EbsVolumeBandWriteEhdd, EbsVolumeBandReadSSD, EbsVolumeBandWriteSSD:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"vda\", // 以挂盘区分\n\t\t}\n\tcase EbsVolumeIOReadEhdd, EbsVolumeIOWriteEhdd, EbsVolumeIOReadSSD, EbsVolumeIOWriteSSD:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"vda\",\n\t\t}\n\tcase EbsVolumeIOReadDelayEhdd, EbsVolumeIOWriteDelayEhdd, EbsVolumeIOReadDelaySSD, EbsVolumeIOWriteDelaySSD:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"vda\",\n\t\t}\n\t}\n\treturn TsdbQuery{\n\t\tMetric: fullMetric,\n\t\tTags:   tags,\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tsdbql_template/vm/vm.go\n```golang\npackage vm\n\nconst (\n\tCpuLoad         = \"vm_cpu_load\"\n\tMemoryLoad      = \"vm_memory_load\"\n\tDiskLoad        = \"vm_disk_load\"\n\tDiskFree        = \"vm_disk_free\"\n\tNetIn           = \"vm_net_in\"\n\tNetOut          = \"vm_net_out\"\n\tCpuModeSystem   = \"vm_cpu_mode_system\"\n\tCpuModeUser     = \"vm_cpu_mode_user\"\n\tCpuModeSoftIrq  = \"vm_cpu_mode_soft_irq\"\n\tCpuModeIrq      = \"vm_cpu_mode_irq\"\n\tCpuModeIOWait   = \"vm_cpu_mode_io_wait\"\n\tCpuModeIdle     = \"vm_cpu_mode_idle\"\n\tCpuModeNice     = \"vm_cpu_mode_nice\"\n\tCpuModeSteal    = \"vm_cpu_mode_steal\"\n\tMemorySizeTotal = \"vm_memory_size_total\"\n\tMemorySizeFree  = \"vm_memory_size_free\"\n\tNetReceive      = \"vm_net_receive\"\n\tNetTransmit     = \"vm_net_transmit\"\n\tNetPacketIn     = \"vm_net_packet_in\"\n\tNetPacketOut    = \"vm_net_packet_out\"\n\tDiskUsedRate    = \"vm_disk_used_rate\"\n\tDiskReadBps     = \"vm_disk_read_bps\"\n\tDiskWriteBps    = \"vm_disk_write_bps\"\n\tDiskReadOps     = \"vm_disk_read_ops\"\n\tDiskWriteOps    = \"vm_disk_write_ops\"\n)\n\nvar VmTopMetrics = []string{\n\tCpuLoad,\n\tMemoryLoad,\n\tDiskLoad,\n\tNetIn,\n\tNetOut,\n}\n\ntype TsdbQuery struct {\n\tMetric string            `json:\"metric\"`\n\tTags   map[string]string `json:\"Tag\"`\n}\n\nfunc ParseTsdbQuery(code, metricPrefix, id string) TsdbQuery {\n\tfullMetric := metricPrefix + \".\" + id\n\ttags := make(map[string]string)\n\tswitch code {\n\tcase CpuLoad, MemoryLoad: // CPU 内存\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t}\n\tcase DiskLoad: // 磁盘\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"/\",\n\t\t\t\"p2\":   \"pused\",\n\t\t}\n\tcase DiskFree:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"/\",\n\t\t\t\"p2\":   \"free\",\n\t\t}\n\tcase NetIn, NetOut, NetReceive, NetTransmit: // 网卡\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"eth0\", // 暂时写eth0 后面优化\n\t\t}\n\tcase CpuModeSystem:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"all\",\n\t\t\t\"p2\":   \"system\",\n\t\t\t\"p3\":   \"avg1\",\n\t\t}\n\tcase CpuModeUser:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"all\",\n\t\t\t\"p2\":   \"user\",\n\t\t\t\"p3\":   \"avg1\",\n\t\t}\n\tcase CpuModeSoftIrq:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"all\",\n\t\t\t\"p2\":   \"softirq\",\n\t\t\t\"p3\":   \"avg1\",\n\t\t}\n\tcase CpuModeIrq:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"all\",\n\t\t\t\"p2\":   \"irq\",\n\t\t\t\"p3\":   \"avg1\",\n\t\t}\n\tcase CpuModeIOWait:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"all\",\n\t\t\t\"p2\":   \"iowait\",\n\t\t\t\"p3\":   \"avg1\",\n\t\t}\n\tcase CpuModeIdle:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"all\",\n\t\t\t\"p2\":   \"idle\",\n\t\t\t\"p3\":   \"avg1\",\n\t\t}\n\tcase CpuModeNice:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"all\",\n\t\t\t\"p2\":   \"nice\",\n\t\t\t\"p3\":   \"avg1\",\n\t\t}\n\tcase CpuModeSteal:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"all\",\n\t\t\t\"p2\":   \"steal\",\n\t\t\t\"p3\":   \"avg1\",\n\t\t}\n\tcase MemorySizeTotal:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"total\",\n\t\t}\n\tcase MemorySizeFree:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"free\",\n\t\t}\n\tcase NetPacketIn, NetPacketOut:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"eth0\",\n\t\t\t\"p2\":   \"packets\",\n\t\t}\n\tcase DiskReadBps, DiskWriteBps:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"vda\", // 以挂盘区分\n\t\t}\n\tcase DiskReadOps, DiskWriteOps:\n\t\ttags = map[string]string{\n\t\t\t\"host\": id,\n\t\t\t\"p1\":   \"vda\",\n\t\t}\n\t}\n\n\treturn TsdbQuery{\n\t\tMetric: fullMetric,\n\t\tTags:   tags,\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tsdbql_template/mysql/mysql.go\n```golang\npackage mysql\n\nconst (\n\tMysql_cpu_used_percent    = \"mysql_cpu_used_percent\"\n\tMysql_memory_used_percent = \"mysql_memory_used_percent\"\n\tMysql_riops               = \"mysql_riops\"\n\tMysql_wiops               = \"mysql_wiops\"\n\tMysql_threads_connected   = \"mysql_threads_connected\"\n\tMysql_threads_running     = \"mysql_threads_running\"\n\tMysql_bytes_received      = \"mysql_bytes_received\"\n\tMysql_bytes_sent          = \"mysql_bytes_sent\"\n\tMysql_qps                 = \"mysql_qps\"\n\tMysql_tps                 = \"mysql_tps\"\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/tsdbql_template/eip/eip.go\n```golang\npackage eip\n\nconst (\n\tEip_band_rate_out = \"eip_band_rate_out\"\n\tEip_band_rate_in  = \"eip_band_rate_in\"\n\tEip_pps_out       = \"eip_pps_out\"\n\tEip_pps_in        = \"eip_pps_in\"\n\tEip_flow_out      = \"eip_flow_out\"\n\tEip_flow_in       = \"eip_flow_in\"\n)\n\nvar (\n\tEip_top_metirc = []string{Eip_band_rate_out, Eip_band_rate_in, Eip_pps_out, Eip_pps_in, Eip_flow_out, Eip_flow_in}\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/init_conf/init.go\n```golang\npackage init_conf\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n)\n\nfunc init() {\n\tpath, _ := os.Getwd()\n\tif err := lib.InitModuleYaml(path+\"/conf/\", []string{\"base\", \"mysql\", \"redis\"}); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t//defer lib.Destroy() //销毁公共变量\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/structure/structure.go\n```golang\npackage structure\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"strings\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype TableColumn struct {\n\tName     string\n\tDataType string\n}\n\n// ConvertTableToStruct 将MySQL表结构转换为结构体\nfunc ConvertTableToStruct(db *sql.DB, tableName string) (string, error) {\n\t// 获取表结构信息\n\tcolumns, err := getTableColumns(db, tableName)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\t// 生成结构体定义\n\tstructDefinition := generateStructDefinition(tableName, columns)\n\treturn structDefinition, nil\n}\n\n// getTableColumns 获取表的列信息\nfunc getTableColumns(db *sql.DB, tableName string) ([]TableColumn, error) {\n\tquery := fmt.Sprintf(\"DESCRIBE %s\", tableName)\n\trows, err := db.Query(query)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tvar columns []TableColumn\n\tfor rows.Next() {\n\t\tvar column TableColumn\n\t\terr := rows.Scan(&column.Name, &column.DataType)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcolumns = append(columns, column)\n\t}\n\treturn columns, nil\n}\n\n// generateStructDefinition 生成结构体定义\nfunc generateStructDefinition(tableName string, columns []TableColumn) string {\n\tstructDefinition := fmt.Sprintf(\"type %s struct {\\n\", tableName)\n\tfor _, column := range columns {\n\t\tstructDefinition += fmt.Sprintf(\"\\t%s %s\\n\", convertToCamelCase(column.Name), convertDataType(column.DataType))\n\t}\n\tstructDefinition += \"}\"\n\treturn structDefinition\n}\n\n// convertToCamelCase 转换列名为驼峰命名法\nfunc convertToCamelCase(columnName string) string {\n\tparts := strings.Split(columnName, \"_\")\n\tfor i := range parts {\n\t\tif i > 0 {\n\t\t\tparts[i] = strings.Title(parts[i])\n\t\t}\n\t}\n\treturn strings.Join(parts, \"\")\n}\n\n// convertDataType 转换MySQL数据类型为Go语言数据类型\nfunc convertDataType(dataType string) string {\n\tswitch dataType {\n\tcase \"int\":\n\t\treturn \"int\"\n\tcase \"bigint\":\n\t\treturn \"int64\"\n\tcase \"float\":\n\t\treturn \"float32\"\n\tcase \"double\":\n\t\treturn \"float64\"\n\tcase \"varchar\", \"text\":\n\t\treturn \"string\"\n\tcase \"datetime\", \"timestamp\":\n\t\treturn \"time.Time\"\n\tdefault:\n\t\treturn \"interface{}\"\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/prom/trace.go\n```golang\npackage prom\n\nimport (\n\t\"context\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/trace\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\toteltrace \"go.opentelemetry.io/otel/trace\"\n)\n\nvar promQlAttributeKey = attribute.Key(\"prom.ql\")\n\nfunc startSpan(ctx context.Context, ql string) (context.Context, oteltrace.Span) {\n\ttracer := trace.TracerFromContext(ctx)\n\tctx, span := tracer.Start(ctx, \"prometheus\", oteltrace.WithSpanKind(oteltrace.SpanKindClient))\n\tspan.SetAttributes(promQlAttributeKey.String(ql))\n\n\treturn ctx, span\n}\n\nfunc endSpan(span oteltrace.Span, err error) {\n\tdefer span.End()\n\n\tif err == nil {\n\t\tspan.SetStatus(codes.Ok, \"\")\n\t\treturn\n\t}\n\n\tspan.SetStatus(codes.Error, err.Error())\n\tspan.RecordError(err)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/prom/redicted.go\n```golang\npackage prom\n\nimport (\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/prometheus/common/model\"\n\t\"math\"\n\t\"strconv\"\n)\n\nfunc LinearPredictionWithPromValue(Values []model.SamplePair, interceptTime int64) (intercept float64, err error) {\n\tif len(Values) < 2 {\n\t\treturn 0, errors.New(\"values length less than 2\")\n\t}\n\n\tsamples := []FPoint{}\n\tfor _, v := range Values {\n\t\tsamples = append(samples, FPoint{\n\t\t\tT: v.Timestamp.Unix(),\n\t\t\tF: float64(v.Value),\n\t\t})\n\t}\n\t_, intercept = linearRegression(samples, interceptTime)\n\treturn intercept, nil\n\n}\n\n// from prometheus  https://github.com/prometheus/prometheus/blob/cef8aca8e8989ced6c1a493a3f3dd5e485206f92/promql/functions.go  965行\n// FPoint represents a single float data point for a given timestamp.\ntype FPoint struct {\n\tT int64\n\tF float64\n}\n\nfunc (p FPoint) String() string {\n\ts := strconv.FormatFloat(p.F, 'f', -1, 64)\n\treturn fmt.Sprintf(\"%s @[%v]\", s, p.T)\n}\n\nfunc kahanSumInc(inc, sum, c float64) (newSum, newC float64) {\n\tt := sum + inc\n\t// Using Neumaier improvement, swap if next term larger than sum.\n\tif math.Abs(sum) >= math.Abs(inc) {\n\t\tc += (sum - t) + inc\n\t} else {\n\t\tc += (inc - t) + sum\n\t}\n\treturn t, c\n}\n\n// linearRegression performs a least-square linear regression analysis on the\n// provided SamplePairs. It returns the slope, and the intercept value at the\n// provided time.\nfunc linearRegression(samples []FPoint, interceptTime int64) (slope, intercept float64) {\n\tvar (\n\t\tn          float64\n\t\tsumX, cX   float64\n\t\tsumY, cY   float64\n\t\tsumXY, cXY float64\n\t\tsumX2, cX2 float64\n\t\tinitY      float64\n\t\tconstY     bool\n\t)\n\tinitY = samples[0].F\n\tconstY = true\n\tfor i, sample := range samples {\n\t\t// Set constY to false if any new y values are encountered.\n\t\tif constY && i > 0 && sample.F != initY {\n\t\t\tconstY = false\n\t\t}\n\t\tn += 1.0\n\t\tx := float64(sample.T-interceptTime) / 1e3\n\t\tsumX, cX = kahanSumInc(x, sumX, cX)\n\t\tsumY, cY = kahanSumInc(sample.F, sumY, cY)\n\t\tsumXY, cXY = kahanSumInc(x*sample.F, sumXY, cXY)\n\t\tsumX2, cX2 = kahanSumInc(x*x, sumX2, cX2)\n\t}\n\tif constY {\n\t\tif math.IsInf(initY, 0) {\n\t\t\treturn math.NaN(), math.NaN()\n\t\t}\n\t\treturn 0, initY\n\t}\n\tsumX += cX\n\tsumY += cY\n\tsumXY += cXY\n\tsumX2 += cX2\n\n\tcovXY := sumXY - sumX*sumY/n\n\tvarX := sumX2 - sumX*sumX/n\n\n\tslope = covXY / varX\n\tintercept = sumY/n - slope*sumX/n\n\treturn slope, intercept\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/prom/common.go\n```golang\npackage prom\n\nimport (\n\t\"github.com/prometheus/common/model\"\n\t\"math\"\n\t\"strings\"\n\t\"time\"\n)\n\n// 一小时的毫秒数\nconst oneHourMsec = 3600 * 1000\n\n// 一些公共处理逻辑的封装方法\n\n// 根据查询时间段长度，确定采样率,避免返回数据点过多\n// 用于线图类查询\nfunc TimeToStep(duration int64) (step time.Duration) {\n\tif duration < 0 {\n\t\treturn 0\n\t}\n\tif duration <= oneHourMsec { //0.5h/1h\n\t\treturn 1 * time.Minute\n\t} else if duration <= (oneHourMsec * 3) { // 3h\n\t\treturn 1 * time.Minute\n\t} else if duration <= (oneHourMsec * 24 * 7) { // 12h 24h 7d\n\t\treturn 1 * time.Hour\n\t} else { // 30d\n\t\treturn 24 * time.Hour\n\t}\n}\n\n// ip:up\ntype MonitorUpStatus map[string]string\n\n// ParseServerMonitoringStatus 服务器监控状态解析\nfunc ParseServerMonitoringStatus(up model.Vector) MonitorUpStatus {\n\n\tipUpMap := make(MonitorUpStatus)\n\tflag := \"down\"\n\tif len(up) > 0 {\n\t\tfor _, v := range up {\n\t\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\t\tv.Value = 0\n\t\t\t}\n\t\t\tif float64(v.Value) == 1 {\n\t\t\t\tflag = \"up\"\n\t\t\t} else {\n\t\t\t\tflag = \"down\"\n\t\t\t}\n\t\t\tinstance := v.Metric[\"instance\"]\n\t\t\tip := strings.Split(string(instance), \":\")[0]\n\t\t\tipUpMap[ip] = flag\n\t\t}\n\t}\n\t//fmt.Println(ipUpMap)\n\treturn ipUpMap\n}\n\n// 解析1个metric的vector值\nfunc ParseOneVectorValue(v model.Vector) float64 {\n\tif len(v) != 1 {\n\t\treturn 0\n\t}\n\tif math.IsNaN(float64(v[0].Value)) {\n\t\treturn 0\n\t}\n\treturn float64(v[0].Value)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/prom/default_client_test.go\n```golang\npackage prom\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n\t\"gonum.org/v1/gonum/stat\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestQuery(t *testing.T) {\n\tresult, err := VectorQuery(context.Background(), `avg by (instance)(up{instance=~\"10.177.15.6:9100\",namespace=\"monitoring\"})`)\n\tif err != nil {\n\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t}\n\tfmt.Printf(\"type %s\", result.Type())\n\tfmt.Printf(\"Result:\\n%+v\\n\", result)\n}\n\nfunc TestQueryRange(t *testing.T) {\n\tr := v1.Range{\n\t\tStart: time.Now().Add(-time.Hour),\n\t\tEnd:   time.Now(),\n\t\tStep:  time.Minute,\n\t}\n\tresult, err := MatrixQuery(context.Background(), `rate(prometheus_tsdb_head_samples_appended_total[5m])`, r)\n\tif err != nil {\n\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t}\n\tfmt.Printf(\"type %s\", result.Type())\n\tfmt.Printf(\"Result:\\n%+v\\n\", result)\n}\n\nfunc TestPredictLinear(t *testing.T) {\n\tr := v1.Range{\n\t\tStart: time.Now().Add(-time.Hour),\n\t\tEnd:   time.Now(),\n\t\tStep:  time.Minute,\n\t}\n\t//最近5m数据,预测1h之后的数据\n\tresult, err := MatrixQuery(context.Background(), `predict_linear(prometheus_tsdb_head_samples_appended_total[5m], 3600)`, r)\n\tif err != nil {\n\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t}\n\tfmt.Printf(\"type %s\", result.Type())\n\tfmt.Printf(\"Result:\\n%+v\\n\", result[0].Values[0])\n}\n\nfunc TestPredictLinearMy(t *testing.T) {\n\tr := v1.Range{\n\t\tStart: time.Now().Add(-time.Hour),\n\t\tEnd:   time.Now(),\n\t\tStep:  time.Minute,\n\t}\n\t//最近5m数据,预测1h之后的数据\n\tresult, err := MatrixQuery(context.Background(), `predict_linear(prometheus_tsdb_head_samples_appended_total[1h], 3600)`, r)\n\tif err != nil {\n\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t}\n\tfmt.Printf(\"type %s\", result.Type())\n\tfmt.Printf(\"Result:\\n%+v\\n\", result[0])\n\n\tfmt.Printf(\"predict_linear:\\n%+v\\n\", result[0].Values[0])\n\n\tresult, err = MatrixQuery(context.Background(), `prometheus_tsdb_head_samples_appended_total`, r)\n\tif err != nil {\n\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t}\n\n\tinterceptTime := time.Now().Add(time.Hour).Unix()\n\tintercept, err := LinearPredictionWithPromValue(result[0].Values, interceptTime)\n\tif err != nil {\n\t\tfmt.Printf(\"Error LinearPredictionWithPromValue: %v\\n\", err)\n\t}\n\n\tfmt.Printf(\"interceptTime:\\n%+v\\n\", interceptTime)\n\tfmt.Printf(\"intercept:\\n%+v\\n\", intercept)\n}\n\n// 线性回归函数方法测试\nfunc TestLinearRegression(t *testing.T) {\n\t// Positive test case\n\tsamples := []FPoint{\n\t\t{1, 2},\n\t\t{2, 4},\n\t\t{3, 6},\n\t}\n\tinterceptTime := int64(4)\n\texpectedIntercept := float64(8)\n\n\t_, intercept := linearRegression(samples, interceptTime)\n\tif intercept != expectedIntercept {\n\t\tt.Errorf(\"Expected intercept: %f, got: %f\", expectedIntercept, intercept)\n\t}\n\n\t// Negative test case\n\t// Empty samples\n\temptySamples := []FPoint{}\n\temptyExpectedSlope := float64(0)\n\temptyExpectedIntercept := float64(0)\n\n\temptySlope, emptyIntercept := linearRegression(emptySamples, interceptTime)\n\n\tif emptySlope != emptyExpectedSlope {\n\t\tt.Errorf(\"Expected slope: %f, got: %f\", emptyExpectedSlope, emptySlope)\n\t}\n\n\tif emptyIntercept != emptyExpectedIntercept {\n\t\tt.Errorf(\"Expected intercept: %f, got: %f\", emptyExpectedIntercept, emptyIntercept)\n\t}\n}\n\nfunc TestMyLinearRegression(t *testing.T) {\n\t// 自变量 x 和因变量 y 的观测值\n\tx := []float64{1, 2, 3, 4, 5}\n\ty := []float64{2, 4, 6, 8, 10}\n\n\t// 计算 x 和 y 的均值\n\tmeanX, meanY := stat.Mean(x, nil), stat.Mean(y, nil)\n\n\t// 计算斜率 beta1\n\tvar ssXX, ssXY float64\n\tfor i := range x {\n\t\tssXX += (x[i] - meanX) * (x[i] - meanX)\n\t\tssXY += (x[i] - meanX) * (y[i] - meanY)\n\t}\n\n\t// 斜率\n\tbeta1 := ssXY / ssXX\n\n\t// 计算截距 beta0\n\tbeta0 := meanY - beta1*meanX\n\n\tfmt.Printf(\"线性回归模型为: y = %.2f + %.2fx\\n\", beta0, beta1)\n\n\t// 使用模型预测新的 x 值\n\tnewX := 6.0\n\tpredictedY := beta0 + beta1*newX\n\tfmt.Printf(\"当 x = %.2f 时，预测的 y 值为: %.2f\\n\", newX, predictedY)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/prom/default_client.go\n```golang\npackage prom\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t_ \"ezone.ksyun.com/ezone/luban/monitor/common/init_conf\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\n\t\"github.com/prometheus/client_golang/api\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n\t\"github.com/prometheus/common/model\"\n)\n\nconst timeOut = 5 * time.Second\n\nvar defaultClient = DefaultPromQueryApi()\n\nfunc DefaultPromQueryApi() v1.API {\n\tpromConfig := api.Config{}\n\tendpoint := lib.GetStringConf(\"base.prometheus.endpoint\")\n\t//endpoint := \"http://prometheus.luban.galaxy.cloud\"\n\tpromConfig.Address = endpoint\n\tclient, err := api.NewClient(promConfig)\n\tif err != nil {\n\t\tlog.Fatalf(\"init prometheus client addr %s,  error %v : \", endpoint, err)\n\t}\n\treturn v1.NewAPI(client)\n}\n\n// 向量结果查询，一个时间点\nfunc VectorQuery(ctx context.Context, query string) (v model.Vector, err error) {\n\tctx, span := startSpan(ctx, query)\n\tdefer endSpan(span, err)\n\n\t//fmt.Printf(\"DEBUG - prometheus query sql: %s\\n\", query)\n\n\t//提前1s,避免当前时间查不到数据\n\tt := time.Now().Add(time.Second * -1)\n\t//time.Now()\n\tvalue, warnings, err := defaultClient.Query(ctx, query, t, v1.WithTimeout(timeOut))\n\tif err != nil {\n\t\tfmt.Printf(\"prometheus query sql: %s, error: %v\", query, err)\n\t\treturn\n\t}\n\tif len(warnings) > 0 {\n\t\tfmt.Printf(\"prometheus query sql: %s, warnings: %v\", query, warnings)\n\t}\n\tv, _ = value.(model.Vector)\n\treturn\n}\n\n// 矩阵数据查询,多个时间点\nfunc MatrixQuery(ctx context.Context, query string, r v1.Range) (v model.Matrix, err error) {\n\tctx, span := startSpan(ctx, query)\n\tdefer endSpan(span, err)\n\t//fmt.Printf(\"DEBUG - prometheus query time : %+v,  sql: %s\\n\", r, query)\n\n\tvalue, warnings, err := defaultClient.QueryRange(ctx, query, r, v1.WithTimeout(timeOut))\n\tif err != nil {\n\t\tfmt.Printf(\"prometheus query sql: %s, error: %v\", query, err)\n\t\treturn\n\t}\n\tif len(warnings) > 0 {\n\t\tfmt.Printf(\"prometheus query sql: %s, warnings: %v\", query, warnings)\n\t}\n\tv, _ = value.(model.Matrix)\n\treturn\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/ks3/ks3-client.go\n```golang\npackage client\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t_ \"ezone.ksyun.com/ezone/luban/monitor/common/init_conf\"\n\t\"fmt\"\n\t\"github.com/ks3sdklib/aws-sdk-go/aws\"\n\t\"github.com/ks3sdklib/aws-sdk-go/aws/credentials\"\n\t\"github.com/ks3sdklib/aws-sdk-go/service/s3\"\n\t\"k8s.io/klog/v2\"\n\t\"time\"\n)\n\nvar ks3Client = Ks3Api()\n\nfunc Ks3Api() *s3.S3 {\n\n\tregion := lib.GetStringConf(\"base.ks3.region\")\n\tendpoint := lib.GetStringConf(\"base.ks3.endpoint\")\n\tak := lib.GetStringConf(\"base.ks3.ak\")\n\tsk := lib.GetStringConf(\"base.ks3.sk\")\n\n\tklog.Info(\"Ks3ApiRegion\", region)\n\tklog.Info(\"Ks3ApiEndpoint\", endpoint)\n\tklog.Info(\"Ks3ApiAk\", region)\n\tklog.Info(\"Ks3ApiSk\", endpoint)\n\n\tcre := credentials.NewStaticCredentials(ak, sk, \"\")\n\tclient1 := s3.New(&aws.Config{\n\t\t//Region 可参考 https://docs.ksyun.com/documents/6761\n\t\tRegion:      region,\n\t\tCredentials: cre,\n\t\t//Endpoint 可参考 https://docs.ksyun.com/documents/6761\n\t\tEndpoint:         endpoint,\n\t\tDisableSSL:       true,  //是否禁用https\n\t\tLogLevel:         0,     //是否开启日志,0为关闭日志，1为开启日志\n\t\tLogHTTPBody:      false, //是否把HTTP请求body打入日志\n\t\tS3ForcePathStyle: false,\n\t\tLogger:           nil, //打日志的位置\n\t\t//DomainMode:       false, //是否开启自定义bucket绑定域名，当开启时 S3ForcePathStyle 参数不生效。\n\t\t//可选值有 ： V2 OR V4 OR V4_UNSIGNED_PAYLOAD_SIGNER\n\t\t//SignerVersion: \"V4\",\n\t\tMaxRetries: 1,\n\t})\n\n\treturn client1\n}\n\nfunc GetObjectInputs(key, fileName string) string {\n\n\tbucket := lib.GetStringConf(\"base.Ks3.bucket\")\n\n\tfilesName := fmt.Sprintf(\"attachment; filename=%s\", fileName)\n\tparams := &s3.GetObjectInput{\n\t\tBucket:                     aws.String(bucket), // bucket名称\n\t\tKey:                        aws.String(key),    // object key\n\t\tResponseContentDisposition: aws.String(filesName),\n\t}\n\ttimeUnixNano := time.Duration(time.Now().UnixNano() + int64(24*time.Hour))\n\n\tresp, err := ks3Client.GetObjectPresignedUrl(params, timeUnixNano)\n\n\t//第二个参数为外链过期时间，为纳秒级的时间戳\n\tif err != nil {\n\t\tklog.Errorf(\"get log download fdil \", err)\n\t}\n\treturn resp.String()\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/alert/alert_client.go\n```golang\npackage alert\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t_ \"ezone.ksyun.com/ezone/luban/monitor/common/init_conf\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\n\t\"github.com/prometheus/alertmanager/api/v2/client\"\n\t\"github.com/prometheus/alertmanager/api/v2/client/alert\"\n\t\"github.com/prometheus/alertmanager/api/v2/models\"\n)\n\nconst (\n\tTimeOut = 1 * time.Second\n)\n\ntype AlertClient struct {\n\tapiClient *client.AlertmanagerAPI\n}\n\nvar defaultAlertClient = NewAlertClient()\n\nfunc NewAlertClient() *AlertClient {\n\treturn &AlertClient{\n\t\tapiClient: defaultAlertManager(),\n\t}\n}\n\nfunc GetAlerts(params *alert.GetAlertsParams) (models.GettableAlerts, error) {\n\tctx, cancel := context.WithTimeout(context.TODO(), TimeOut)\n\tdefer cancel()\n\tparams.Context = ctx\n\treturn defaultAlertClient.GetAlerts(params)\n}\n\nfunc defaultAlertManager() *client.AlertmanagerAPI {\n\tconfig := client.TransportConfig{}\n\tendpoint := lib.GetStringConf(\"base.alert_manager.endpoint\")\n\t//endpoint := \"alert.luban.galaxy.cloud\"\n\tconfig.Host = endpoint\n\tconfig.BasePath = \"/api/v2\"\n\tclientAlert := client.NewHTTPClientWithConfig(nil, &config)\n\n\treturn clientAlert\n}\nfunc (ac *AlertClient) GetAlerts(params *alert.GetAlertsParams) (models.GettableAlerts, error) {\n\tres, err := ac.apiClient.Alert.GetAlerts(params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif res == nil {\n\t\treturn nil, err\n\t}\n\treturn res.Payload, err\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/alert/common.go\n```golang\npackage alert\n\nimport (\n\t\"github.com/prometheus/alertmanager/api/v2/client/alert\"\n\t\"github.com/prometheus/alertmanager/api/v2/models\"\n\t\"k8s.io/klog/v2\"\n)\n\n// 一些公共处理逻辑的封装方法\n\nfunc CountAlertsNumOld(alerts models.GettableAlerts, poolTye, severity string) int {\n\tif alerts == nil || len(alerts) == 0 {\n\t\treturn 0\n\t}\n\tcntAlerts := make(models.GettableAlerts, 0)\n\n\tfor _, alt := range alerts {\n\t\tlevel := (*alt).Labels[\"severity\"]\n\t\tif level != \"p0\" && level != \"p1\" && level != \"p2\" && level != \"p3\" {\n\t\t\tcontinue\n\t\t}\n\t\tif (*alt).Labels[\"lubanAlarmView\"] == \"\" && (*alt).Labels[\"lubanPolicyName\"] == \"\" && (*alt).Annotations[\"lubanExpressionWithChinese\"] == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tif poolTye != \"\" && (*alt).Labels[\"lubanResourceSubType\"] != poolTye {\n\t\t\tcontinue\n\t\t}\n\t\tif severity != \"\" && level != severity {\n\t\t\tcontinue\n\t\t}\n\t\tcntAlerts = append(cntAlerts, alt)\n\t}\n\treturn len(cntAlerts)\n}\n\nfunc CountAlertsNum(alerts models.GettableAlerts, poolTye, severity string) int {\n\tif alerts == nil || len(alerts) == 0 {\n\t\treturn 0\n\t}\n\tcntAlerts := make(models.GettableAlerts, 0)\n\tfor _, alt := range alerts {\n\t\tlevel := (*alt).Labels[\"level\"]\n\t\tif level != \"p0\" && level != \"p1\" && level != \"p2\" && level != \"p3\" {\n\t\t\tcontinue\n\t\t}\n\t\t//只保留gms告警策略创建出来的告警\n\t\tif (*alt).Labels[\"policy_id\"] == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\t//if (*alt).Labels[\"lubanAlarmView\"] == \"\" && (*alt).Labels[\"lubanPolicyName\"] == \"\" && (*alt).Annotations[\"lubanExpressionWithChinese\"] == \"\" {\n\t\t//\tcontinue\n\t\t//}\n\t\tif poolTye != \"\" && (*alt).Labels[\"resource_sub_type\"] != poolTye {\n\t\t\tcontinue\n\t\t}\n\t\tif severity != \"\" && level != severity {\n\t\t\tcontinue\n\t\t}\n\t\tcntAlerts = append(cntAlerts, alt)\n\t}\n\treturn len(cntAlerts)\n}\n\n// CountAlertsListNum 获取服务器交换机对应告警数\nfunc CountAlertsListNum(alerts models.GettableAlerts, resource_sub_type string) map[string]int {\n\tif alerts == nil || len(alerts) == 0 {\n\t\treturn nil\n\t}\n\tres := make(map[string]int)\n\tfor _, alt := range alerts {\n\t\tlevel := (*alt).Labels[\"level\"]\n\t\t//只保留 p0  p1 p2 p3 级别告警\n\t\tif level != \"p0\" && level != \"p1\" && level != \"p2\" && level != \"p3\" {\n\t\t\tcontinue\n\t\t}\n\t\t//只保留gms告警策略创建出来的告警\n\t\tif (*alt).Labels[\"policy_id\"] == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tvar hostName string\n\t\tif resource_sub_type == \"physicalServer\" || resource_sub_type == \"physicalSwitch\" { //服务器 交换机\n\t\t\thostName = (*alt).Labels[\"hostname\"]\n\t\t}\n\t\tif ins, ok := res[hostName]; ok {\n\t\t\tres[hostName] = ins + 1\n\t\t} else {\n\t\t\tres[hostName] = 1\n\t\t}\n\n\t}\n\treturn res\n}\n\nfunc GetAlertsByFilter(filter []string) (models.GettableAlerts, error) {\n\tvar silenced bool = false\n\tvar inhibited bool = false\n\tvar active bool = true\n\n\tparams := &alert.GetAlertsParams{\n\t\tSilenced:  &silenced,\n\t\tActive:    &active,\n\t\tInhibited: &inhibited,\n\t\tFilter:    filter,\n\t}\n\tres, err := GetAlerts(params)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn make(models.GettableAlerts, 0), err\n\t}\n\treturn res, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/alert/alert_client_test.go\n```golang\npackage alert\n\nimport (\n\t\"context\"\n\t\"github.com/prometheus/alertmanager/api/v2/client/alert\"\n\t\"k8s.io/klog/v2\"\n\t\"testing\"\n)\n\nfunc TestAlertClient_GetAlerts(t *testing.T) {\n\tvar silenced bool = false\n\tvar inhibited bool = false\n\tvar active bool = true\n\tctx, cancel := context.WithTimeout(context.TODO(), TimeOut)\n\tdefer cancel()\n\tparams := &alert.GetAlertsParams{\n\t\tSilenced:  &silenced,\n\t\tActive:    &active,\n\t\tInhibited: &inhibited,\n\t\tContext:   ctx,\n\t\tFilter:    []string{\"lubanAlarmView=端口状态\"},\n\t}\n\tres, err := defaultAlertClient.GetAlerts(params)\n\tif err != nil {\n\t\tklog.Error(err)\n\t}\n\tklog.Infof(\"res:%#v\", res)\n\t// for _, v := range labels {\n\t// \tfmt.Println(\"key=\", v.Metric[\"groupname\"], \"value=\", v.Value)\n\t// }\n\t// tests := []struct {\n\t// \tname    string\n\t// \tac      *AlertClient\n\t// \twant    *alert.GetAlertsOK\n\t// \twantErr bool\n\t// }{\n\t// \t// TODO: Add test cases.\n\t// }\n\t// for _, tt := range tests {\n\t// \tt.Run(tt.name, func(t *testing.T) {\n\t// \t\tgot, err := tt.ac.GetAlerts()\n\t// \t\tif (err != nil) != tt.wantErr {\n\t// \t\t\tt.Errorf(\"AlertClient.GetAlerts() error = %v, wantErr %v\", err, tt.wantErr)\n\t// \t\t\treturn\n\t// \t\t}\n\t// \t\tif !reflect.DeepEqual(got, tt.want) {\n\t// \t\t\tt.Errorf(\"AlertClient.GetAlerts() = %v, want %v\", got, tt.want)\n\t// \t\t}\n\t// \t})\n\t// }\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/k8s/inner-client.go\n```golang\npackage client\n\nimport (\n\t\"fmt\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/rest\"\n)\n\nvar (\n\tInnerClient *kubernetes.Clientset\n\tRestConfig  *rest.Config\n)\n\nfunc GetClient() *kubernetes.Clientset {\n\tif InnerClient != nil {\n\t\treturn InnerClient\n\t} else {\n\t\treturn initClient()\n\t}\n}\nfunc GetToken() string {\n\tif RestConfig == nil {\n\t\tRestConfig, _ = rest.InClusterConfig()\n\t}\n\treturn RestConfig.BearerToken\n}\n\nfunc initClient() *kubernetes.Clientset {\n\n\tconfig, err := rest.InClusterConfig()\n\n\tif err != nil {\n\t\tfmt.Printf(\"init k8s inner client error: %v\\n\", err.Error())\n\t\treturn nil\n\t}\n\t// creates the clientset\n\tclientset, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tfmt.Printf(\"get k8s inner client set error: %v\\n\", err.Error())\n\t\treturn nil\n\t}\n\treturn clientset\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/grpcx/conn.go\n```golang\npackage grpcx\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx/clientinterceptors\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/timeout\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"time\"\n)\n\nconst timeOut = 30 * time.Second\n\nfunc NewGrpcClientConn(addr string) (*grpc.ClientConn, error) {\n\n\tclientKeepaliveParams := keepalive.ClientParameters{\n\t\tTime:                10 * time.Second, // send pings every 10 seconds if there is no activity\n\t\tTimeout:             timeOut,          // wait 5 second for ping ack before considering the connection dead\n\t\tPermitWithoutStream: false,\n\t}\n\n\tchainUnaryInterceptor := grpc.WithChainUnaryInterceptor(\n\t\tclientinterceptors.UnaryTracingInterceptor, //otl trace\n\t\ttimeout.UnaryClientInterceptor(timeOut),    //timeout\n\t)\n\n\tkb := 1024\n\tmb := 1024 * kb\n\n\tconn, err := grpc.Dial(addr,\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t\tgrpc.WithKeepaliveParams(clientKeepaliveParams),\n\t\tchainUnaryInterceptor,\n\t\tgrpc.WithDefaultCallOptions(\n\t\t\tgrpc.MaxCallRecvMsgSize(1000*mb),\n\t\t\tgrpc.MaxCallSendMsgSize(1000*mb),\n\t\t),\n\t)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagTCPFailed, map[string]interface{}{\"connect grpc server  error\": err.Error(), \"addr\": addr})\n\t\treturn nil, err\n\t}\n\treturn conn, err\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/grpcx/clientinterceptors/client_trace.go\n```golang\npackage clientinterceptors\n\nimport (\n\t\"context\"\n\tztrace \"ezone.ksyun.com/ezone/luban/monitor/common/trace\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/grpc\"\n\tgcodes \"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n)\n\n// UnaryTracingInterceptor returns a grpc.UnaryClientInterceptor for opentelemetry.\nfunc UnaryTracingInterceptor(ctx context.Context, method string, req, reply any,\n\tcc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n\tctx, span := startSpan(ctx, method, cc.Target())\n\tdefer span.End()\n\n\tztrace.MessageSent.Event(ctx, 1, req)\n\terr := invoker(ctx, method, req, reply, cc, opts...)\n\tztrace.MessageReceived.Event(ctx, 1, reply)\n\tif err != nil {\n\t\ts, ok := status.FromError(err)\n\t\tif ok {\n\t\t\tspan.SetStatus(codes.Error, s.Message())\n\t\t\tspan.SetAttributes(ztrace.StatusCodeAttr(s.Code()))\n\t\t} else {\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\treturn err\n\t}\n\n\tspan.SetAttributes(ztrace.StatusCodeAttr(gcodes.OK))\n\treturn nil\n}\n\nfunc startSpan(ctx context.Context, method, target string) (context.Context, trace.Span) {\n\tmd, ok := metadata.FromOutgoingContext(ctx)\n\tif !ok {\n\t\tmd = metadata.MD{}\n\t}\n\ttr := otel.Tracer(ztrace.TraceName)\n\tname, attr := ztrace.SpanInfo(method, target)\n\tctx, span := tr.Start(ctx, name, trace.WithSpanKind(trace.SpanKindClient),\n\t\ttrace.WithAttributes(attr...))\n\tztrace.Inject(ctx, otel.GetTextMapPropagator(), &md)\n\tctx = metadata.NewOutgoingContext(ctx, md)\n\n\treturn ctx, span\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/grpcx/serverinterceptors/server_trace.go\n```golang\npackage serverinterceptors\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\tztrace \"ezone.ksyun.com/ezone/luban/monitor/common/trace\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/baggage\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/grpc\"\n\tgcodes \"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n)\n\n// UnaryTracingInterceptor is a grpc.UnaryServerInterceptor for opentelemetry.\nfunc UnaryTracingInterceptor(ctx context.Context, req any, info *grpc.UnaryServerInfo,\n\thandler grpc.UnaryHandler) (any, error) {\n\tctx, span := startSpan(ctx, info.FullMethod)\n\tdefer span.End()\n\n\tztrace.MessageReceived.Event(ctx, 1, req)\n\tresp, err := handler(ctx, req)\n\tif err != nil {\n\t\ts, ok := status.FromError(err)\n\t\tif ok {\n\t\t\tspan.SetStatus(codes.Error, s.Message())\n\t\t\tspan.SetAttributes(ztrace.StatusCodeAttr(s.Code()))\n\t\t\tztrace.MessageSent.Event(ctx, 1, s.Proto())\n\t\t} else {\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\treturn nil, err\n\t}\n\n\tspan.SetAttributes(ztrace.StatusCodeAttr(gcodes.OK))\n\tztrace.MessageSent.Event(ctx, 1, resp)\n\n\treturn resp, nil\n}\n\nfunc startSpan(ctx context.Context, method string) (context.Context, trace.Span) {\n\tmd, ok := metadata.FromIncomingContext(ctx)\n\tif !ok {\n\t\tmd = metadata.MD{}\n\t}\n\n\tfmt.Printf(\"DEBUG - %+v\\n\", md)\n\n\tbags, spanCtx := ztrace.Extract(ctx, otel.GetTextMapPropagator(), &md)\n\tctx = baggage.ContextWithBaggage(ctx, bags)\n\ttr := otel.Tracer(ztrace.TraceName)\n\tname, attr := ztrace.SpanInfo(method, ztrace.PeerFromCtx(ctx))\n\n\treturn tr.Start(trace.ContextWithRemoteSpanContext(ctx, spanCtx), name,\n\t\ttrace.WithSpanKind(trace.SpanKindServer), trace.WithAttributes(attr...))\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/opentsdb/trace.go\n```golang\npackage opentsdb\n\nimport (\n\t\"context\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/trace\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\toteltrace \"go.opentelemetry.io/otel/trace\"\n)\n\nvar tsdbQlAttributeKey = attribute.Key(\"tsdb.query\")\n\nfunc startSpan(ctx context.Context, query string) (context.Context, oteltrace.Span) {\n\ttracer := trace.TracerFromContext(ctx)\n\tctx, span := tracer.Start(ctx, \"tsdb\", oteltrace.WithSpanKind(oteltrace.SpanKindClient))\n\tspan.SetAttributes(tsdbQlAttributeKey.String(query))\n\n\treturn ctx, span\n}\n\nfunc endSpan(span oteltrace.Span, err error) {\n\tdefer span.End()\n\n\tif err == nil {\n\t\tspan.SetStatus(codes.Ok, \"\")\n\t\treturn\n\t}\n\n\tspan.SetStatus(codes.Error, err.Error())\n\tspan.RecordError(err)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/opentsdb/common.go\n```golang\npackage opentsdb\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// 一小时的毫秒数\nconst oneHourMsec = 3600 * 1000\n\n// 一些公共处理逻辑的封装方法\n\n// 根据查询时间段长度，确定采样率,避免返回数据点过多\n// 用于线图类查询\nfunc TimeToDownsample(duration int64) (downsample string) {\n\tif duration >= 0 {\n\t\tif duration <= oneHourMsec/2 { //0.5h\n\t\t\treturn \"1m-avg-zero\"\n\t\t} else if duration <= (oneHourMsec * 1) { //1h\n\t\t\treturn \"5m-avg-zero\"\n\t\t} else if duration <= (oneHourMsec * 3) { // 3h\n\t\t\treturn \"10m-avg-zero\"\n\t\t} else if duration <= (oneHourMsec * 24 * 7) { // 12h 24h 7d\n\t\t\treturn \"1h-avg-zero\"\n\t\t} else { // 30d\n\t\t\treturn \"1d-avg-zero\"\n\t\t}\n\t}\n\treturn \"\"\n}\n\n// 1.计算时间间隔\nfunc ParseTimeInterval(start, end int64) string {\n\tvar intervalStr string\n\tvar interval int64\n\tinterval = end - start\n\tfmt.Printf(\"DEBUG: interval:%d\\n\", interval)\n\tswitch interval {\n\tcase oneHourMsec / 2:\n\t\tintervalStr = \"0.5h\"\n\tcase oneHourMsec * 1:\n\t\tintervalStr = \"1h\"\n\tcase oneHourMsec * 3:\n\t\tintervalStr = \"3h\"\n\tcase oneHourMsec * 12:\n\t\tintervalStr = \"12h\"\n\tcase oneHourMsec * 24:\n\t\tintervalStr = \"1d\"\n\tcase oneHourMsec * 24 * 7:\n\t\tintervalStr = \"7d\"\n\tcase oneHourMsec * 24 * 30:\n\t\tintervalStr = \"30d\"\n\t}\n\treturn intervalStr\n}\n\n// 根据间隔时间,计算从现在到之前的时间区间\nfunc ParseTimeFromIntervalStr(interval string) (start, end int64) {\n\tend = time.Now().UnixMilli()\n\tswitch interval {\n\tcase \"0.5h\":\n\t\tstart = end - oneHourMsec/2\n\tcase \"1h\":\n\t\tstart = end - oneHourMsec*1\n\tcase \"3h\":\n\t\tstart = end - oneHourMsec*3\n\tcase \"12h\":\n\t\tstart = end - oneHourMsec*12\n\tcase \"1d\":\n\t\tstart = end - oneHourMsec*24\n\tcase \"7d\":\n\t\tstart = end - oneHourMsec*24*7\n\tcase \"30d\":\n\t\tstart = end - oneHourMsec*24*30\n\t}\n\treturn start, end\n}\n\n// 根据时间间隔,计算Top计算时的采样率\n// 用于top类数据计算\nfunc ParseTopDownsampleFromIntervalStr(interval string) string {\n\tswitch interval {\n\tcase \"0.5h\":\n\t\treturn \"30m-avg-zero\"\n\tcase \"1h\":\n\t\treturn \"1h-avg-zero\"\n\tcase \"3h\":\n\t\treturn \"3h-avg-zero\"\n\tcase \"12h\":\n\t\treturn \"12h-avg-zero\"\n\tcase \"1d\":\n\t\treturn \"1d-avg-zero\"\n\tcase \"7d\":\n\t\treturn \"7d-avg-zero\"\n\tcase \"30d\":\n\t\treturn \"30d-avg-zero\"\n\t}\n\treturn \"\"\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/opentsdb/default_client_test.go\n```golang\npackage opentsdb\n\nimport (\n\t\"context\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb/pkg\"\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestOpenTSDB(t *testing.T) {\n\n\tctx := context.Background()\n\t//\n\terr := Ping(ctx, \"cn-shanghai-2\")\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\n\tname := []string{\"cpu\"}\n\ttags := make(map[string]string)\n\tst1 := time.Now().Unix()\n\ttime.Sleep(1 * time.Second)\n\n\t// st2 = st1 after 1 second\n\tst2 := time.Now().Unix()\n\tqueryParam := pkg.QueryParam{\n\t\tStart: st1,\n\t\tEnd:   st2,\n\t}\n\tsubqueries := make([]pkg.SubQuery, 0)\n\tfor _, metric := range name {\n\t\tsubQuery := pkg.SubQuery{\n\t\t\tAggregator: \"sum\",\n\t\t\tMetric:     metric,\n\t\t\tTags:       tags,\n\t\t}\n\t\tsubqueries = append(subqueries, subQuery)\n\t}\n\tqueryParam.Queries = subqueries\n\tif queryResp, err := Query(ctx, \"cn-shanghai-2\", queryParam); err != nil {\n\t\tfmt.Printf(\"Error occurs when querying: %v\", err)\n\t} else {\n\t\tfmt.Printf(\"%s\", queryResp.String())\n\t}\n\tfmt.Println(\"Finish testing POST /api/query.\")\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/opentsdb/default_client.go\n```golang\npackage opentsdb\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb/pkg\"\n\t_ \"ezone.ksyun.com/ezone/luban/monitor/common/init_conf\"\n\t\"github.com/pkg/errors\"\n\t\"golang.org/x/time/rate\"\n)\n\nconst (\n\t//每秒请求数，令牌桶token每秒进入数量\n\tcountPerSecond = 200\n\n\t//最大请求数, 令牌桶容量\n\tmaxCount = 200\n\n\t//排队最大等待时间\n\twaitTimeOut = 10 * time.Second\n)\n\nvar (\n\tregionClientPool = NewMultiRegionClients()\n\tnoClientErr      = errors.New(\"no client are available\")\n)\n\ntype (\n\tLimitClient struct {\n\t\tlimiter *rate.Limiter\n\t\tpkg.Client\n\t}\n)\n\nfunc NewMultiRegionClients() map[string]*LimitClient {\n\tpool := make(map[string]*LimitClient)\n\tregionToEndpoint := lib.GetStringMapStringConf(\"base.opentsdb\")\n\tfor region, endpoint := range regionToEndpoint {\n\t\tif c := NewClient(endpoint); c != nil {\n\t\t\tpool[region] = c\n\t\t}\n\t}\n\treturn pool\n}\n\nfunc NewClient(host string) *LimitClient {\n\n\topentsdbCfg := pkg.OpenTSDBConfig{\n\t\tOpentsdbHost: host,\n\t}\n\t//默认请求超时5s\n\tclient, err := pkg.NewClient(opentsdbCfg)\n\tif err != nil {\n\t\tlog.Fatalf(\"new opentsdb client error: %v\\n\", err)\n\t\treturn nil\n\t}\n\n\t//设置client limiter\n\tlimiter := rate.NewLimiter(countPerSecond, maxCount)\n\n\treturn &LimitClient{\n\t\tlimiter: limiter,\n\t\tClient:  client,\n\t}\n}\n\nfunc Ping(ctx context.Context, region string) (err error) {\n\tctx, span := startSpan(ctx, \"ping\")\n\tdefer endSpan(span, err)\n\n\tclient, err := getClientByRegion(region)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn client.Ping()\n}\n\n// 实时类接口无限流,避免因排队等待导致页面加载超时\n\nfunc Query(ctx context.Context, region string, param pkg.QueryParam) (*pkg.QueryResponse, error) {\n\tvar err error\n\tctx, span := startSpan(ctx, \"Query\")\n\tdefer endSpan(span, err)\n\n\tclient, err := getClientByRegion(region)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn client.Query(param)\n}\n\nfunc QueryLast(ctx context.Context, region string, param pkg.QueryLastParam) (*pkg.QueryLastResponse, error) {\n\tvar err error\n\tctx, span := startSpan(ctx, \"QueryLast\")\n\tdefer endSpan(span, err)\n\n\tclient, err := getClientByRegion(region)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn client.QueryLast(param)\n}\n\n// top类任务使用限流查询,避免并发请求过多\n\nfunc QueryWithLimiter(ctx context.Context, region string, param pkg.QueryParam) (*pkg.QueryResponse, error) {\n\tvar err error\n\tctx, span := startSpan(ctx, \"QueryWithLimiter\")\n\tdefer endSpan(span, err)\n\n\tclient, err := getClientByRegion(region)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 等待直到有一个可用的令牌\n\tif err = client.limiter.Wait(context.Background()); err != nil {\n\t\tlog.Printf(\"limiter wait error: %v\\n\", err)\n\t\treturn nil, err\n\t}\n\treturn client.Query(param)\n}\n\nfunc QueryLastWithLimiter(ctx context.Context, region string, param pkg.QueryLastParam) (*pkg.QueryLastResponse, error) {\n\tvar err error\n\tctx, span := startSpan(ctx, \"QueryLastWithLimiter\")\n\tdefer endSpan(span, err)\n\n\tclient, err := getClientByRegion(region)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 等待直到有一个可用的令牌\n\tif err = client.limiter.Wait(context.Background()); err != nil {\n\t\tlog.Printf(\"limiter wait error: %v\\n\", err)\n\t\treturn nil, err\n\t}\n\treturn client.QueryLast(param)\n}\n\nfunc getClientByRegion(region string) (*LimitClient, error) {\n\tclient, ok := regionClientPool[region]\n\tif !ok {\n\t\treturn nil, noClientErr\n\t}\n\treturn client, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/opentsdb/pkg/query.go\n```golang\n// Copyright 2015 opentsdb-goclient authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//\thttp://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Package client defines the client and the corresponding\n// rest api implementaion of OpenTSDB.\n//\n// query.go contains the structs and methods for the implementation of /api/query.\npackage pkg\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// QueryParam is the structure used to hold\n// the querying parameters when calling /api/query.\n// Each attributes in QueryParam matches the definition in\n// (http://opentsdb.net/docs/build/html/api_http/query/index.html).\ntype QueryParam struct {\n\t// The start time for the query. This can be a relative or absolute timestamp.\n\t// The data type can only be string, int, or int64.\n\t// The value is required with non-zero value of the target type.\n\tStart interface{} `json:\"start\"`\n\n\t// An end time for the query. If not supplied, the TSD will assume the local\n\t// system time on the server. This may be a relative or absolute timestamp.\n\t// The data type can only be string, or int64.\n\t// The value is optional.\n\tEnd interface{} `json:\"end,omitempty\"`\n\n\t// One or more sub queries used to select the time series to return.\n\t// These may be metric m or TSUID tsuids queries\n\t// The value is required with at least one element\n\tQueries []SubQuery `json:\"queries\"`\n\n\t// An optional value is used to show whether or not to return annotations with a query.\n\t// The default is to return annotations for the requested timespan but this flag can disable the return.\n\t// This affects both local and global notes and overrides globalAnnotations\n\tNoAnnotations bool `json:\"noAnnotations,omitempty\"`\n\n\t// An optional value is used to show whether or not the query should retrieve global\n\t// annotations for the requested timespan.\n\tGlobalAnnotations bool `json:\"globalAnnotations,omitempty\"`\n\n\t// An optional value is used to show whether or not to output data point timestamps in milliseconds or seconds.\n\t// If this flag is not provided and there are multiple data points within a second,\n\t// those data points will be down sampled using the query's aggregation function.\n\tMsResolution bool `json:\"msResolution,omitempty\"`\n\n\t// An optional value is used to show whether or not to output the TSUIDs associated with timeseries in the results.\n\t// If multiple time series were aggregated into one set, multiple TSUIDs will be returned in a sorted manner.\n\tShowTSUIDs bool `json:\"showTSUIDs,omitempty\"`\n\n\t// An optional value is used to show whether or not can be paased to the JSON with a POST to delete any data point\n\t// that match the given query.\n\tDelete bool `json:\"delete,omitempty\"`\n}\n\nfunc (query *QueryParam) String() string {\n\tcontent, _ := json.Marshal(query)\n\treturn string(content)\n}\n\n// SubQuery is the structure used to hold\n// the subquery parameters when calling /api/query.\n// Each attributes in SubQuery matches the definition in\n// (http://opentsdb.net/docs/build/html/api_http/query/index.html).\ntype SubQuery struct {\n\t// The name of an aggregation function to use.\n\t// The value is required with non-empty one in the range of\n\t// the response of calling /api/aggregators.\n\t//\n\t// By default, the potential values and corresponding descriptions are as followings:\n\t//   \"sum\": Adds all of the data points for a timestamp.\n\t//   \"min\": Picks the smallest data point for each timestamp.\n\t//   \"max\": Picks the largest data point for each timestamp.\n\t//   \"avg\": Averages the values for the data points at each timestamp.\n\tAggregator string `json:\"aggregator\"`\n\n\t// The name of a metric stored in the system.\n\t// The value is reqiured with non-empty value.\n\tMetric string `json:\"metric\"`\n\n\t// An optional value is used to show whether or not the data should be\n\t// converted into deltas before returning. This is useful if the metric is a\n\t// continously incrementing counter and you want to view the rate of change between data points.\n\tRate bool `json:\"rate,omitempty\"`\n\n\t// rateOptions represents monotonically increasing counter handling options.\n\t// The value is optional.\n\t// Currently there is only three kind of value can be set to this map:\n\t// Only three keys can be set into the rateOption parameter of the QueryParam is\n\t// QueryRateOptionCounter (value type is bool),  QueryRateOptionCounterMax (value type is int,int64)\n\t// QueryRateOptionResetValue (value type is int,int64)\n\tRateParams map[string]interface{} `json:\"rateOptions,omitempty\"`\n\n\t// An optional value downsampling function to reduce the amount of data returned.\n\tDownsample string `json:\"downsample,omitempty\"`\n\n\t// An optional value to drill down to specific timeseries or group results by tag,\n\t// supply one or more map values in the same format as the query string. Tags are converted to filters in 2.2.\n\t// Note that if no tags are specified, all metrics in the system will be aggregated into the results.\n\t// It will be deprecated in OpenTSDB 2.2.\n\tTags map[string]string `json:\"tags,omitempty\"`\n\n\t// An optional value used to filter the time series emitted in the results.\n\t// Note that if no filters are specified, all time series for the given\n\t// metric will be aggregated into the results.\n\tFiters []Filter `json:\"filters,omitempty\"`\n}\n\n// Filter is the structure used to hold the filter parameters when calling /api/query.\n// Each attributes in Filter matches the definition in\n// (http://opentsdb.net/docs/build/html/api_http/query/index.html).\ntype Filter struct {\n\t// The name of the filter to invoke. The value is required with a non-empty\n\t// value in the range of calling /api/config/filters.\n\tType string `json:\"type\"`\n\n\t// The tag key to invoke the filter on, required with a non-empty value\n\tTagk string `json:\"tagk\"`\n\n\t// The filter expression to evaluate and depends on the filter being used, required with a non-empty value\n\tFilterExp string `json:\"filter\"`\n\n\t// An optional value to show whether or not to group the results by each value matched by the filter.\n\t// By default all values matching the filter will be aggregated into a single series.\n\tGroupBy bool `json:\"groupBy\"`\n}\n\n// DataPoint is the structure used to hold\n// the values of a metric item. Each attributes\n// in DataPoint matches the definition in\n// (http://opentsdb.net/docs/build/html/api_http/put.html).\ntype DataPoint struct {\n\t// The name of the metric which is about to be stored, and is required with non-empty value.\n\tMetric string `json:\"metric\"`\n\n\t// A Unix epoch style timestamp in seconds or milliseconds.\n\t// The timestamp must not contain non-numeric characters.\n\t// One can use time.Now().Unix() to set this attribute.\n\t// This attribute is also required with non-zero value.\n\tTimestamp int64 `json:\"timestamp\"`\n\n\t// The real type of Value only could be int, int64, float64, or string, and is required.\n\tValue interface{} `json:\"value\"`\n\n\t// A map of tag name/tag value pairs. At least one pair must be supplied.\n\t// Don't use too many tags, keep it to a fairly small number, usually up to 4 or 5 tags\n\t// (By default, OpenTSDB supports a maximum of 8 tags, which can be modified by add\n\t// configuration item 'tsd.storage.max_tags' in opentsdb.conf).\n\tTags map[string]string `json:\"tags\"`\n}\n\nfunc (data *DataPoint) String() string {\n\tcontent, _ := json.Marshal(data)\n\treturn string(content)\n}\n\n// QueryResponse acts as the implementation of Response in the /api/query scene.\n// It holds the status code and the response values defined in the\n// (http://opentsdb.net/docs/build/html/api_http/query/index.html).\ntype QueryResponse struct {\n\tStatusCode    int\n\tQueryRespCnts []QueryRespItem        `json:\"queryRespCnts\"`\n\tErrorMsg      map[string]interface{} `json:\"error\"`\n}\n\nfunc (queryResp *QueryResponse) String() string {\n\tbuffer := bytes.NewBuffer(nil)\n\tcontent, _ := json.Marshal(queryResp)\n\tbuffer.WriteString(fmt.Sprintf(\"%s\\n\", string(content)))\n\treturn buffer.String()\n}\n\nfunc (queryResp *QueryResponse) SetStatus(code int) {\n\tqueryResp.StatusCode = code\n}\n\nfunc (queryResp *QueryResponse) GetCustomParser() func(respCnt []byte) error {\n\treturn func(respCnt []byte) error {\n\t\toriginRespStr := string(respCnt)\n\t\tvar respStr string\n\t\tif queryResp.StatusCode == 200 && strings.Contains(originRespStr, \"[\") && strings.Contains(originRespStr, \"]\") {\n\t\t\trespStr = fmt.Sprintf(\"{%s:%s}\", `\"queryRespCnts\"`, originRespStr)\n\t\t} else {\n\t\t\trespStr = originRespStr\n\t\t}\n\t\treturn json.Unmarshal([]byte(respStr), &queryResp)\n\t}\n}\n\n// QueryRespItem acts as the implementation of Response in the /api/query scene.\n// It holds the response item defined in the\n// (http://opentsdb.net/docs/build/html/api_http/query/index.html).\ntype QueryRespItem struct {\n\t// Name of the metric retreived for the time series\n\tMetric string `json:\"metric\"`\n\n\t// A list of tags only returned when the results are for a single time series.\n\t// If results are aggregated, this value may be null or an empty map\n\tTags map[string]string `json:\"tags\"`\n\n\t// If more than one timeseries were included in the result set, i.e. they were aggregated,\n\t// this will display a list of tag names that were found in common across all time series.\n\t// Note that: Api Doc uses 'aggreatedTags', but actual response uses 'aggregateTags'\n\tAggregatedTags []string `json:\"aggregateTags\"`\n\n\t// Retrieved datapoints after being processed by the aggregators. Each data point consists\n\t// of a timestamp and a value, the format determined by the serializer.\n\t// For the JSON serializer, the timestamp will always be a Unix epoch style integer followed\n\t// by the value as an integer or a floating point.\n\t// For example, the default output is \"dps\"{\"<timestamp>\":<value>}.\n\t// By default the timestamps will be in seconds. If the msResolution flag is set, then the\n\t// timestamps will be in milliseconds.\n\t//\n\t// Because the elements of map is out of order, using common way to iterate Dps will not get\n\t// datapoints with timestamps out of order.\n\t// So be aware that one should use '(qri *QueryRespItem) GetDataPoints() []*DataPoint' to\n\t// acquire the real ascending datapoints.\n\tDps map[string]interface{} `json:\"dps\"`\n\n\t// If the query retrieved annotations for timeseries over the requested timespan, they will\n\t// be returned in this group. Annotations for every timeseries will be merged into one set\n\t// and sorted by start_time. Aggregator functions do not affect annotations, all annotations\n\t// will be returned for the span.\n\t// The value is optional.\n\tAnnotations []Annotation `json:\"annotations,omitempty\"`\n\n\t// If requested by the user, the query will scan for global annotations during\n\t// the timespan and the results returned in this group.\n\t// The value is optional.\n\tGlobalAnnotations []Annotation `json:\"globalAnnotations,omitempty\"`\n}\n\n// GetDataPoints returns the real ascending datapoints from the information of the related QueryRespItem.\nfunc (qri *QueryRespItem) GetDataPoints() []*DataPoint {\n\tdatapoints := make([]*DataPoint, 0)\n\ttimestampStrs := qri.getSortedTimestampStrs()\n\tfor _, timestampStr := range timestampStrs {\n\t\ttimestamp, _ := strconv.ParseInt(timestampStr, 10, 64)\n\t\tdatapoint := &DataPoint{\n\t\t\tMetric:    qri.Metric,\n\t\t\tValue:     qri.Dps[timestampStr],\n\t\t\tTags:      qri.Tags,\n\t\t\tTimestamp: timestamp,\n\t\t}\n\t\tdatapoints = append(datapoints, datapoint)\n\t}\n\treturn datapoints\n}\n\n// getSortedTimestampStrs returns a slice of the ascending timestamp with\n// string format for the Dps of the related QueryRespItem instance.\nfunc (qri *QueryRespItem) getSortedTimestampStrs() []string {\n\ttimestampStrs := make([]string, 0)\n\tfor timestampStr := range qri.Dps {\n\t\ttimestampStrs = append(timestampStrs, timestampStr)\n\t}\n\tsort.Strings(timestampStrs)\n\treturn timestampStrs\n}\n\n// GetLatestDataPoint returns latest datapoint for the related QueryRespItem instance.\nfunc (qri *QueryRespItem) GetLatestDataPoint() *DataPoint {\n\ttimestampStrs := qri.getSortedTimestampStrs()\n\tsize := len(timestampStrs)\n\tif size == 0 {\n\t\treturn nil\n\t}\n\ttimestamp, _ := strconv.ParseInt(timestampStrs[size-1], 10, 64)\n\tdatapoint := &DataPoint{\n\t\tMetric:    qri.Metric,\n\t\tValue:     qri.Dps[timestampStrs[size-1]],\n\t\tTags:      qri.Tags,\n\t\tTimestamp: timestamp,\n\t}\n\treturn datapoint\n}\n\nfunc (c *clientImpl) Query(param QueryParam) (*QueryResponse, error) {\n\tif !isValidQueryParam(&param) {\n\t\treturn nil, errors.New(\"The given query param is invalid.\\n\")\n\t}\n\tqueryEndpoint := fmt.Sprintf(\"%s%s\", c.tsdbEndpoint, QueryPath)\n\treqBodyCnt, err := getQueryBodyContents(&param)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tqueryResp := QueryResponse{}\n\tif err = c.sendRequest(PostMethod, queryEndpoint, reqBodyCnt, &queryResp); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &queryResp, nil\n}\n\nfunc getQueryBodyContents(param interface{}) (string, error) {\n\tresult, err := json.Marshal(param)\n\tif err != nil {\n\t\treturn \"\", errors.New(fmt.Sprintf(\"Failed to marshal query param: %v\\n\", err))\n\t}\n\treturn string(result), nil\n}\n\nfunc isValidQueryParam(param *QueryParam) bool {\n\tif param.Queries == nil || len(param.Queries) == 0 {\n\t\treturn false\n\t}\n\tif !isValidTimePoint(param.Start) {\n\t\treturn false\n\t}\n\tfor _, query := range param.Queries {\n\t\tif len(query.Aggregator) == 0 || len(query.Metric) == 0 {\n\t\t\treturn false\n\t\t}\n\t\tfor k, _ := range query.RateParams {\n\t\t\tif k != QueryRateOptionCounter && k != QueryRateOptionCounterMax && k != QueryRateOptionResetValue {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nfunc isValidTimePoint(timePoint interface{}) bool {\n\tif timePoint == nil {\n\t\treturn false\n\t}\n\tswitch v := timePoint.(type) {\n\tcase int:\n\t\tif v <= 0 {\n\t\t\treturn false\n\t\t}\n\tcase int64:\n\t\tif v <= 0 {\n\t\t\treturn false\n\t\t}\n\tcase string:\n\t\tif v == \"\" {\n\t\t\treturn false\n\t\t}\n\n\tdefault:\n\t\treturn false\n\t}\n\treturn true\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/opentsdb/pkg/config.go\n```golang\npackage pkg\n\n// Copyright 2015 opentsdb-goclient authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//\n// Package config defines basic structure to hold the configure items used\n// to initialize the opentsdb client.\n//\n\nimport (\n\t\"net/http\"\n)\n\ntype OpenTSDBConfig struct {\n\n\t// The host of the target opentsdb, is a required non-empty string which is\n\t// in the format of ip:port without http:// prefix or a domain.\n\tOpentsdbHost string\n\n\t// A pointer of http.Tranport is used by the opentsdb client.\n\t// This value is optional, and if it is not set, client.DefaultTransport, which\n\t// enables tcp keepalive mode, will be used in the opentsdb client.\n\tTransport *http.Transport\n\n\t// The maximal number of datapoints which will be inserted into the opentsdb\n\t// via one calling of /api/put method.\n\t// This value is optional, and if it is not set, client.DefaultMaxPutPointsNum\n\t// will be used in the opentsdb client.\n\tMaxPutPointsNum int\n\n\t// The detect delta number of datapoints which will be used in client.Put()\n\t// to split a large group of datapoints into small batches.\n\t// This value is optional, and if it is not set, client.DefaultDetectDeltaNum\n\t// will be used in the opentsdb client.\n\tDetectDeltaNum int\n\n\t// The maximal body content length per /api/put method to insert datapoints\n\t// into opentsdb.\n\t// This value is optional, and if it is not set, client.DefaultMaxPutPointsNum\n\t// will be used in the opentsdb client.\n\tMaxContentLength int\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/opentsdb/pkg/annotation.go\n```golang\n// Copyright 2015 opentsdb-goclient authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//\thttp://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Package client defines the client and the corresponding\n// rest api implementaion of OpenTSDB.\n//\n// annotation.go contains the structs and methods for the implementation of\n// /api/annotation and /api/annotation/bulk.\npackage pkg\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"strings\"\n)\n\n// Annotation is the structure used to hold\n// the querying parameters when calling /api/annotation.\n// Each attributes in Annotation matches the definition in\n// (http://opentsdb.net/docs/build/html/api_http/annotation/index.html).\n//\n// Annotations are very basic objects used to record a note of an arbitrary\n// event at some point, optionally associated with a timeseries. Annotations\n// are not meant to be used as a tracking or event based system, rather they\n// are useful for providing links to such systems by displaying a notice on\n// graphs or via API query calls.\ntype Annotation struct {\n\t// A Unix epoch timestamp, in seconds, marking the time when the annotation event should be recorded.\n\t// The value is required with non-zero value.\n\tStartTime int64 `json:\"startTime,omitempty\"`\n\n\t// An optional end time for the event if it has completed or been resolved.\n\tEndTime int64 `json:\"endTime,omitempty\"`\n\n\t// A TSUID if the annotation is associated with a timeseries.\n\t// This may be optional if the note was for a global event\n\tTsuid string `json:\"tsuid,omitempty\"`\n\n\t// An optional brief description of the event. As this may appear on GnuPlot graphs,\n\t// the description should be very short, ideally less than 25 characters.\n\tDescription string `json:\"description,omitempty\"`\n\n\t// An optional detailed notes about the event\n\tNotes string `json:\"notes,omitempty\"`\n\n\t// An optional key/value map to store custom fields and values\n\tCustom map[string]string `json:\"custom,omitempty\"`\n}\n\n// AnnotationResponse acts as the implementation of Response in the /api/annotation scene.\n// It holds the status code and the response values defined in the\n// (http://opentsdb.net/docs/build/html/api_http/aggregators.html).\ntype AnnotationResponse struct {\n\tStatusCode int\n\tAnnotation\n\tErrorInfo map[string]interface{} `json:\"error,omitempty\"`\n}\n\nfunc (annotResp *AnnotationResponse) SetStatus(code int) {\n\tannotResp.StatusCode = code\n}\n\nfunc (annotResp *AnnotationResponse) GetCustomParser() func(respCnt []byte) error {\n\treturn func(respCnt []byte) error {\n\t\toriginContents := string(respCnt)\n\t\tvar resultBytes []byte\n\t\tif strings.Contains(originContents, \"startTime\") ||\n\t\t\tstrings.Contains(originContents, \"error\") {\n\t\t\tresultBytes = respCnt\n\t\t} else if annotResp.StatusCode == 204 {\n\t\t\t// The OpenTSDB deletes an annotation successfully and with no body content.\n\t\t\treturn nil\n\t\t}\n\t\treturn json.Unmarshal(resultBytes, &annotResp)\n\t}\n}\n\nfunc (annotResp *AnnotationResponse) String() string {\n\tbuffer := bytes.NewBuffer(nil)\n\tcontent, _ := json.Marshal(annotResp)\n\tbuffer.WriteString(fmt.Sprintf(\"%s\\n\", string(content)))\n\treturn buffer.String()\n}\n\nfunc (c *clientImpl) QueryAnnotation(queryAnnoParam map[string]interface{}) (*AnnotationResponse, error) {\n\tif queryAnnoParam == nil || len(queryAnnoParam) == 0 {\n\t\treturn nil, errors.New(\"The given query annotation param is nil\")\n\t}\n\tbuffer := bytes.NewBuffer(nil)\n\tsize := len(queryAnnoParam)\n\ti := 0\n\tfor k, v := range queryAnnoParam {\n\t\tbuffer.WriteString(fmt.Sprintf(\"%s=%v\", k, v))\n\t\tif i < size-1 {\n\t\t\tbuffer.WriteString(\"&\")\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t\ti++\n\t}\n\tannoEndpoint := fmt.Sprintf(\"%s%s?%s\", c.tsdbEndpoint, AnnotationPath, buffer.String())\n\tannResp := AnnotationResponse{}\n\tif err := c.sendRequest(GetMethod, annoEndpoint, \"\", &annResp); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &annResp, nil\n}\n\nfunc (c *clientImpl) UpdateAnnotation(annotation Annotation) (*AnnotationResponse, error) {\n\treturn c.operateAnnotation(PostMethod, &annotation)\n}\n\nfunc (c *clientImpl) DeleteAnnotation(annotation Annotation) (*AnnotationResponse, error) {\n\treturn c.operateAnnotation(DeleteMethod, &annotation)\n}\n\nfunc (c *clientImpl) operateAnnotation(method string, annotation *Annotation) (*AnnotationResponse, error) {\n\tif !c.isValidOperateMethod(method) {\n\t\treturn nil, errors.New(\"The given method for operating an annotation is invalid.\")\n\t}\n\tannoEndpoint := fmt.Sprintf(\"%s%s\", c.tsdbEndpoint, AnnotationPath)\n\tresultBytes, err := json.Marshal(annotation)\n\tif err != nil {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Failed to marshal annotation: %v\", err))\n\t}\n\tannResp := AnnotationResponse{}\n\tif err = c.sendRequest(method, annoEndpoint, string(resultBytes), &annResp); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &annResp, nil\n}\n\n// BulkAnnotatResponse acts as the implementation of Response in the /api/annotation/bulk scene.\n// It holds the status code and the response values defined in the\n// (http://opentsdb.net/docs/build/html/api_http/annotation/bulk.html)\n// for both bulk update and delete scenes.\ntype BulkAnnotatResponse struct {\n\tStatusCode        int\n\tUpdateAnnotations []Annotation           `json:\"InvolvedAnnotations,omitempty\"`\n\tErrorInfo         map[string]interface{} `json:\"error,omitempty\"`\n\tBulkDeleteResp\n}\n\ntype BulkAnnoDeleteInfo struct {\n\t// A list of TSUIDs with annotations that should be deleted. This may be empty\n\t// or null (for JSON) in which case the global flag should be set.\n\tTsuids []string `json:\"tsuids,omitempty\"`\n\n\t// A timestamp for the start of the request.\n\tStartTime int64 `json:\"startTime,omitempty\"`\n\n\t// An optional end time for the event if it has completed or been resolved.\n\tEndTime int64 `json:\"endTime,omitempty\"`\n\n\t// An optional flag indicating whether or not global annotations should be deleted for the range\n\tGlobal bool `json:\"global,omitempty\"`\n}\n\ntype BulkDeleteResp struct {\n\tBulkAnnoDeleteInfo\n\n\t// Total number of annotations to be deleted successfully for current bulk\n\t// delete operation. The value is only used in the reponse of bulk deleting,\n\t// not in the bulk deleting parameters.\n\tTotalDeleted int64 `json:\"totalDeleted,omitempty\"`\n}\n\nfunc (bulkAnnotResp *BulkAnnotatResponse) SetStatus(code int) {\n\tbulkAnnotResp.StatusCode = code\n}\n\nfunc (bulkAnnotResp *BulkAnnotatResponse) GetCustomParser() func(respCnt []byte) error {\n\treturn func(respCnt []byte) error {\n\t\toriginContents := string(respCnt)\n\t\tvar resultBytes []byte\n\t\tif strings.Contains(originContents, \"startTime\") {\n\t\t\tresultBytes = []byte(fmt.Sprintf(\"{%s:%s}\", `\"InvolvedAnnotations\"`, originContents))\n\t\t} else if strings.Contains(originContents, \"error\") || strings.Contains(originContents, \"totalDeleted\") {\n\t\t\tresultBytes = respCnt\n\t\t} else {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unrecognized bulk annotation response info: %s\", originContents))\n\t\t}\n\t\treturn json.Unmarshal(resultBytes, &bulkAnnotResp)\n\t}\n}\n\nfunc (bulkAnnotResp *BulkAnnotatResponse) String() string {\n\tbuffer := bytes.NewBuffer(nil)\n\tcontent, _ := json.Marshal(bulkAnnotResp)\n\tbuffer.WriteString(fmt.Sprintf(\"%s\\n\", string(content)))\n\treturn buffer.String()\n}\n\nfunc (c *clientImpl) BulkUpdateAnnotations(annotations []Annotation) (*BulkAnnotatResponse, error) {\n\tif annotations == nil || len(annotations) == 0 {\n\t\treturn nil, errors.New(\"The given annotations are empty.\")\n\t}\n\tbulkAnnoEndpoint := fmt.Sprintf(\"%s%s\", c.tsdbEndpoint, BulkAnnotationPath)\n\treqBodyCnt, err := marshalAnnotations(annotations)\n\tif err != nil {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Failed to marshal annotations: %v\", err))\n\t}\n\tbulkAnnoResp := BulkAnnotatResponse{}\n\tif err = c.sendRequest(PostMethod, bulkAnnoEndpoint, reqBodyCnt, &bulkAnnoResp); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &bulkAnnoResp, nil\n}\n\nfunc (c *clientImpl) BulkDeleteAnnotations(bulkDelParam BulkAnnoDeleteInfo) (*BulkAnnotatResponse, error) {\n\tbulkAnnoEndpoint := fmt.Sprintf(\"%s%s\", c.tsdbEndpoint, BulkAnnotationPath)\n\tresultBytes, err := json.Marshal(bulkDelParam)\n\tif err != nil {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Failed to marshal bulk delete param: %v\", err))\n\t}\n\tbulkAnnoResp := BulkAnnotatResponse{}\n\tif err = c.sendRequest(DeleteMethod, bulkAnnoEndpoint, string(resultBytes), &bulkAnnoResp); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &bulkAnnoResp, nil\n}\n\nfunc marshalAnnotations(annotations []Annotation) (string, error) {\n\tbuffer := bytes.NewBuffer(nil)\n\tsize := len(annotations)\n\tbuffer.WriteString(\"[\")\n\tfor index, item := range annotations {\n\t\tresult, err := json.Marshal(item)\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tbuffer.Write(result)\n\t\tif index < size-1 {\n\t\t\tbuffer.WriteString(\",\")\n\t\t}\n\t}\n\tbuffer.WriteString(\"]\")\n\treturn buffer.String(), nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/opentsdb/pkg/client.go\n```golang\n// Copyright 2015 opentsdb-goclient authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//\thttp://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Package client defines the client and the corresponding\n// rest api implementaion of OpenTSDB.\n//\n// client.go contains the global interface and implementation struct\n// definition of the OpenTSDB Client, as well as the common private\n// and public methods used by all the rest-api implementation files,\n// whose names are just like put.go, query.go, and so on.\npackage pkg\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\nconst (\n\tDefaultDialTimeout = 5 * time.Second\n\tKeepAliveTimeout   = 30 * time.Second\n\tGetMethod          = \"GET\"\n\tPostMethod         = \"POST\"\n\tPutMethod          = \"PUT\"\n\tDeleteMethod       = \"DELETE\"\n\n\tPutPath            = \"/api/put\"\n\tPutRespWithSummary = \"summary\"\n\tPutRespWithDetails = \"details\"\n\n\tQueryPath     = \"/api/query\"\n\tQueryLastPath = \"/api/query/last\"\n\t// The three keys in the rateOption parameter of the QueryParam\n\tQueryRateOptionCounter    = \"counter\"    // The corresponding value type is bool\n\tQueryRateOptionCounterMax = \"counterMax\" // The corresponding value type is int,int64\n\tQueryRateOptionResetValue = \"resetValue\" // The corresponding value type is int,int64\n\n\tAggregatorPath  = \"/api/aggregators\"\n\tConfigPath      = \"/api/config\"\n\tSerializersPath = \"/api/serializers\"\n\tStatsPath       = \"/api/stats\"\n\tSuggestPath     = \"/api/suggest\"\n\t// Only the one of the three query type can be used in SuggestParam, UIDMetaData:\n\tTypeMetrics = \"metrics\"\n\tTypeTagk    = \"tagk\"\n\tTypeTagv    = \"tagv\"\n\n\tVersionPath        = \"/api/version\"\n\tDropcachesPath     = \"/api/dropcaches\"\n\tAnnotationPath     = \"/api/annotation\"\n\tAnQueryStartTime   = \"start_time\"\n\tAnQueryTSUid       = \"tsuid\"\n\tBulkAnnotationPath = \"/api/annotation/bulk\"\n\tUIDMetaDataPath    = \"/api/uid/uidmeta\"\n\tUIDAssignPath      = \"/api/uid/assign\"\n\tTSMetaDataPath     = \"/api/uid/tsmeta\"\n\n\t// The above three constants are used in /put\n\tDefaultMaxPutPointsNum = 75\n\tDefaultDetectDeltaNum  = 3\n\t// Unit is bytes, and assumes that config items of 'tsd.http.request.enable_chunked = true'\n\t// and 'tsd.http.request.max_chunk = 40960' are all in the opentsdb.conf:\n\tDefaultMaxContentLength = 40960\n)\n\nvar (\n\tDefaultTransport = &http.Transport{\n\t\tMaxIdleConnsPerHost: 10,\n\t\tDial: (&net.Dialer{\n\t\t\tTimeout:   DefaultDialTimeout,\n\t\t\tKeepAlive: KeepAliveTimeout,\n\t\t}).Dial,\n\t}\n)\n\n// Client defines the sdk methods, by which other go applications can\n// commnicate with the OpenTSDB via the pre-defined rest-apis.\n// Each method defined in the interface of Client is in the correspondance\n// a rest-api definition in (http://opentsdb.net/docs/build/html/api_http/index.html#api-endpoints).\ntype Client interface {\n\n\t// Ping detects whether the target OpenTSDB is reachable or not.\n\t// If error occurs during the detection, an error instance will be returned, or nil otherwise.\n\tPing() error\n\n\t// Query is the implementation of 'GET /api/query' endpoint.\n\t// It is probably the most useful endpoint in the API, /api/query enables extracting data from the storage\n\t// system in various formats determined by the serializer selected.\n\t//\n\t// param is a instance of QueryParam holding current query parameters.\n\t//\n\t// When query operation is successful, a pointer of QueryResponse will be returned with the corresponding\n\t// status code and response info. Otherwise, an error instance will be returned, when the given parameter\n\t// is invalid, it failed to parese the response, or OpenTSDB is un-connectable right now.\n\tQuery(param QueryParam) (*QueryResponse, error)\n\n\t// QueryLast is the implementation of 'GET /api/query/last' endpoint.\n\t// It is introduced firstly in v2.1, and fully supported in v2.2. So it should be aware that this api works\n\t// well since v2.2 of opentsdb.\n\t//\n\t// param is a instance of QueryLastParam holding current query parameters.\n\t//\n\t// When query operation is successful, a pointer of QueryLastResponse will be returned with the corresponding\n\t// status code and response info. Otherwise, an error instance will be returned, when the given parameter\n\t// is invalid, it failed to parese the response, or OpenTSDB is un-connectable right now.\n\tQueryLast(param QueryLastParam) (*QueryLastResponse, error)\n}\n\n// NewClient creates an instance of http client which implements the\n// pre-defined rest apis of OpenTSDB.\n// A non-nil error instance returned means currently the target OpenTSDB\n// designated with the given endpoint is not connectable.\nfunc NewClient(opentsdbCfg OpenTSDBConfig) (Client, error) {\n\topentsdbCfg.OpentsdbHost = strings.TrimSpace(opentsdbCfg.OpentsdbHost)\n\tif len(opentsdbCfg.OpentsdbHost) <= 0 {\n\t\treturn nil, errors.New(\"The OpentsdbEndpoint of the given config should not be empty.\")\n\t}\n\ttransport := opentsdbCfg.Transport\n\tif transport == nil {\n\t\ttransport = DefaultTransport\n\t}\n\tclient := &http.Client{\n\t\tTransport: transport,\n\t}\n\tif opentsdbCfg.MaxPutPointsNum <= 0 {\n\t\topentsdbCfg.MaxPutPointsNum = DefaultMaxPutPointsNum\n\t}\n\tif opentsdbCfg.DetectDeltaNum <= 0 {\n\t\topentsdbCfg.DetectDeltaNum = DefaultDetectDeltaNum\n\t}\n\tif opentsdbCfg.MaxContentLength <= 0 {\n\t\topentsdbCfg.MaxContentLength = DefaultMaxContentLength\n\t}\n\ttsdbEndpoint := fmt.Sprintf(\"http://%s\", opentsdbCfg.OpentsdbHost)\n\tclientImpl := clientImpl{\n\t\ttsdbEndpoint: tsdbEndpoint,\n\t\tclient:       client,\n\t\topentsdbCfg:  opentsdbCfg,\n\t}\n\treturn &clientImpl, nil\n}\n\n// ClientContext implements the Client interface and additionally provides a\n// way to return a client that is associated with the given context.\ntype ClientContext interface {\n\t// WithContext returns a Client that is associated with the given context.\n\t// Use this to pass a context to underlying transport (e.g. to specify a\n\t// deadline).\n\tWithContext(ctx context.Context) Client\n\tClient\n}\n\nfunc NewClientContext(opentsdbCfg OpenTSDBConfig) (Client, error) {\n\tclient, err := NewClient(opentsdbCfg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// We know this is actually clientImpl and implements this interface.\n\treturn client.(ClientContext), nil\n}\n\n// The private implementation of Client interface.\ntype clientImpl struct {\n\ttsdbEndpoint string\n\tclient       *http.Client\n\tctx          context.Context\n\topentsdbCfg  OpenTSDBConfig\n}\n\n// Response defines the common behaviours all the specific response for\n// different rest-apis shound obey.\n// Currently it is an abstraction used in (*clientImpl).sendRequest()\n// to stored the different kinds of response contents for all the rest-apis.\ntype Response interface {\n\n\t// SetStatus can be used to set the actual http status code of\n\t// the related http response for the specific Response instance\n\tSetStatus(code int)\n\n\t// GetCustomParser can be used to retrive a custom-defined parser.\n\t// Returning nil means current specific Response instance doesn't\n\t// need a custom-defined parse process, and just uses the default\n\t// json unmarshal method to parse the contents of the http response.\n\tGetCustomParser() func(respCnt []byte) error\n\n\t// Return the contents of the specific Response instance with\n\t// the string format\n\tString() string\n}\n\nfunc (c *clientImpl) WithContext(ctx context.Context) Client {\n\treturn &clientImpl{\n\t\ttsdbEndpoint: c.tsdbEndpoint,\n\t\tclient:       c.client,\n\t\tctx:          ctx,\n\t\topentsdbCfg:  c.opentsdbCfg,\n\t}\n}\n\n// sendRequest dispatches the http request with the given method name, url and body contents.\n// reqBodyCnt is \"\" means there is no contents in the request body.\n// If the tsdb server responses properly, the error is nil and parsedResp is the parsed\n// response with the specific type. Otherwise, the returned error is not nil.\nfunc (c *clientImpl) sendRequest(method, url, reqBodyCnt string, parsedResp Response) error {\n\treq, err := http.NewRequest(method, url, strings.NewReader(reqBodyCnt))\n\tif c.ctx != nil {\n\t\treq = req.WithContext(c.ctx)\n\t}\n\tif err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"Failed to create request for %s %s: %v\", method, url, err))\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json; charset=UTF-8\")\n\t//fmt.Printf(\"TSDB DEBUG REQ: real request: %s, %s\\n\", url, reqBodyCnt)\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"Failed to send request for %s %s: %v\", method, url, err))\n\t}\n\t//fmt.Printf(\"TSDB DEBUG RSP: real response: %s, %+v\\n\", url, resp)\n\n\tdefer resp.Body.Close()\n\tvar jsonBytes []byte\n\tif jsonBytes, err = ioutil.ReadAll(resp.Body); err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"Failed to read response for %s %s: %v\", method, url, err))\n\t}\n\n\tparsedResp.SetStatus(resp.StatusCode)\n\tparser := parsedResp.GetCustomParser()\n\tif parser == nil {\n\t\tif err = json.Unmarshal(jsonBytes, parsedResp); err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Failed to parse response for %s %s: %v\", method, url, err))\n\t\t}\n\t} else {\n\t\tif err = parser(jsonBytes); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (c *clientImpl) isValidOperateMethod(method string) bool {\n\tmethod = strings.TrimSpace(strings.ToUpper(method))\n\tif len(method) == 0 {\n\t\treturn false\n\t}\n\tmethods := []string{PostMethod, PutMethod, DeleteMethod}\n\texists := false\n\tfor _, item := range methods {\n\t\tif method == item {\n\t\t\texists = true\n\t\t\tbreak\n\t\t}\n\t}\n\treturn exists\n}\n\nfunc (c *clientImpl) Ping() error {\n\tconn, err := net.DialTimeout(\"tcp\", c.opentsdbCfg.OpentsdbHost, DefaultDialTimeout)\n\tif err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"The target OpenTSDB is unreachable: %v\", err))\n\t}\n\tif conn != nil {\n\t\tdefer conn.Close()\n\t}\n\treturn nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/opentsdb/pkg/query_last.go\n```golang\n// Copyright 2015 opentsdb-goclient authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//\thttp://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Package client defines the client and the corresponding\n// rest api implementaion of OpenTSDB.\n//\n// query_last.go contains the structs and methods for the implementation of /api/query/last,\n// which is fully supported since v2.2 of opentsdb.\npackage pkg\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"strings\"\n)\n\n// QueryLastParam is the structure used to hold\n// the querying parameters when calling /api/query/last.\n// Each attributes in QueryLastParam matches the definition in\n// (http://opentsdb.net/docs/build/html/api_http/query/last.html).\ntype QueryLastParam struct {\n\t// One or more sub queries used to select the time series to return.\n\t// These may be metric m or TSUID tsuids queries\n\t// The value is required with at least one element\n\tQueries []SubQueryLast `json:\"queries\"`\n\n\t// An optional flag is used to determine whether or not to resolve the TSUIDs of results to\n\t// their metric and tag names. The default value is false.\n\tResolveNames bool `json:\"resolveNames\"`\n\n\t// An optional number of hours is used to search in the past for data. If set to 0 then the\n\t// timestamp of the meta data counter for the time series is used.\n\tBackScan int `json:\"backScan\"`\n}\n\nfunc (query *QueryLastParam) String() string {\n\tcontent, _ := json.Marshal(query)\n\treturn string(content)\n}\n\n// SubQueryLast is the structure used to hold\n// the subquery parameters when calling /api/query/last.\n// Each attributes in SubQueryLast matches the definition in\n// (http://opentsdb.net/docs/build/html/api_http/query/last.html).\ntype SubQueryLast struct {\n\t// The name of a metric stored in the system.\n\t// The value is reqiured with non-empty value.\n\tMetric string `json:\"metric\"`\n\n\t// An optional value to drill down to specific timeseries or group results by tag,\n\t// supply one or more map values in the same format as the query string. Tags are converted to filters in 2.2.\n\t// Note that if no tags are specified, all metrics in the system will be aggregated into the results.\n\t// It will be deprecated in OpenTSDB 2.2.\n\tTags map[string]string `json:\"tags,omitempty\"`\n}\n\n// QueryLastResponse acts as the implementation of Response in the /api/query/last scene.\n// It holds the status code and the response values defined in the\n// (http://opentsdb.net/docs/build/html/api_http/query/last.html).\ntype QueryLastResponse struct {\n\tStatusCode    int\n\tQueryRespCnts []QueryRespLastItem    `json:\"queryRespCnts,omitempty\"`\n\tErrorMsg      map[string]interface{} `json:\"error\"`\n}\n\nfunc (queryLastResp *QueryLastResponse) String() string {\n\tbuffer := bytes.NewBuffer(nil)\n\tcontent, _ := json.Marshal(queryLastResp)\n\tbuffer.WriteString(fmt.Sprintf(\"%s\\n\", string(content)))\n\treturn buffer.String()\n}\n\nfunc (queryLastResp *QueryLastResponse) SetStatus(code int) {\n\tqueryLastResp.StatusCode = code\n}\n\nfunc (queryLastResp *QueryLastResponse) GetCustomParser() func(respCnt []byte) error {\n\treturn func(respCnt []byte) error {\n\t\toriginRespStr := string(respCnt)\n\t\tvar respStr string\n\t\tif queryLastResp.StatusCode == 200 && strings.Contains(originRespStr, \"[\") && strings.Contains(originRespStr, \"]\") {\n\t\t\trespStr = fmt.Sprintf(\"{%s:%s}\", `\"queryRespCnts\"`, originRespStr)\n\t\t} else {\n\t\t\trespStr = originRespStr\n\t\t}\n\t\treturn json.Unmarshal([]byte(respStr), &queryLastResp)\n\t}\n}\n\n// QueryRespLastItem acts as the implementation of Response in the /api/query/last scene.\n// It holds the response item defined in the\n// (http://opentsdb.net/docs/build/html/api_http/query/last.html).\ntype QueryRespLastItem struct {\n\t// Name of the metric retreived for the time series.\n\t// Only returned if resolve was set to true.\n\tMetric string `json:\"metric\"`\n\n\t// A list of tags only returned when the results are for a single time series.\n\t// If results are aggregated, this value may be null or an empty map.\n\t// Only returned if resolve was set to true.\n\tTags map[string]string `json:\"tags\"`\n\n\t// A Unix epoch timestamp, in milliseconds, when the data point was written.\n\tTimestamp int64 `json:\"timestamp\"`\n\n\t// The value of the data point enclosed in quotation marks as a string\n\tValue string `json:\"value\"`\n\n\t// The hexadecimal TSUID for the time series\n\tTsuid string `json:\"tsuid\"`\n}\n\nfunc (c *clientImpl) QueryLast(param QueryLastParam) (*QueryLastResponse, error) {\n\tif !isValidQueryLastParam(&param) {\n\t\treturn nil, errors.New(\"The given query param is invalid.\\n\")\n\t}\n\tqueryEndpoint := fmt.Sprintf(\"%s%s\", c.tsdbEndpoint, QueryLastPath)\n\treqBodyCnt, err := getQueryBodyContents(&param)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tqueryResp := QueryLastResponse{}\n\tif err = c.sendRequest(PostMethod, queryEndpoint, reqBodyCnt, &queryResp); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &queryResp, nil\n}\n\nfunc isValidQueryLastParam(param *QueryLastParam) bool {\n\tif param.Queries == nil || len(param.Queries) == 0 {\n\t\treturn false\n\t}\n\tfor _, query := range param.Queries {\n\t\tif len(query.Metric) == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/client/opentsdb/pkg/client_test.go\n```golang\npackage pkg\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc Test(t *testing.T) {\n\n\topentsdbCfg := OpenTSDBConfig{\n\t\tOpentsdbHost: \"127.0.0.1:4242\",\n\t}\n\ttsdbClient, err := NewClient(opentsdbCfg)\n\tif err != nil {\n\t\tfmt.Printf(\"%v\\n\", err)\n\t\treturn\n\t}\n\n\t//0. Ping\n\tif err = tsdbClient.Ping(); err != nil {\n\t\tfmt.Println(err.Error())\n\t\treturn\n\t}\n\n\tname := []string{\"cpu\", \"disk\", \"net\", \"mem\", \"bytes\"}\n\ttags := make(map[string]string)\n\ttags[\"host\"] = \"bluebreezecf-host\"\n\ttags[\"try-name\"] = \"bluebreezecf-sample\"\n\ttags[\"demo-name\"] = \"opentsdb-test\"\n\n\t//2.1 POST /api/query to query\n\tfmt.Println(\"Begin to test POST /api/query.\")\n\tst1 := time.Now().Unix()\n\ttime.Sleep(2 * time.Second)\n\tst2 := time.Now().Unix()\n\tqueryParam := QueryParam{\n\t\tStart: st1,\n\t\tEnd:   st2,\n\t}\n\tsubqueries := make([]SubQuery, 0)\n\tfor _, metric := range name {\n\t\tsubQuery := SubQuery{\n\t\t\tAggregator: \"sum\",\n\t\t\tMetric:     metric,\n\t\t\tTags:       tags,\n\t\t}\n\t\tsubqueries = append(subqueries, subQuery)\n\t}\n\tqueryParam.Queries = subqueries\n\tif queryResp, err := tsdbClient.Query(queryParam); err != nil {\n\t\tfmt.Printf(\"Error occurs when querying: %v\", err)\n\t} else {\n\t\tfmt.Printf(\"%s\", queryResp.String())\n\t}\n\tfmt.Println(\"Finish testing POST /api/query.\")\n\n\t//2.2 POST /api/query/last\n\tfmt.Println(\"Begin to test POST /api/query/last.\")\n\ttime.Sleep(1 * time.Second)\n\tsubqueriesLast := make([]SubQueryLast, 0)\n\tfor _, metric := range name {\n\t\tsubQueryLast := SubQueryLast{\n\t\t\tMetric: metric,\n\t\t\tTags:   tags,\n\t\t}\n\t\tsubqueriesLast = append(subqueriesLast, subQueryLast)\n\t}\n\tqueryLastParam := QueryLastParam{\n\t\tQueries:      subqueriesLast,\n\t\tResolveNames: true,\n\t\tBackScan:     24,\n\t}\n\tif queryLastResp, err := tsdbClient.QueryLast(queryLastParam); err != nil {\n\t\tfmt.Printf(\"Error occurs when querying last: %v\", err)\n\t} else {\n\t\tfmt.Printf(\"%s\", queryLastResp.String())\n\t}\n\tfmt.Println(\"Finish testing POST /api/query/last.\")\n\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/consts/consts.go\n```golang\npackage consts\n\nconst (\n\t// Success 业务响应状态码 11-monitor, xxxx-具体业务错误码\n\tSuccess                     = 200    //成功（获取成功、操作成功、创建成功、更新新成功、调用成功、响应成功）\n\tServiceInternalError        = -1     //服务内部错误\n\tGainFail                    = 111001 //获取信息失败\n\tSubmitFail                  = 111002 //提交失败\n\tCreationFail                = 111003 //创建失败\n\tUpdateFail                  = 111004 //更新失败\n\tCallFail                    = 111005 //调用失败\n\tResponseFail                = 111006 //响应失败\n\tRequestFail                 = 111007 //请求失败\n\tParameterError              = 111008 //参数异常\n\tOverTime                    = 111009 //请求超时\n\tUnknownErr                  = 111010 //未知错误\n\tUnknownAction               = 111011 //未知Action\n\tInvalidRequest              = 111012 //无效的请求体\n\tContentSelectorInvalidField = 111013 //ContentSelector字段无效\n\tParameterVerificationFai    = 111014 //参数校验失败\n\tMethodNotSupported          = 111015 //不支持的请求方法\n\tParModeNotSupported         = 111016 //不支持的参数模式\n\n\t// ErrorsConfigInitFail 配置文件\n\tErrorsConfigInitFail      string = \"初始化配置文件发生错误\"\n\tErrorsConfigYamlNotExists string = \"配置文件不存在\"\n\n\t//CurdStatusOkCode CURD常用状态码\n\tCurdStatusOkCode   int    = 0\n\tCurdStatusOkMsg    string = \"Success\"\n\tCurdSelectFailCode int    = 9999 //查询\n\tCurdSelectFailMsg  string = \"查询失败\"\n\tCurdUpdateFailCode int    = 9998 //更新\n\tCurdUpdateFailMsg  string = \"更新失败\"\n\tCurdWriteFailCode  int    = 9997 // 写入\n\tCurdWriteFailMsg   string = \"写入失败\"\n\n\t// ValidatorPrefix 表单验证\n\tValidatorPrefix              string = \"Form_Validator_\" //表单验证前缀\n\tValidatorParamsCheckFailCode int    = -1\n\tValidatorParamsCheckFailMsg  string = \"参数校验失败\"\n\tValidatorParamsToJSONFail    string = \"验证器参数 json 反序列化失败\"\n\n\t// DefaultMysqlPool 数据库连接池配置\n\tDefaultMysqlPool = \"default\"\n\tProMysqlPool     = \"pro\"\n\tDevMysqlPool     = \"dev\"\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/common/consts/product_source.go\n```golang\npackage consts\n\nconst (\n\tPlatform = \"platform\"\n\tBusiness = \"business\"\n)\n\nfunc SourceName(key string) string {\n\tswitch key {\n\tcase Platform:\n\t\treturn \"平台\"\n\tcase Business:\n\t\treturn \"业务\"\n\tdefault:\n\t\treturn \"\"\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/dto/response.go\n```golang\npackage dto\n\nimport \"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\nvar RedisDeployType = map[string]string{\"SINGLE\": \"主从高可用\", \"CLUSTER\": \"集群高可用\"}\n\ntype RedisLogRsp struct {\n\tTotalCount int64         `json:\"TotalCount\"`\n\tPageNo     int           `json:\"PageNo\"`\n\tPageSize   int           `json:\"PageSize\"`\n\tLogs       []interface{} `json:\"Logs\"`\n}\n\ntype DbListRsp struct {\n\tTotalCount int64 `json:\"TotalCount\"`\n\tPageNo     int   `json:\"PageNo\"`\n\tPageSize   int   `json:\"PageSize\"`\n\tList       []Db  `json:\"List\"`\n}\n\ntype Db struct {\n\tId             string `json:\"Id\"`\n\tName           string `json:\"Name\"`\n\tStatus         string `json:\"Status\"`\n\tTenantId       string `json:\"TenantId\"`\n\tTenantName     string `json:\"TenantName\"`\n\tProjectId      string `json:\"ProjectId\"`\n\tProjectName    string `json:\"ProjectName\"`\n\tIp             string `json:\"Ip\"`\n\tRegion         string `json:\"Region\"`\n\tAz             string `json:\"Az\"`\n\tResourcePool   string `json:\"ResourcePool\"`\n\tResourcePoolId string `json:\"ResourcePoolId\"`\n\tDeployType     string `json:\"DeployType\"`\n\tDeployTypeDesc string `json:\"DeployTypeDesc\"`\n\tCreateTime     int64  `json:\"CreateTime\"`\n}\n\ntype ProductDatabaseOverviewTopRsp struct {\n\tTops []types.BasicOverviewSlot\n}\n\ntype ProductSubListRsp struct {\n}\n\ntype ProductDbLineRsp struct {\n\tLines []types.BasicOverviewSlot\n}\n\ntype DbPoolOverviewAlertRsp struct {\n\tAlerts []types.BasicOverviewSlot `json:\"Alerts\"`\n}\n\ntype DbPoolOverviewMonitorRsp struct {\n\tAbnormalService  []types.BasicOverviewSlot `json:\"AbnormalService\"`\n\tAbnormalInstance []types.BasicOverviewSlot `json:\"AbnormalInstance\"`\n}\n\ntype DbPoolOverviewLineRsp struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\ntype DbPoolListRsp struct {\n\tTotalCount int64\n\tPageNo     int\n\tPageSize   int\n\tList       []DbPoolList `json:\"List\"`\n}\n\ntype DbPoolList struct {\n\tId                  string  `json:\"Id\"`\n\tName                string  `json:\"Name\"`\n\tDbType              string  `json:\"DbType\"`\n\tResourcePoolType    string  `json:\"ResourcePoolType\"`\n\tRegion              string  `json:\"Region\"`\n\tAz                  string  `json:\"Az\"`\n\tCpuLoad             float64 `json:\"CpuLoad\"`\n\tMemLoad             float64 `json:\"MemLoad\"`\n\tDiskLoad            float64 `json:\"DiskLoad\"`\n\tServerCount         int     `json:\"ServerCount\"`\n\tAbnormalServerCount int     `json:\"AbnormalServerCount\"`\n\tInstanceTotal       int     `json:\"InstanceTotal\"`     //最大可创建实例数量\n\tInstanceUsed        int     `json:\"InstanceUsed\"`      //已创建的实例数量\n\tAbnormalInstance    int     `json:\"AbnormalInstance\"`  //异常实例数量\n\tInstanceAvailable   int     `json:\"InstanceAvailable\"` //当前可创建实例数量\n\tCreateTime          string  `json:\"CreateTime\"`\n\tAlertNumber         int     `json:\"AlertNumber\"`\n}\n\ntype DbPoolDetailsLineRsp struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\ntype MysqlLogRsp struct {\n\tTotalCount int64      `json:\"TotalCount\"`\n\tPageNo     int        `json:\"PageNo\"`\n\tPageSize   int        `json:\"PageSize\"`\n\tList       []MysqlLog `json:\"Logs\"`\n}\n\ntype MysqlLog struct {\n\tId        string `json:\"Id\"`\n\tName      string `json:\"Name\"`\n\tSize      string `json:\"Size\"`\n\tStartTime string `json:\"StartTime\"`\n\tEndTime   string `json:\"EndTime\"`\n\tDownload  string `json:\"Download\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/dto/request.go\n```golang\npackage dto\n\ntype DbListReq struct {\n\tAz             []string `json:\"Az\"`\n\tOrderCode      string   `json:\"OrderCode\" form:\"OrderCode\"`\n\tOrderType      string   `json:\"OrderType\" form:\"OrderType\" binding:\"omitempty,oneof=ASC DESC\"`\n\tPageNo         int      `json:\"PageNo\"`\n\tPageSize       int      `json:\"PageSize\"`\n\tPoolName       []string `json:\"PoolName\"`\n\tRegion         string   `json:\"Region\"`\n\tStatus         []string `json:\"Status\"`\n\tTenantIdList   []string `json:\"TenantIdList\"`\n\tTenantNameList []string `json:\"TenantNameList\"`\n\tProjectIdList  []string `json:\"ProjectIdList\"`\n\tQuery          Query    `json:\"Query\"`\n\tDatabaseType   string   `json:\"DatabaseType\"`\n}\n\ntype Query map[string]string\n\ntype ProductDatabaseOverviewTopReq struct {\n\tRegion     string   `json:\"Region\"`\n\tAz         string   `json:\"Az\"`\n\tMetricName []string `json:\"MetricName\"`\n\tTopK       int      `json:\"TopK\"` //5,10\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n}\n\ntype ProductDbSubListReq struct {\n\tServerType string `json:\"ServerType\" binding:\"omitempty,oneof=CLUSTER SINGLE\" `\n\tInstanceId string `json:\"InstanceId\" binding:\"required\"` //主实例ID\n}\n\ntype ProductDbLineReq struct {\n\tMetricName []string `json:\"MetricName\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n\tID         string   `json:\"ID\"`\n\tDbType     string   `json:\"DbType\"`\n}\n\ntype RedisLogReq struct {\n\tId       string `json:\"Id\"`\n\tStart    int64  `json:\"Start,omitempty\"`\n\tEnd      int64  `json:\"End,omitempty\"`\n\tPageNo   int    `json:\"PageNo,omitempty\"`\n\tPageSize int    `json:\"PageSize,omitempty\"`\n\tLogType  string `json:\"LogType,omitempty\"`\n\tContext  string `json:\"Context,omitempty\"`\n}\n\ntype MysqlLogReq struct {\n\tId        string  `json:\"Id\" binding:\"required\"`\n\tName      string  `json:\"Name\" binding:\"required\"`\n\tDbLogType string  `json:\"DbLogType\" binding:\"oneof= errlog slowquery binlog\" `\n\tPageNo    int     `json:\"PageNo\"`\n\tPageSize  int     `json:\"PageSize\"`\n\tStart     float64 `json:\"Start\"`\n\tEnd       float64 `json:\"End\"`\n}\n\ntype DbPoolOverviewReq struct {\n\tRegion string   `json:\"Region\"`\n\tAz     []string `json:\"Az\"`\n\tLabId  int      `json:\"LabId\"`\n}\n\ntype DbPoolOverviewLineReq struct {\n\tRegion        string   `json:\"region\"`\n\tAz            []string `json:\"az\"`\n\tMetricName    []string `json:\"MetricName\" binding:\"required\"`\n\tStart         int64    `json:\"Start\" binding:\"required\"`\n\tEnd           int64    `json:\"End\" binding:\"required\"`\n\tHasPrediction bool     `json:\"HasPrediction\"`\n}\n\ntype DbPoolListReq struct {\n\tPageNo    int      `json:\"PageNo\"`\n\tPageSize  int      `json:\"PageSize\"`\n\tRegion    string   `json:\"Region\"`\n\tAz        []string `json:\"Az\"`\n\tDbType    []string `json:\"DbType\"` //数据类型\n\tQuery     Query    `json:\"Query\"`\n\tOrderCode string   `json:\"OrderCode\" form:\"OrderCode\"`\n\tOrderType string   `json:\"OrderType\" form:\"OrderType\" binding:\"omitempty,oneof=ASC DESC\"`\n}\n\ntype DbPoolDetailsLineReq struct {\n\tId         string   `json:\"id\" binding:\"required\"`\n\tMetricName []string `json:\"MetricName\" binding:\"required\"`\n\tStart      int64    `json:\"Start\" binding:\"required\"`\n\tEnd        int64    `json:\"End\" binding:\"required\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/dto/model.go\n```golang\npackage dto\n\ntype SlowLog struct {\n\tRunLog\n\tRedis struct {\n\t\tSlowLog struct {\n\t\t\tCmd      string `json:\"Cmd\"`\n\t\t\tKey      string `json:\"Key\"`\n\t\t\tDuration struct {\n\t\t\t\tUs int64 `json:\"Us\"`\n\t\t\t} `json:\"Duration\"`\n\t\t} `json:\"SlowLog\"`\n\t} `json:\"Redis\"`\n}\n\ntype RunLog struct {\n\tHost struct {\n\t\tName string `json:\"Name\"`\n\t} `json:\"Host\"`\n\tMessage string `json:\"Message\"`\n\tEvent   struct {\n\t\tCreated string `json:\"Created\"`\n\t\tDataset string `json:\"Dataset\"`\n\t} `json:\"Event\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/dao/monitor_tsdb_metrics.go\n```golang\npackage dao\n\nimport (\n\t\"context\"\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/model\"\n\t\"github.com/pkg/errors\"\n\t\"gorm.io/gorm\"\n)\n\ntype MetricDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewMetricDao() *MetricDao {\n\treturn &MetricDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\nfunc (m *MetricDao) GetOneByCode(ctx context.Context, code string) (*model.MonitorTsdbMetrics, error) {\n\tcontent := model.MonitorTsdbMetrics{}\n\terr := m.db.WithContext(ctx).Where(\"code = ?\", code).First(&content).Error\n\tif err != nil {\n\t\tif errors.Is(err, gorm.ErrRecordNotFound) {\n\t\t\treturn nil, nil\n\t\t}\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &content, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/dao/db_instance_rds_log.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/model\"\n\t\"github.com/gin-gonic/gin\"\n\t\"gorm.io/gorm\"\n)\n\ntype DbInstanceRdsLogDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewDbInstanceRdsLogDao() *DbInstanceRdsLogDao {\n\treturn &DbInstanceRdsLogDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\nfunc (i *DbInstanceRdsLogDao) GetDbRdsLogList(ctx *gin.Context, par dto.MysqlLogReq) (int64, *[]model.DbInstanceRdsLog, error) {\n\tvar content []model.DbInstanceRdsLog\n\n\tdb := i.db.Model(&model.DbInstanceRdsLog{})\n\n\tif par.Id != \"\" {\n\t\tdb = db.Where(\"instance_id = ?\", par.Id)\n\t}\n\n\tif par.DbLogType != \"\" {\n\t\tdb = db.Where(\"logtype = ?\", par.DbLogType)\n\t}\n\n\tif par.Start != 0 && par.End == 0 {\n\t\tdb = db.Where(\"start_time >= ?\", par.Start)\n\t}\n\n\tif par.End != 0 && par.Start == 0 {\n\t\tdb = db.Where(\"end_time <= ?\", par.End)\n\t}\n\n\tif par.Start != 0 && par.End != 0 {\n\t\tdb = db.Where(\"start_time >= ? and end_time < ?\", par.Start, par.End)\n\t}\n\n\t// 设置排序\n\tdb = db.Order(\"start_time desc\")\n\n\t// 设置分页\n\tif par.PageSize != -1 {\n\t\tif par.PageNo > 0 && par.PageSize > 0 {\n\t\t\tdb = db.Offset((par.PageNo - 1) * par.PageSize).Limit(par.PageSize)\n\t\t} else {\n\t\t\tdb = db.Limit(10)\n\t\t}\n\t}\n\n\tvar total int64\n\tdb.Count(&total)\n\n\terr := db.Scan(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn 0, nil, err\n\t}\n\treturn total, &content, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/dao/monitor_top.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/gormSerializer\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/model\"\n\t\"github.com/pkg/errors\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/schema\"\n)\n\ntype MetricTopDao struct {\n\tdb *gorm.DB\n}\n\ntype QueryParams struct {\n\tRegion string\n\tAz     string\n\tCode   string\n}\n\nfunc NewMetricTopDao() *MetricTopDao {\n\tschema.RegisterSerializer(\"json_str\", gormSerializer.JSONSerializer{})\n\treturn &MetricTopDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\n//func (m *MetricTopDao) Insert(data model.MonitorTop) error {\n//\tif err := m.db.Create(&data).Error; err != nil {\n//\t\treturn err\n//\t}\n//\treturn nil\n//}\n\nfunc (m *MetricTopDao) CreateOrUpdate(data model.MonitorTop) error {\n\t// Save update value in database, if the value doesn't have primary key, will insert it\n\tif err := m.db.Save(&data).Error; err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (m *MetricTopDao) GetOneByCode(q QueryParams) (*model.MonitorTop, error) {\n\tvar data model.MonitorTop\n\tif err := m.db.Where(\"region = ? AND az = ? AND code = ?\", q.Region, q.Az, q.Code).First(&data).Error; err != nil {\n\t\tif errors.Is(err, gorm.ErrRecordNotFound) {\n\t\t\treturn nil, nil\n\t\t}\n\t\treturn nil, err\n\t}\n\treturn &data, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/dao/overview.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tdatabasepb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_database/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n)\n\ntype DatabaseStore struct {\n\t//rpc\n\tDatabaseRpcClient databasepb.DatabaseServiceClient\n\tAlarmRpcClient    alarmv1alpha.AlarmServiceClient\n\n\tMetricTopDao        *MetricTopDao\n\tMetricDao           *MetricDao\n\tDbRedisInstanceDao  *DbRedisInstanceDao\n\tDbInstanceRdsLogDao *DbInstanceRdsLogDao\n}\n\nfunc NewDatabaseStore() *DatabaseStore {\n\t//resource\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\n\t//alarm\n\talarmAddr := lib.GetStringConf(\"base.grpc.alarm\")\n\talarmConn, err := grpcx.NewGrpcClientConn(alarmAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect alarm grpc server error, %s\": err.Error()})\n\t}\n\n\treturn &DatabaseStore{\n\t\tDatabaseRpcClient:   databasepb.NewDatabaseServiceClient(resourceConn),\n\t\tAlarmRpcClient:      alarmv1alpha.NewAlarmServiceClient(alarmConn),\n\t\tMetricTopDao:        NewMetricTopDao(),\n\t\tMetricDao:           NewMetricDao(),\n\t\tDbRedisInstanceDao:  NewDbRedisInstanceDao(),\n\t\tDbInstanceRdsLogDao: NewDbInstanceRdsLogDao(),\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/dao/db_redis_instance.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/model\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/pkg/errors\"\n\t\"gorm.io/gorm\"\n)\n\ntype DbRedisInstanceDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewDbRedisInstanceDao() *DbRedisInstanceDao {\n\treturn &DbRedisInstanceDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\nfunc (m *DbRedisInstanceDao) GetDbRedisInstance(ctx *gin.Context, instanceId string) (*[]model.DbRedisInstance, error) {\n\tvar content []model.DbRedisInstance\n\terr := m.db.Where(\"instance_id = ?\", instanceId).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &content, nil\n}\n\nfunc (m *DbRedisInstanceDao) GetDbRedisSubInstance(subInstanceId string) (*model.DbRedisInstance, error) {\n\tvar content model.DbRedisInstance\n\terr := m.db.Where(\"sub_instance_id = ?\", subInstanceId).First(&content).Error\n\tif err != nil {\n\t\tif errors.Is(err, gorm.ErrRecordNotFound) {\n\t\t\treturn nil, nil\n\t\t}\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &content, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/controller/db_product.go\n```golang\npackage controller\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/pkg/errors\"\n\t\"net/http\"\n)\n\ntype DatabaseController struct {\n\tsvc *service.DatabaseService\n}\n\nfunc NewDatabaseController() *DatabaseController {\n\treturn &DatabaseController{\n\t\tsvc: service.NewDatabaseService(),\n\t}\n}\n\nfunc (d *DatabaseController) RedisLog(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.RedisLogReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\tif params.LogType != \"redis.slowlog\" && params.LogType != \"redis.log\" {\n\t\tparams.LogType = \"redis.slowlog\"\n\t}\n\tlogData, err := d.svc.GetLogMsg(c, &params)\n\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": errors.Cause(err).Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取redis日志失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, logData)\n}\n\nfunc (d *DatabaseController) RedisSubInstanceList(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductDbSubListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := d.svc.RedisSubInstanceList(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": errors.Cause(err).Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取redis子实例列表失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取折线图信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (d *DatabaseController) Line(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductDbLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := d.svc.DbLine(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": errors.Cause(err).Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取折线图信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取折线图信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (d *DatabaseController) Top(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductDatabaseOverviewTopReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := d.svc.OverviewTop(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (d *DatabaseController) List(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.DbListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := d.svc.DbList(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取db list失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (d *DatabaseController) MysqlLog(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.MysqlLogReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\tlogData, err := d.svc.MysqlLogList(c, params)\n\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": errors.Cause(err).Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取redis日志失败\")\n\t\treturn\n\t}\n\n\tresponses := gin.H{\n\t\t\"Code\":      http.StatusOK,\n\t\t\"Message\":   \"success\",\n\t\t\"Data\":      logData,\n\t\t\"RequestID\": lib.GetTraceContext(c).TraceId}\n\n\tvar buf bytes.Buffer\n\tencoder := json.NewEncoder(&buf)\n\tencoder.SetEscapeHTML(false) // 禁用 HTML 转义\n\n\tif err := encoder.Encode(responses); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": errors.Cause(err).Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取redis日志失败\")\n\t\treturn\n\t}\n\n\tc.Data(http.StatusOK, \"application/json\", buf.Bytes())\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/controller/db_pool.go\n```golang\npackage controller\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype DbPoolController struct {\n\tsvc *service.DbPoolService\n}\n\nfunc NewDbkPoolController() *DbPoolController {\n\treturn &DbPoolController{\n\t\tsvc: service.NewDbPoolService(),\n\t}\n}\n\nfunc (s *DbPoolController) DbPoolOverviewAlert(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.DbPoolOverviewReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.DbPoolOverviewAlert(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取数据库资源池概览监控告警失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *DbPoolController) DbPoolOverviewMonitor(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.DbPoolOverviewReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.DbPoolOverviewMonitor(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取数据库资源池概览监控告警失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *DbPoolController) DbPoolOverviewLine(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.DbPoolOverviewLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.DbPoolOverviewLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取数据库资源池概览监控告警失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *DbPoolController) DbPoolList(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.DbPoolListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.DbPoolList(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取数据库资源池列表失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *DbPoolController) DbPoolDetailsLine(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.DbPoolDetailsLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.DbPoolDetailsLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取数据库资源池列表失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/model/monitor_tsdb_metrics.go\n```golang\npackage model\n\nimport (\n\t\"time\"\n)\n\ntype MonitorTsdbMetrics struct {\n\tID           int       `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`\n\tProductLine  string    `gorm:\"column:product_line;NOT NULL\"` // 产品线\n\tCode         string    `gorm:\"column:code;NOT NULL\"`         // 唯一标识\n\tName         string    `gorm:\"column:name;NOT NULL\"`         // 中文名\n\tDisplayName  string    `gorm:\"column:display_name;NOT NULL\"`\n\tMetricPrefix string    `gorm:\"column:metric_prefix;NOT NULL\"` // metric前缀\n\tUnit         string    `gorm:\"column:unit;NOT NULL;default:''\"`\n\tCreatedAt    time.Time `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"`\n\tUpdatedAt    time.Time `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"`\n\tDeletedAt    time.Time `gorm:\"column:deleted_at\"`\n}\n\nfunc (m *MonitorTsdbMetrics) TableName() string {\n\treturn \"monitor_tsdb_metrics\"\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/model/db_instance_rds_log.go\n```golang\npackage model\n\nimport (\n\t\"time\"\n)\n\ntype DbInstanceRdsLog struct {\n\tId           int       `gorm:\"column:id;type:int(11);primary_key;AUTO_INCREMENT\" json:\"id\"`\n\tInstanceId   string    `gorm:\"column:instance_id;type:varchar(36);comment:实例id\" json:\"instance_id\"`\n\tGroupId      string    `gorm:\"column:group_id;type:varchar(36);comment:分组id\" json:\"group_id\"`\n\tLogtype      string    `gorm:\"column:logtype;type:varchar(255);comment:日志类型\" json:\"logtype\"`\n\tSize         int64     `gorm:\"column:size;type:bigint(20)\" json:\"size\"`\n\tStartTime    time.Time `gorm:\"column:start_time;type:timestamp\" json:\"start_time\"`\n\tEndTime      time.Time `gorm:\"column:end_time;type:timestamp\" json:\"end_time\"`\n\tName         string    `gorm:\"column:name;type:varchar(255)\" json:\"name\"`\n\tLastUpdateAt time.Time `gorm:\"column:last_update_at;type:timestamp;default:CURRENT_TIMESTAMP\" json:\"last_update_at\"`\n\tRegion       string    `gorm:\"column:region;type:varchar(128)\" json:\"region\"`\n\tGalaxy       string    `gorm:\"column:galaxy;type:varchar(128)\" json:\"galaxy\"`\n\tDeleted      int       `gorm:\"column:deleted;type:tinyint(1);default:0\" json:\"deleted\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/model/db_redis_instance.go\n```golang\npackage model\n\nimport (\n\t\"time\"\n)\n\ntype DbRedisInstance struct {\n\tId            uint      `gorm:\"column:id;type:int(10) unsigned;primary_key;AUTO_INCREMENT\" json:\"id\"`\n\tInstanceId    string    `gorm:\"column:instance_id;type:varchar(36);comment:redis主实例id;NOT NULL\" json:\"instance_id\"`\n\tRole          string    `gorm:\"column:role;type:varchar(20);comment:节点类型;NOT NULL\" json:\"role\"`\n\tSubInstanceId string    `gorm:\"column:sub_instance_id;type:varchar(36);comment:子实例id;NOT NULL\" json:\"sub_instance_id\"`\n\tRegion        string    `gorm:\"column:region;type:varchar(128);NOT NULL\" json:\"region\"`\n\tGalaxy        string    `gorm:\"column:galaxy;type:varchar(128);NOT NULL\" json:\"galaxy\"`\n\tDeleted       int       `gorm:\"column:deleted;type:tinyint(1);default:0;NOT NULL\" json:\"deleted\"`\n\tLastUpdateTim time.Time `gorm:\"column:last_update_tim;type:timestamp;default:CURRENT_TIMESTAMP\" json:\"last_update_tim\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/service/db_product.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\tresource_databasev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_database/v1alpha/gen\"\n\tks3client \"ezone.ksyun.com/ezone/luban/monitor/common/client/ks3\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb/pkg\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/mysql\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/dto\"\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/olivere/elastic\"\n\t\"github.com/pkg/errors\"\n\t\"k8s.io/klog/v2\"\n\t\"net/http\"\n\t\"reflect\"\n\t\"time\"\n)\n\ntype DatabaseService struct {\n\tStore    dao.DatabaseStore\n\tesClient *elastic.Client\n}\n\nfunc NewDatabaseService() *DatabaseService {\n\tclient, err := elastic.NewClient(\n\t\telastic.SetURL(lib.GetStringSliceConf(\"base.elasticsearch.KCSRedisLogingElasticsearchAddress\")...),\n\t\telastic.SetSniff(false),\n\t)\n\tif err != nil {\n\t\tklog.Errorf(\"KCS redis log elasticsearch connect error: %s\", err)\n\t}\n\treturn &DatabaseService{\n\t\tStore:    *dao.NewDatabaseStore(),\n\t\tesClient: client,\n\t}\n}\n\nfunc (d *DatabaseService) OverviewTop(ctx context.Context, par *dto.ProductDatabaseOverviewTopReq) (*dto.ProductDatabaseOverviewTopRsp, error) {\n\ttops := []types.BasicOverviewSlot{}\n\n\tfor _, name := range par.MetricName {\n\t\ttsdbMetric, err := d.Store.MetricDao.GetOneByCode(ctx, name)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"get tsdb metric %s err\", name)\n\t\t}\n\t\tif tsdbMetric == nil {\n\t\t\treturn nil, errors.WithMessagef(fmt.Errorf(\"record not found\"), \"get tsdb metric %s err\", name)\n\t\t}\n\t\ttopData, err := d.Store.MetricTopDao.GetOneByCode(dao.QueryParams{\n\t\t\tRegion: par.Region,\n\t\t\tAz:     par.Az,\n\t\t\tCode:   name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif topData == nil {\n\t\t\tklog.Warning(\"overviewTop data not found \", fmt.Sprintf(\"%s|%s|%s\", name, par.Az, par.Region))\n\t\t\tcontinue\n\t\t}\n\n\t\tintervalData := topData.ParseIntervalData(par.Start, par.End)\n\t\t//topK\n\t\tif par.TopK > 10 {\n\t\t\treturn nil, fmt.Errorf(\"topK is too large\")\n\t\t}\n\t\tif par.TopK < len(intervalData) {\n\t\t\tintervalData = intervalData[:par.TopK]\n\t\t}\n\n\t\tvalues := []types.BasicOverviewSlotValue{}\n\t\tfor k, v := range intervalData {\n\t\t\tvalue := types.BasicOverviewSlotValue{\n\t\t\t\tName:     v.Name,\n\t\t\t\tCode:     v.Id,\n\t\t\t\tValue:    v.Value,\n\t\t\t\tUnit:     tsdbMetric.Unit,\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t}\n\t\t\tif tools.In([]string{mysql.Mysql_riops, mysql.Mysql_wiops, mysql.Mysql_threads_connected, mysql.Mysql_threads_running}, name) {\n\t\t\t\tvalue.SubName = value.Name\n\t\t\t\tvalue.Name = fmt.Sprintf(\"Top%d\", k+1)\n\t\t\t}\n\t\t\tvalues = append(values, value)\n\t\t}\n\n\t\tslot := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        tsdbMetric.DisplayName,\n\t\t\t\tValue:       0,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t\tValues: values,\n\t\t}\n\t\ttops = append(tops, slot)\n\t}\n\n\treturn &dto.ProductDatabaseOverviewTopRsp{\n\t\tTops: tops,\n\t}, nil\n}\n\nfunc (d *DatabaseService) DbList(ctx *gin.Context, par dto.DbListReq) (*dto.DbListRsp, error) {\n\t//获取\n\trpcResult, err := d.Store.DatabaseRpcClient.ListDatabase(ctx, &resource_databasev1alpha.ProductDbListRequest{\n\t\tPageNo:       1,\n\t\tPageSize:     -1,\n\t\tAz:           par.Az,\n\t\tOrderCode:    par.OrderCode,\n\t\tOrderType:    par.OrderType,\n\t\tResourcePool: par.PoolName,\n\t\tRegion:       par.Region,\n\t\tStatus:       par.Status,\n\t\tTenantId:     par.TenantIdList,\n\t\tTenantName:   par.TenantNameList,\n\t\tProjectId:    par.ProjectIdList,\n\t\tDataBaseType: par.DatabaseType,\n\t\tQuery:        par.Query,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar dbList []dto.Db\n\n\tfor _, v := range rpcResult.Data {\n\t\tval := dto.Db{\n\t\t\tId:             v.Id,\n\t\t\tName:           v.Name,\n\t\t\tStatus:         v.Status,\n\t\t\tTenantId:       v.TenantId,\n\t\t\tTenantName:     v.TenantName,\n\t\t\tProjectId:      v.ProjectId,\n\t\t\tProjectName:    v.ProjectName,\n\t\t\tIp:             v.Ip,\n\t\t\tRegion:         v.Region,\n\t\t\tAz:             v.Az,\n\t\t\tResourcePool:   v.ResourcePool,\n\t\t\tResourcePoolId: v.ResourcePoolId,\n\t\t\tCreateTime:     v.CreateTime,\n\t\t}\n\t\tif par.DatabaseType == \"redis\" {\n\t\t\tval.DeployType = v.DeployType\n\t\t\tval.DeployTypeDesc = dto.RedisDeployType[v.DeployType]\n\t\t}\n\t\tdbList = append(dbList, val)\n\t}\n\t//分页\n\tlow := (par.PageNo - 1) * par.PageSize\n\tif low > len(rpcResult.Data) {\n\t\tklog.Info(\"PageSize is too large\")\n\t}\n\n\thigh := low + par.PageSize\n\tif high > len(rpcResult.Data) {\n\t\thigh = len(rpcResult.Data)\n\t}\n\n\tvar results dto.DbListRsp\n\tresults.PageSize = par.PageSize\n\tresults.PageNo = par.PageNo\n\tresults.TotalCount = int64(len(rpcResult.Data))\n\tresults.List = dbList[low:high]\n\n\treturn &results, err\n}\n\nfunc (d *DatabaseService) RedisSubInstanceList(ctx *gin.Context, par *dto.ProductDbSubListReq) (map[string][]string, error) {\n\n\tlist, err := d.Store.DbRedisInstanceDao.GetDbRedisInstance(ctx, par.InstanceId)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresMap := make(map[string][]string, 0)\n\tif par.ServerType == \"CLUSTER\" { // 集群\n\t\tfor _, v := range *list {\n\t\t\tif v.Role == \"SLAVE\" {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif ins, ok := resMap[v.Role]; ok {\n\t\t\t\tresMap[v.Role] = append(ins, v.SubInstanceId)\n\t\t\t} else {\n\t\t\t\tresMap[v.Role] = []string{v.SubInstanceId}\n\t\t\t}\n\t\t}\n\t} else if par.ServerType == \"SINGLE\" { //主从\n\t\tresMap[\"MASTER\"] = []string{par.InstanceId}\n\t\tresMap[\"SLAVE\"] = []string{}\n\t\tfor _, v := range *list {\n\t\t\tresMap[\"SLAVE\"] = append(resMap[\"SLAVE\"], v.SubInstanceId)\n\t\t}\n\t}\n\n\treturn resMap, nil\n}\n\nfunc (d *DatabaseService) DbLine(ctx context.Context, par *dto.ProductDbLineReq) (*dto.ProductDbLineRsp, error) {\n\tqueryParam := pkg.QueryParam{\n\t\tStart: par.Start,\n\t\tEnd:   par.End,\n\t}\n\tvar region string\n\tif par.DbType == \"mysql\" {\n\t\tmysqlInfo, err := d.Store.DatabaseRpcClient.MysqlDetails(ctx, &resource_databasev1alpha.DbDetailsRequest{\n\t\t\tInstanceId: par.ID,\n\t\t})\n\t\tif mysqlInfo == nil {\n\t\t\treturn nil, errors.New(fmt.Sprintf(\"mysql instance %s not found\", par.ID))\n\t\t}\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call DetailMysql err\")\n\t\t}\n\t\tregion = mysqlInfo.BaseInfo.Region\n\t} else {\n\t\tredisInfo, err := d.Store.DatabaseRpcClient.RedisDetails(ctx, &resource_databasev1alpha.DbDetailsRequest{\n\t\t\tInstanceId: par.ID,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call DetailRedis err\")\n\t\t}\n\t\tif redisInfo == nil || redisInfo.BaseInfo == nil {\n\t\t\tredisSubInstanceInfo, err := d.Store.DbRedisInstanceDao.GetDbRedisSubInstance(par.ID)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, errors.WithMessage(err, \"GetDbRedisSubInstance err\")\n\t\t\t}\n\t\t\tif redisSubInstanceInfo == nil {\n\t\t\t\treturn nil, errors.New(fmt.Sprintf(\"redis instance %s not found\", par.ID))\n\t\t\t}\n\t\t\tregion = redisSubInstanceInfo.Region\n\t\t} else {\n\t\t\tregion = redisInfo.BaseInfo.Region\n\t\t}\n\t}\n\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tfor _, name := range par.MetricName {\n\t\tsubqueries := make([]pkg.SubQuery, 0)\n\t\ttsdbMetric, err := d.Store.MetricDao.GetOneByCode(ctx, name)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"get tsdb metric %s err\", name)\n\t\t}\n\t\tif tsdbMetric == nil {\n\t\t\treturn nil, errors.WithMessagef(fmt.Errorf(\"record not found\"), \"get tsdb metric %s err\", name)\n\t\t}\n\t\teipQuery := tsdbql_template.ParseTsdbQuery(tsdbMetric.ProductLine, tsdbMetric.MetricPrefix, par.ID)\n\t\tsubqueries = append(subqueries, pkg.SubQuery{\n\t\t\tAggregator: \"sum\",\n\t\t\tMetric:     eipQuery.Metric,\n\t\t\tTags:       map[string]string{\"host\": eipQuery.HostTag},\n\t\t\tDownsample: opentsdb.TimeToDownsample(par.End - par.Start),\n\t\t})\n\n\t\tqueryParam.Queries = subqueries\n\t\tqueryResp, err := opentsdb.Query(ctx, region, queryParam)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"tsdb query err, param : %v\", queryParam)\n\t\t}\n\t\t//查询404返回空数据\n\t\tif queryResp.StatusCode != http.StatusOK {\n\t\t\tif queryResp.StatusCode == http.StatusNotFound {\n\t\t\t\treturn &dto.ProductDbLineRsp{Lines: lines}, nil\n\t\t\t}\n\t\t\treturn nil, errors.New(\"tsdb query response failed\")\n\t\t}\n\t\t//查询200,但是数据为空，返回空数据\n\t\tif len(queryResp.QueryRespCnts) <= 0 {\n\t\t\treturn &dto.ProductDbLineRsp{Lines: lines}, nil\n\t\t}\n\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        tsdbMetric.DisplayName,\n\t\t\t\tValue:       nil,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t}\n\n\t\tdataPoints := queryResp.QueryRespCnts[0].GetDataPoints()\n\t\tfor _, v := range dataPoints {\n\t\t\tif tsdbMetric.Unit == \"%\" {\n\t\t\t\tv.Value = tools.FormPercent(v.Value.(float64) / 1e2)\n\t\t\t}\n\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:        fmt.Sprintf(\"%d\", tools.UnixToUnixMilli(v.Timestamp)),\n\t\t\t\tCode:        \"\",\n\t\t\t\tValue:       v.Value,\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tDescription: v.Metric,\n\t\t\t})\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\n\treturn &dto.ProductDbLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\n// 从 ES 搜索日志并返回 SearchResult\nfunc (d *DatabaseService) getLogFromES(param *dto.RedisLogReq, logType string, include []string) (*elastic.SearchResult, error) {\n\tif param.PageSize == 0 {\n\t\tparam.PageSize = 10\n\t}\n\tif param.PageNo == 0 {\n\t\tparam.PageNo = 1\n\t}\n\tfrom := (param.PageNo - 1) * param.PageSize\n\n\t// cluster_id 对应控制台实例ID，搜索实例及对应的日志类型\n\tboolQuery := elastic.NewBoolQuery().Must(elastic.NewMatchQuery(\"cluster_id\", param.Id), elastic.NewMatchQuery(\"event.dataset\", logType))\n\n\t// 匹配日志内容\n\tif len(param.Context) > 0 {\n\t\tboolQuery.Must(elastic.NewMatchQuery(\"message\", param.Context))\n\t}\n\t// 设置日志生成时间\n\tif param.Start != 0 && param.End != 0 {\n\t\tboolQuery.Filter(elastic.NewRangeQuery(\"event.created\").From(param.Start).To(param.End))\n\t}\n\t// 设置 ES 返回字段, 构建请求 DSL\n\tincludeContext := elastic.NewFetchSourceContext(true).Include(include...)\n\tsearchSource := elastic.NewSearchSource().Query(boolQuery).Sort(\"event.created\", false).\n\t\tFrom(from).Size(param.PageSize).FetchSourceContext(includeContext)\n\t// 打印 ES 请求DSL\n\tqueryDSL, _ := searchSource.Source()\n\tklog.V(1).Infof(\"KCS redis instacne log query DSL: %+v\", queryDSL)\n\n\tbuilder := elastic.NewSearchService(d.esClient).Index(lib.GetStringConf(\"base.elasticsearch.KCSRedisLogingElasticsearchIndex\"))\n\tbuilder.SearchSource(searchSource)\n\treturn builder.Do(context.Background())\n}\n\nfunc (d *DatabaseService) GetLogMsg(ctx context.Context, par *dto.RedisLogReq) (data dto.RedisLogRsp, err error) {\n\tif d.esClient == nil {\n\t\tif lib.GetStringSliceConf(\"base.elasticsearch.KCSRedisLogingElasticsearchAddress\") == nil {\n\t\t\treturn\n\t\t}\n\t\terr = errors.New(\"esClient is invalid\")\n\t\treturn\n\t}\n\tlogFields := []string{\"host.name\", \"message\", \"event\"}\n\tif par.LogType == \"redis.slowlog\" {\n\t\tlogFields = append(logFields, \"redis.slowlog\")\n\t}\n\n\tresp, err := d.getLogFromES(par, par.LogType, logFields)\n\tif err != nil {\n\t\tklog.Errorf(\"get redis instance %s log error: %s\", par.Id, err)\n\t\treturn\n\t}\n\n\tswitch par.LogType {\n\tcase \"redis.slowlog\":\n\t\tvar slowLog dto.SlowLog\n\t\tdata.Logs = resp.Each(reflect.TypeOf(slowLog))\n\tcase \"redis.log\":\n\t\tvar runLog dto.RunLog\n\t\tdata.Logs = resp.Each(reflect.TypeOf(runLog))\n\t}\n\tdata.TotalCount = resp.TotalHits()\n\tdata.PageNo = par.PageNo\n\tdata.PageSize = par.PageSize\n\treturn\n}\n\nfunc (d *DatabaseService) MysqlLogList(ctx *gin.Context, par dto.MysqlLogReq) (*dto.MysqlLogRsp, error) {\n\n\t//获取日志数据\n\ttotalCount, list, err := d.Store.DbInstanceRdsLogDao.GetDbRdsLogList(ctx, par)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar logList []dto.MysqlLog\n\n\tfor _, v := range *list {\n\t\tsize := fmt.Sprintf(\"%.2fKB\", float64(v.Size)/1024.0)\n\n\t\tTimeStr := time.Now().Format(\"20060102\")\n\n\t\tfileName := par.Name + \"_\" + v.Logtype + \"_\" + TimeStr + \".log.gz\"\n\t\tdownload := ks3client.GetObjectInputs(v.Name, fileName)\n\t\tinfo := dto.MysqlLog{\n\t\t\tId:        v.InstanceId,\n\t\t\tName:      v.Name,\n\t\t\tSize:      size,\n\t\t\tStartTime: v.StartTime.Format(\"2006-01-02 15:04:05\"),\n\t\t\tEndTime:   v.EndTime.Format(\"2006-01-02 15:04:05\"),\n\t\t\tDownload:  download,\n\t\t}\n\t\tlogList = append(logList, info)\n\t}\n\n\treturn &dto.MysqlLogRsp{\n\t\tTotalCount: totalCount,\n\t\tPageNo:     par.PageNo,\n\t\tPageSize:   par.PageSize,\n\t\tList:       logList,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/database/service/db_pool.go\n```golang\npackage service\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"sort\"\n\t\"strconv\"\n\t\"time\"\n\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tdb_rpc \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_database/v1alpha/gen\"\n\tprom_client \"ezone.ksyun.com/ezone/luban/monitor/common/client/prom\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/db\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/server\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/utils\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/dto\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/pkg/errors\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n\t\"k8s.io/klog/v2\"\n)\n\ntype DbPoolService struct {\n\tStore dao.DatabaseStore\n}\n\nfunc NewDbPoolService() *DbPoolService {\n\treturn &DbPoolService{\n\t\tStore: *dao.NewDatabaseStore(),\n\t}\n}\n\nfunc (s *DbPoolService) DbPoolOverviewAlert(ctx *gin.Context, par dto.DbPoolOverviewReq) (*dto.DbPoolOverviewAlertRsp, error) {\n\n\talertLevels := []types.OverviewAlert{\n\t\t{Name: \"紧急告警\", Level: \"p0\", Kind: \"error\", Number: 0, Unit: \"个\"},\n\t\t{Name: \"重要告警\", Level: \"p1\", Kind: \"warn\", Number: 0, Unit: \"个\"},\n\t\t{Name: \"次要告警\", Level: \"p2\", Kind: \"minor\", Number: 0, Unit: \"个\"},\n\t\t{Name: \"提醒告警\", Level: \"p3\", Kind: \"info\", Number: 0, Unit: \"个\"},\n\t}\n\n\talerts, err := s.Store.AlarmRpcClient.ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\tPageNo:   -1,\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t\tAz:       par.Az,\n\t\tStatus:   \"firing\",\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListAlerts err\")\n\t}\n\n\t//概览数据拼装\n\tvar alertSlots []types.BasicOverviewSlot\n\n\tfor _, alert := range alertLevels {\n\t\tvar alertSlotInfo types.BasicOverviewSlot\n\n\t\tkscNum := utils.CountAlertsNum(alerts.Items, \"ksc\", alert.Level)\n\t\trdsNum := utils.CountAlertsNum(alerts.Items, \"rds\", alert.Level)\n\n\t\talertSlotInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tName:        alert.Level,\n\t\t\tValue:       kscNum + rdsNum,\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tUnit:        \"个\",\n\t\t\tKind:        alert.Kind,\n\t\t\tPrognosis:   0,\n\t\t\tDescription: \"\",\n\t\t}\n\t\talertSlots = append(alertSlots, alertSlotInfo)\n\t}\n\n\treturn &dto.DbPoolOverviewAlertRsp{\n\t\tAlerts: alertSlots,\n\t}, nil\n\n}\n\nfunc (s *DbPoolService) DbPoolOverviewMonitor(ctx *gin.Context, par dto.DbPoolOverviewReq) (*dto.DbPoolOverviewMonitorRsp, error) {\n\n\trpcResult, err := s.Store.DatabaseRpcClient.DbResourcePoolList(ctx, &db_rpc.DbAggregateListRequest{\n\t\tDataBaseType: []string{\"mysql\", \"redis\"},\n\t\tPageNo:       1,\n\t\tPageSize:     -1,\n\t\tAz:           []string{},\n\t})\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar (\n\t\tserverTotal        int\n\t\tserverDownValues   []types.BasicOverviewSlotValue\n\t\tservice            []types.BasicOverviewSlot\n\t\tinstanceTotal      int\n\t\tinstanceDownValues []types.BasicOverviewSlotValue\n\t\tinstance           []types.BasicOverviewSlot\n\t)\n\n\tfor _, v := range rpcResult.Data {\n\n\t\tserverTotal += int(v.ServerCount)\n\t\tinstanceTotal += int(v.InstanceUsed)\n\n\t\tvar ipList []string\n\t\tfor _, server := range v.Servers {\n\n\t\t\tif server.Ip != \"\" {\n\t\t\t\tipList = append(ipList, server.Ip+\":9100\")\n\t\t\t}\n\t\t}\n\t\t//获取资源池下服务器状态\n\t\tstatusPromQL, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.Status](ipList))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t//查Prometheus\n\t\tstatus, err := prom_client.VectorQuery(ctx, statusPromQL.Items[0].RealPromql)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tserverMonitorUpStatusMap := prom_client.ParseServerMonitoringStatus(status)\n\t\tserverdown := 0\n\t\tfor _, v := range serverMonitorUpStatusMap {\n\t\t\tif v != \"up\" {\n\t\t\t\tserverdown++\n\t\t\t}\n\t\t}\n\t\tserverDownValues = append(serverDownValues, types.BasicOverviewSlotValue{\n\t\t\tName:        v.Name,\n\t\t\tValue:       serverdown,\n\t\t\tUnit:        \"\",\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tKind:        types.KindError,\n\t\t\tDescription: \"\",\n\t\t})\n\n\t\tinstanceDownValues = append(instanceDownValues, types.BasicOverviewSlotValue{\n\t\t\tName:        v.Name,\n\t\t\tValue:       v.AbnormalInstance,\n\t\t\tUnit:        \"\",\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tKind:        types.KindError,\n\t\t\tDescription: \"\",\n\t\t})\n\n\t}\n\n\tserviceDown := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tName:        \"服务器异常统计\",\n\t\t\tValue:       serverTotal,\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tUnit:        \"\",\n\t\t\tKind:        types.KindError,\n\t\t\tPrognosis:   0,\n\t\t\tDescription: \"\",\n\t\t},\n\t\tValues: serverDownValues,\n\t}\n\tservice = append(service, serviceDown)\n\n\tinstanceDown := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tName:        \"实例异常统计\",\n\t\t\tValue:       instanceTotal,\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tUnit:        \"\",\n\t\t\tKind:        types.KindError,\n\t\t\tPrognosis:   0,\n\t\t\tDescription: \"\",\n\t\t},\n\t\tValues: instanceDownValues,\n\t}\n\n\tinstance = append(instance, instanceDown)\n\n\treturn &dto.DbPoolOverviewMonitorRsp{\n\t\tAbnormalService:  service,\n\t\tAbnormalInstance: instance,\n\t}, nil\n}\n\nfunc (s *DbPoolService) DbPoolOverviewLine(ctx *gin.Context, par dto.DbPoolOverviewLineReq) (*dto.DbPoolOverviewLineRsp, error) {\n\n\trpcResult, err := s.Store.DatabaseRpcClient.DbResourcePoolList(ctx, &db_rpc.DbAggregateListRequest{\n\t\tDataBaseType: []string{\"mysql\", \"redis\"},\n\t\tPageNo:       1,\n\t\tPageSize:     -1,\n\t\tAz:           []string{},\n\t})\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tstart := par.Start / 1e3\n\tend := par.End / 1e3\n\tstep := tools.TimeToStepForInt(end - start)\n\n\tpredictStart := end\n\tpredictEnd := end + (end - start)\n\n\tvar lines []types.BasicOverviewSlot\n\tpredictionMetrics := []string{\"VcpuRemain\", \"MemRemain\", \"DiskRemain\"}\n\n\tfor _, v := range rpcResult.Data {\n\t\tvar (\n\t\t\tpsql       string\n\t\t\tpredictSql string\n\t\t\tunit       string\n\t\t\tunitType   string\n\t\t)\n\t\tswitch par.MetricName[0] {\n\t\tcase \"CpuRate\":\n\t\t\t//todo psql 改造\n\t\t\t//cpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.CpuUsageRate](ipList))\n\t\t\tcpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, db.TemplateMap[db.CpuUsage](v.Region, v.Az, v.Name, v.ResourcePoolType))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tpsql = cpuMode.Items[0].RealPromql\n\t\t\tunit = \"%\"\n\t\t\tunitType = types.TypePercent\n\t\tcase \"MemRate\":\n\t\t\t//memMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.MemUsageSumRate](ipList))\n\t\t\tmemMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, db.TemplateMap[db.MemoryUsage](v.Region, v.Az, v.Name, v.ResourcePoolType))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tpsql = memMode.Items[0].RealPromql\n\t\t\tunit = \"%\"\n\t\t\tunitType = types.TypePercent\n\t\tcase \"DiskRate\":\n\t\t\t//diskMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskUsageRate](ipList))\n\t\t\tdiskMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, db.TemplateMap[db.DiskUsage](v.Region, v.Az, v.Name, v.ResourcePoolType))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tpsql = diskMode.Items[0].RealPromql\n\t\t\tunit = \"%\"\n\t\t\tunitType = types.TypePercent\n\t\tcase \"VcpuRemain\": //cpu库存\n\t\t\tcpuRemainMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, db.TemplateMap[db.DbVcpuRemainCount](v.Region, v.Az, v.Name, v.ResourcePoolType))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tpsql = cpuRemainMode.Items[0].RealPromql\n\t\t\tunit = \"核\"\n\t\t\tunitType = types.TypeNumber\n\t\tcase \"MemRemain\": // 内存库存\n\t\t\tmemRemainMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, db.TemplateMap[db.DbMemoryRemainCount](v.Region, v.Az, v.Name, v.ResourcePoolType))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tpsql = memRemainMode.Items[0].RealPromql\n\t\t\tunit = \"B\"\n\t\t\tunitType = types.TypeStorage\n\t\tcase \"DiskRemain\": // 磁盘库存\n\t\t\tdiskRemainMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, db.TemplateMap[db.DbDiskRemainCount](v.Region, v.Az, v.Name, v.ResourcePoolType))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tpsql = diskRemainMode.Items[0].RealPromql\n\t\t\tunit = \"B\"\n\t\t\tunitType = types.TypeStorage\n\t\t}\n\n\t\tklog.Info(\"DbPoolOverviewLinePsql  \", psql)\n\t\tmatrix, err := prom_client.MatrixQuery(ctx, psql, v1.Range{\n\t\t\tStart: time.Unix(start, 0),\n\t\t\tEnd:   time.Unix(end, 0),\n\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t})\n\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t}\n\t\tline := types.BasicOverviewSlot{}\n\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:    0,\n\t\t\tName:     v.Name,\n\t\t\tValue:    0,\n\t\t\tUnitType: unitType,\n\t\t\tUnit:     unit,\n\t\t}\n\t\tfor _, m := range matrix {\n\t\t\tfor _, p := range m.Values {\n\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\tvalue := p.Value\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\tValue:       value,\n\t\t\t\t\tUnit:        unit,\n\t\t\t\t\tUnitType:    unitType,\n\t\t\t\t\tKind:        \"\",\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t//添加预测值\n\t\tif par.HasPrediction && tools.Contains(predictionMetrics, par.MetricName[0]) != -1 {\n\t\t\t//添加预测值\n\t\t\tline.Info.Prognosis = len(line.Values)\n\t\t\trangeDuration := strconv.FormatInt(3*(end-start), 10)\n\t\t\tpredictDuration := strconv.FormatInt(end-start, 10)\n\t\t\tswitch par.MetricName[0] {\n\t\t\tcase \"VcpuRemain\":\n\t\t\t\tpredictSql = db.GetPredictVCpuRemain(v.Name, v.ResourcePoolType, rangeDuration+\"s\", predictDuration)\n\t\t\tcase \"MemRemain\":\n\t\t\t\tpredictSql = db.GetPredictMemRemain(v.Name, v.ResourcePoolType, rangeDuration+\"s\", predictDuration)\n\t\t\tcase \"DiskRemain\":\n\t\t\t\tpredictSql = db.GetPredictDiskRemain(v.Name, v.ResourcePoolType, rangeDuration+\"s\", predictDuration)\n\t\t\t}\n\t\t\tpredictMatrix, err := prom_client.MatrixQuery(ctx, predictSql, v1.Range{\n\t\t\t\tStart: time.Unix(predictStart, 0),\n\t\t\t\tEnd:   time.Unix(predictEnd, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus predictMatrix: %v\\n\", err)\n\t\t\t}\n\t\t\tfor _, m := range predictMatrix {\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tUnit:        unit,\n\t\t\t\t\t\tUnitType:    unitType,\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"预测数据\",\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlines = append(lines, line)\n\t}\n\n\treturn &dto.DbPoolOverviewLineRsp{\n\t\tLines: lines,\n\t}, nil\n\n}\n\nfunc formatDuration(duration time.Duration) string {\n\tdays := duration / (24 * time.Hour)\n\tif days == 1 {\n\t\treturn \"1d\"\n\t} else if days == 7 {\n\t\treturn \"7d\"\n\t} else if days == 30 {\n\t\treturn \"30d\"\n\t} else {\n\t\treturn fmt.Sprintf(\"%dd\", days)\n\t}\n}\n\nfunc (s *DbPoolService) DbPoolList(ctx *gin.Context, par dto.DbPoolListReq) (*dto.DbPoolListRsp, error) {\n\n\trpcResult, err := s.Store.DatabaseRpcClient.DbResourcePoolList(ctx, &db_rpc.DbAggregateListRequest{\n\t\tRegion:       par.Region,\n\t\tAz:           par.Az,\n\t\tDataBaseType: par.DbType,\n\t\tQuery:        par.Query,\n\t\tPageNo:       1,\n\t\tPageSize:     -1,\n\t})\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar dbPollList []dto.DbPoolList\n\tfor _, v := range rpcResult.Data {\n\t\tinfo := dto.DbPoolList{\n\t\t\tId:                v.Id,\n\t\t\tName:              v.Name,\n\t\t\tDbType:            v.DataBaseType,\n\t\t\tRegion:            v.Region,\n\t\t\tAz:                v.Az,\n\t\t\tServerCount:       int(v.ServerCount),\n\t\t\tInstanceTotal:     int(v.InstanceTotal),\n\t\t\tInstanceUsed:      int(v.InstanceUsed),\n\t\t\tAbnormalInstance:  int(v.AbnormalInstance),\n\t\t\tInstanceAvailable: int(v.InstanceAvailable),\n\t\t\tCreateTime:        \"\",\n\t\t\tAlertNumber:       0,\n\t\t}\n\n\t\tif v.DataBaseType == \"mysql\" {\n\t\t\tinfo.ResourcePoolType = \"rds\"\n\t\t} else if v.DataBaseType == \"redis\" {\n\t\t\tinfo.ResourcePoolType = \"kcs\"\n\t\t}\n\n\t\tvar ipList []string\n\t\tfor _, dbServer := range v.Servers {\n\t\t\tif dbServer.Ip != \"\" {\n\t\t\t\tipList = append(ipList, dbServer.Ip+\":9100\")\n\t\t\t}\n\t\t}\n\t\t//获取资源池下服务器状态\n\t\tstatusPromQL, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.Status](ipList))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t//查Prometheus\n\t\tstatus, err := prom_client.VectorQuery(ctx, statusPromQL.Items[0].RealPromql)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tserverMonitorUpStatusMap := prom_client.ParseServerMonitoringStatus(status)\n\t\tserverdown := 0\n\t\tfor _, v := range serverMonitorUpStatusMap {\n\t\t\tif v != \"up\" {\n\t\t\t\tserverdown++\n\t\t\t}\n\t\t}\n\t\tinfo.AbnormalServerCount = serverdown\n\n\t\t//获取cpu使用率\n\t\tcpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, db.TemplateMap[db.CpuUsage](v.Region, v.Az, v.Name, v.ResourcePoolType))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcpu, err := prom_client.VectorQuery(ctx, cpuMode.Items[0].RealPromql)\n\t\tif err != nil {\n\t\t\tklog.Info(err)\n\t\t}\n\t\tfor _, v := range cpu {\n\t\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\t\tv.Value = 0\n\t\t\t}\n\t\t\tinfo.CpuLoad = tools.FormPercent(float64(v.Value))\n\t\t}\n\n\t\t//获取内存使用率\n\t\tmemMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, db.TemplateMap[db.MemoryUsage](v.Region, v.Az, v.Name, v.ResourcePoolType))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tmem, err := prom_client.VectorQuery(ctx, memMode.Items[0].RealPromql)\n\t\tif err != nil {\n\t\t\tklog.Info(err)\n\t\t}\n\t\tfor _, v := range mem {\n\t\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\t\tv.Value = 0\n\t\t\t}\n\t\t\tinfo.MemLoad = tools.FormPercent(float64(v.Value))\n\t\t}\n\t\t//获取磁盘使用率\n\t\tdiskMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, db.TemplateMap[db.DiskUsage](v.Region, v.Az, v.Name, v.ResourcePoolType))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdisk, err := prom_client.VectorQuery(ctx, diskMode.Items[0].RealPromql)\n\t\tif err != nil {\n\t\t\tklog.Info(err)\n\t\t}\n\t\tfor _, v := range disk {\n\t\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\t\tv.Value = 0\n\t\t\t}\n\t\t\tinfo.DiskLoad = tools.FormPercent(float64(v.Value))\n\t\t}\n\n\t\talertRpcRes, err := s.Store.AlarmRpcClient.ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\t\tRegion:          v.Region,\n\t\t\tAz:              []string{v.Az},\n\t\t\tResourceType:    []string{\"resourcePool\"},\n\t\t\tResourceSubType: []string{v.ResourcePoolType},\n\t\t\tSearchKey:       \"resource\",\n\t\t\tSearchValue:     v.Name,\n\t\t\tStatus:          \"firing\",\n\t\t})\n\t\tinfo.AlertNumber = int(alertRpcRes.Total)\n\n\t\tdbPollList = append(dbPollList, info)\n\t}\n\n\t//order\n\tif par.OrderCode != \"\" && par.OrderType != \"\" {\n\t\tresults := utils.Bucket{}\n\t\tfor i := 0; i < len(dbPollList); i++ {\n\t\t\tresults.Slice = append(results.Slice, dbPollList[i])\n\t\t}\n\t\ttime_by := func(a, b interface{}) bool {\n\t\t\treturn true\n\t\t}\n\t\tswitch par.OrderCode {\n\t\tcase \"CpuLoad\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.DbPoolList).CpuLoad < b.(dto.DbPoolList).CpuLoad\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.DbPoolList).CpuLoad > b.(dto.DbPoolList).CpuLoad\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"MemLoad\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.DbPoolList).MemLoad < b.(dto.DbPoolList).MemLoad\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.DbPoolList).MemLoad > b.(dto.DbPoolList).MemLoad\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"DiskLoad\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.DbPoolList).DiskLoad < b.(dto.DbPoolList).DiskLoad\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.DbPoolList).DiskLoad > b.(dto.DbPoolList).DiskLoad\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresults.By = time_by\n\t\tsort.Sort(results)\n\t\tfor i := 0; i < len(results.Slice); i++ {\n\t\t\tdbPollList[i] = results.Slice[i].(dto.DbPoolList)\n\t\t}\n\t}\n\n\t//分页\n\tlow := (par.PageNo - 1) * par.PageSize\n\tif low > len(dbPollList) {\n\t\tklog.Info(\"PageSize is too large\")\n\t}\n\n\thight := low + par.PageSize\n\tif hight > len(dbPollList) {\n\t\thight = len(dbPollList)\n\t}\n\n\tvar results dto.DbPoolListRsp\n\tresults.PageSize = par.PageSize\n\tresults.PageNo = par.PageNo\n\tresults.TotalCount = int64(len(dbPollList))\n\tresults.List = dbPollList[low:hight]\n\n\treturn &results, nil\n}\n\nfunc (s *DbPoolService) DbPoolDetailsLine(ctx *gin.Context, par dto.DbPoolDetailsLineReq) (*dto.DbPoolDetailsLineRsp, error) {\n\n\trpcResult, err := s.Store.DatabaseRpcClient.DbResourcePoolList(ctx, &db_rpc.DbAggregateListRequest{\n\t\tId:       par.Id,\n\t\tPageNo:   1,\n\t\tPageSize: -1,\n\t\tAz:       []string{},\n\t})\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar lines []types.BasicOverviewSlot\n\n\tstart := par.Start / 1e3\n\tend := par.End / 1e3\n\tstep := tools.TimeToStepForInt(end - start)\n\n\tfor _, host := range rpcResult.Data[0].Servers {\n\t\tif host.Ip != \"\" {\n\t\t\tvar psql string\n\t\t\tip := host.Ip + \":9100\"\n\t\t\tvar unitType string\n\t\t\tvar unit string\n\t\t\tunitType = types.TypePercent\n\t\t\tunit = \"%\"\n\t\t\tswitch par.MetricName[0] {\n\t\t\tcase \"CpuRate\":\n\t\t\t\tcpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.CpuUsageSumRate]([]string{ip}))\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tpsql = cpuMode.Items[0].RealPromql\n\t\t\tcase \"MemRate\":\n\t\t\t\tcpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.MemUsageRate]([]string{ip}))\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tpsql = cpuMode.Items[0].RealPromql\n\t\t\tcase \"MemUsage\":\n\t\t\t\tcpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.MemUsage]([]string{ip}))\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tpsql = cpuMode.Items[0].RealPromql\n\t\t\t\tunitType = types.TypeStorage\n\t\t\t\tunit = \"B\"\n\t\t\tcase \"DiskRate\":\n\t\t\t\tcpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskUsageRate]([]string{ip}))\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tpsql = cpuMode.Items[0].RealPromql\n\t\t\tcase \"DiskUsage\":\n\t\t\t\tcpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskUsage]([]string{ip}))\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tpsql = cpuMode.Items[0].RealPromql\n\t\t\t\tunitType = types.TypeStorage\n\t\t\t\tunit = \"B\"\n\t\t\t}\n\n\t\t\tmatrix, err := prom_client.MatrixQuery(ctx, psql, v1.Range{\n\t\t\t\tStart: time.Unix(start, 0),\n\t\t\t\tEnd:   time.Unix(end, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\n\t\t\tline := types.BasicOverviewSlot{}\n\t\t\tfor _, m := range matrix {\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tUnit:        unit,\n\t\t\t\t\t\tUnitType:    unitType,\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"\",\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:    0,\n\t\t\t\tName:     host.HostName,\n\t\t\t\tValue:    0,\n\t\t\t\tUnitType: unitType,\n\t\t\t\tUnit:     unit,\n\t\t\t}\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\treturn &dto.DbPoolDetailsLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/dto/ebs_volume_response.go\n```golang\npackage dto\n\nimport \"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\ntype EbsVolumeOverviewTopRsp struct {\n\tTops []types.BasicOverviewSlot `json:\"Tops\"`\n}\n\ntype EbsVolumeOverviewRsp struct {\n\tEbsStorageUse           []types.BasicOverviewSlot `json:\"EbsStorageUse\"`\n\tEbsVolumePlatformCounts []types.BasicOverviewSlot `json:\"EbsVolumePlatformCounts\"`\n\tEbsVolumeBusinessCounts []types.BasicOverviewSlot `json:\"EbsVolumeBusinessCounts\"`\n}\n\ntype EbsVolumeDetailMetricRsp struct {\n\tResourceOverview []EbsVolumeDetailMetric `json:\"ResourceOverview\"`\n}\n\ntype EbsVolumeDetailMetric struct {\n\tPoolId   string      `json:\"PoolId\"`\n\tName     string      `json:\"Name\"`\n\tUnit     string      `json:\"Unit\"`\n\tUnitType string      `json:\"UnitType\"`\n\tValue    interface{} `json:\"Value\"`\n\tKind     string      `json:\"Kind\"`\n}\n\ntype EbsVolumeDetailMetricLineRsp struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/dto/ebs_volume_request.go\n```golang\npackage dto\n\ntype EbsVolumeOverviewTopReq struct {\n\tRegion     string   `json:\"Region\"`\n\tAz         string   `json:\"Az\"`\n\tMetricName []string `json:\"MetricName\"`\n\tTopK       int      `jons:\"TopK\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n\tDiskType   string   `json:\"DiskType\"`\n}\n\ntype EbsVolumeOverviewReq struct {\n\tRegion   string `json:\"Region\"`\n\tAz       string `json:\"Az\"`\n\tDiskType string `json:\"DiskType\"`\n}\n\ntype EbsVolumeDetailMetricReq struct {\n\tId string `json:\"Id\"`\n}\n\ntype EbsVolumeDetailMetricLineReq struct {\n\tId         string   `json:\"Id\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n\tMetricName []string `json:\"MetricName\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/dto/ebs_pool_request.go\n```golang\npackage dto\n\n// EbsPoolOverviewAlertReq 块存储资源池概览告警请求\ntype EbsPoolOverviewAlertReq struct {\n\tRegion   string `json:\"Region\"`\n\tAz       string `json:\"Az\"`\n\tPoolType string `json:\"PoolType\"`\n}\n\n// EbsPoolOverviewReq 块存储资源池总览概览\ntype EbsPoolOverviewReq struct {\n\tRegion   string `json:\"Region\"`\n\tAz       string `json:\"Az\"`\n\tPoolType string `json:\"PoolType\"`\n}\n\ntype EbsPoolOverviewLineReq struct {\n\tPoolType      string   `json:\"PoolType\"`\n\tRegion        string   `json:\"Region\"`\n\tAz            string   `json:\"Az\"`\n\tMetricName    []string `json:\"MetricName\"`\n\tStart         int64    `json:\"Start\"`\n\tEnd           int64    `json:\"End\"`\n\tHasPrediction bool     `json:\"HasPrediction\"`\n}\n\ntype EbsPoolListReq struct {\n\tPageNo    int               `json:\"PageNo\"`\n\tPageSize  int               `json:\"PageSize\"`\n\tRegion    string            `json:\"Region\"`\n\tAz        []string          `json:\"Az\"`\n\tOrderCode string            `json:\"OrderCode\"`\n\tOrderType string            `json:\"OrderType\"`\n\tPoolType  []string          `json:\"PoolType\"`\n\tQuery     map[string]string `json:\"Query\"`\n}\n\ntype EbsPoolDetailMetricReq struct {\n\tPoolId string `json:\"PoolId\"`\n}\n\ntype EbsPoolDetailMetricLineReq struct {\n\tPoolType   string   `json:\"PoolType\"`\n\tRegion     string   `json:\"Region\"`\n\tAz         string   `json:\"Az\"`\n\tMetricName []string `json:\"MetricName\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/dto/ebs_pool_response.go\n```golang\npackage dto\n\nimport \"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\n// EbsPoolOverviewAlertRsp 块存储资源池概览告警响应\ntype EbsPoolOverviewAlertRsp struct {\n\tAlerts []types.BasicOverviewSlot `json:\"Alerts\"`\n}\n\ntype EbsPoolOverviewRsp struct {\n\tEbsPools                []types.BasicOverviewSlot `json:\"EbsPools\"`\n\tEbsVolumePlatformCounts []types.BasicOverviewSlot `json:\"EbsVolumePlatformCounts\"`\n\tEbsVolumeBusinessCounts []types.BasicOverviewSlot `json:\"EbsVolumeBusinessCounts\"`\n}\n\ntype EbsPoolOverviewLineRsp struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\ntype EbsPoolListRsp struct {\n\tTotalCount int               `json:\"TotalCount\"`\n\tPageNo     int               `json:\"PageNo\"`\n\tPageSize   int               `json:\"PageSize\"`\n\tDataList   []*EbsPoolMonitor `json:\"DataList\"`\n}\n\ntype EbsPoolMonitor struct {\n\tId                string      `json:\"Id\"`\n\tName              string      `json:\"Name\"`\n\tRegion            string      `json:\"Region\"`\n\tAz                string      `json:\"Az\"`\n\tPoolType          string      `json:\"PoolType\"`\n\tServerCount       int         `json:\"ServerCount\"`\n\tCloudDiskCount    int         `json:\"CloudDiskCount\"`\n\tCapacityTotal     float64     `json:\"CapacityTotal\"`\n\tCapacityAvailable float64     `json:\"CapacityAvailable\"`\n\tCapacityUsedRate  float64     `json:\"CapacityUsedRate\"`\n\tErrorRate         float64     `json:\"ErrorRate\"`\n\tIOInput           interface{} `json:\"IOInput\"`\n\tIODelay           interface{} `json:\"IODelay\"`\n\tBandwidth         interface{} `json:\"Bandwidth\"`\n\tCreateTime        int64       `json:\"CreateTime\"`\n\tAlertCount        int         `json:\"AlertCount\"`\n}\n\ntype EbsPoolDetailMetricRsp struct {\n\tResourceOverview []EbsPoolDetailMetric `json:\"ResourceOverview\"`\n}\n\ntype EbsPoolDetailMetric struct {\n\tPoolId   string      `json:\"PoolId\"`\n\tName     string      `json:\"Name\"`\n\tUnit     string      `json:\"Unit\"`\n\tUnitType string      `json:\"UnitType\"`\n\tValue    interface{} `json:\"Value\"`\n\tKind     string      `json:\"Kind\"`\n}\n\ntype EbsPoolDetailMetricLineRsp struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\n// OptionalEbsPoolResult 可选项列表\ntype OptionalEbsPoolResult map[string]any\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/dao/metric_top.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/gormSerializer\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/model\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/schema\"\n)\n\ntype MetricTopDao struct {\n\tdb *gorm.DB\n}\n\ntype QueryParams struct {\n\tRegion string\n\tAz     string\n\tCode   string\n}\n\nfunc NewMetricTopDao() *MetricTopDao {\n\tschema.RegisterSerializer(\"json_str\", gormSerializer.JSONSerializer{})\n\treturn &MetricTopDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\nfunc (m *MetricTopDao) GetOneByCode(q QueryParams) (model.MonitorTop, error) {\n\tvar data model.MonitorTop\n\tif err := m.db.Where(\"region = ? AND az = ? AND code = ?\", q.Region, q.Az, q.Code).First(&data).Error; err != nil {\n\t\treturn data, err\n\t}\n\treturn data, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/dao/store.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tresource_blockstoragev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_blockstorage/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n)\n\ntype Store interface {\n\t// DAO 服务\n\tMetric() *MetricDao\n\tMetricTop() *MetricTopDao\n\n\tAlarmRpcClient() alarmv1alpha.AlarmServiceClient\n\tEbsPoolRpcClient() resource_blockstoragev1alpha.EbsPoolServiceClient\n\tEbsVolumeRpcClient() resource_blockstoragev1alpha.EbsVolumeServiceClient\n\tServerRpcClient() resource_serverv1alpha.ResourceServiceClient\n}\n\ntype blockStorageStore struct{}\n\nfunc NewBlockStorageStore() *blockStorageStore {\n\treturn &blockStorageStore{}\n}\n\nfunc (n *blockStorageStore) Metric() *MetricDao {\n\treturn NewMetricDao()\n}\n\nfunc (n *blockStorageStore) MetricTop() *MetricTopDao {\n\treturn NewMetricTopDao()\n}\n\nfunc (n *blockStorageStore) AlarmRpcClient() alarmv1alpha.AlarmServiceClient {\n\talarmAddr := lib.GetStringConf(\"base.grpc.alarm\")\n\talarmConn, err := grpcx.NewGrpcClientConn(alarmAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect alarm grpc server error, %s\": err.Error()})\n\t}\n\treturn alarmv1alpha.NewAlarmServiceClient(alarmConn)\n}\n\nfunc (n *blockStorageStore) EbsPoolRpcClient() resource_blockstoragev1alpha.EbsPoolServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn resource_blockstoragev1alpha.NewEbsPoolServiceClient(resourceConn)\n}\n\nfunc (n *blockStorageStore) EbsVolumeRpcClient() resource_blockstoragev1alpha.EbsVolumeServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn resource_blockstoragev1alpha.NewEbsVolumeServiceClient(resourceConn)\n}\n\nfunc (n *blockStorageStore) ServerRpcClient() resource_serverv1alpha.ResourceServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn resource_serverv1alpha.NewResourceServiceClient(resourceConn)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/dao/metric.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/model\"\n\t\"gorm.io/gorm\"\n)\n\ntype MetricDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewMetricDao() *MetricDao {\n\treturn &MetricDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\nfunc (m *MetricDao) GetOneByCode(code string) (*model.MonitorTsdbMetrics, error) {\n\tcontent := model.MonitorTsdbMetrics{}\n\terr := m.db.Where(\"code = ?\", code).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &content, nil\n}\n\n// get list by codes\nfunc (m *MetricDao) GetListByCodes(codes []string) ([]model.MonitorTsdbMetrics, error) {\n\tvar content []model.MonitorTsdbMetrics\n\terr := m.db.Where(\"code in (?)\", codes).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn content, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/utils/tools.go\n```golang\npackage utils\n\nfunc TimeToStepForInt(fileSize int64) (size int) {\n\t//处理的单位是秒\n\tif fileSize >= 0 {\n\t\tif fileSize <= (3600.0 * 3.0) {\n\t\t\treturn 60 //1m\n\t\t} else if fileSize <= (3600.0 * 24.0 * 7) {\n\t\t\treturn 3600 //1h\n\t\t} else {\n\t\t\treturn 86400 //1d\n\t\t}\n\t}\n\treturn 0\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/utils/collection/set.go\n```golang\npackage collection\n\nimport (\n\t\"fmt\"\n)\n\nconst (\n\tunmanaged = iota\n\tuntyped\n\tintType\n\tint64Type\n\tuintType\n\tuint64Type\n\tstringType\n)\n\n// PlaceholderType represents a placeholder type.\ntype PlaceholderType = struct{}\n\n// Set is not thread-safe, for concurrent use, make sure to use it with synchronization.\ntype Set struct {\n\tdata map[interface{}]PlaceholderType\n\ttp   int\n}\n\n// NewSet returns a managed Set, can only put the values with the same type.\nfunc NewSet() *Set {\n\treturn &Set{\n\t\tdata: make(map[interface{}]PlaceholderType),\n\t\ttp:   untyped,\n\t}\n}\n\n// NewUnmanagedSet returns a unmanaged Set, which can put values with different types.\nfunc NewUnmanagedSet() *Set {\n\treturn &Set{\n\t\tdata: make(map[interface{}]PlaceholderType),\n\t\ttp:   unmanaged,\n\t}\n}\n\n// Add adds i into s.\nfunc (s *Set) Add(i ...interface{}) {\n\tfor _, each := range i {\n\t\ts.add(each)\n\t}\n}\n\n// AddInt adds int values ii into s.\nfunc (s *Set) AddInt(ii ...int) {\n\tfor _, each := range ii {\n\t\ts.add(each)\n\t}\n}\n\n// AddInt64 adds int64 values ii into s.\nfunc (s *Set) AddInt64(ii ...int64) {\n\tfor _, each := range ii {\n\t\ts.add(each)\n\t}\n}\n\n// AddUint adds uint values ii into s.\nfunc (s *Set) AddUint(ii ...uint) {\n\tfor _, each := range ii {\n\t\ts.add(each)\n\t}\n}\n\n// AddUint64 adds uint64 values ii into s.\nfunc (s *Set) AddUint64(ii ...uint64) {\n\tfor _, each := range ii {\n\t\ts.add(each)\n\t}\n}\n\n// AddStr adds string values ss into s.\nfunc (s *Set) AddStr(ss ...string) {\n\tfor _, each := range ss {\n\t\ts.add(each)\n\t}\n}\n\n// Contains checks if i is in s.\nfunc (s *Set) Contains(i interface{}) bool {\n\tif len(s.data) == 0 {\n\t\treturn false\n\t}\n\n\ts.validate(i)\n\t_, ok := s.data[i]\n\treturn ok\n}\n\n// Keys returns the keys in s.\nfunc (s *Set) Keys() []interface{} {\n\tvar keys []interface{}\n\n\tfor key := range s.data {\n\t\tkeys = append(keys, key)\n\t}\n\n\treturn keys\n}\n\n// KeysInt returns the int keys in s.\nfunc (s *Set) KeysInt() []int {\n\tvar keys []int\n\n\tfor key := range s.data {\n\t\tif intKey, ok := key.(int); ok {\n\t\t\tkeys = append(keys, intKey)\n\t\t}\n\t}\n\n\treturn keys\n}\n\n// KeysInt64 returns int64 keys in s.\nfunc (s *Set) KeysInt64() []int64 {\n\tvar keys []int64\n\n\tfor key := range s.data {\n\t\tif intKey, ok := key.(int64); ok {\n\t\t\tkeys = append(keys, intKey)\n\t\t}\n\t}\n\n\treturn keys\n}\n\n// KeysUint returns uint keys in s.\nfunc (s *Set) KeysUint() []uint {\n\tvar keys []uint\n\n\tfor key := range s.data {\n\t\tif intKey, ok := key.(uint); ok {\n\t\t\tkeys = append(keys, intKey)\n\t\t}\n\t}\n\n\treturn keys\n}\n\n// KeysUint64 returns uint64 keys in s.\nfunc (s *Set) KeysUint64() []uint64 {\n\tvar keys []uint64\n\n\tfor key := range s.data {\n\t\tif intKey, ok := key.(uint64); ok {\n\t\t\tkeys = append(keys, intKey)\n\t\t}\n\t}\n\n\treturn keys\n}\n\n// KeysStr returns string keys in s.\nfunc (s *Set) KeysStr() []string {\n\tvar keys []string\n\n\tfor key := range s.data {\n\t\tif strKey, ok := key.(string); ok {\n\t\t\tkeys = append(keys, strKey)\n\t\t}\n\t}\n\n\treturn keys\n}\n\n// Remove removes i from s.\nfunc (s *Set) Remove(i interface{}) {\n\ts.validate(i)\n\tdelete(s.data, i)\n}\n\n// Count returns the number of items in s.\nfunc (s *Set) Count() int {\n\treturn len(s.data)\n}\n\nfunc (s *Set) add(i interface{}) {\n\tswitch s.tp {\n\tcase unmanaged:\n\t\t// do nothing\n\tcase untyped:\n\t\ts.setType(i)\n\tdefault:\n\t\ts.validate(i)\n\t}\n\ts.data[i] = PlaceholderType{}\n}\n\nfunc (s *Set) setType(i interface{}) {\n\t// s.tp can only be untyped here\n\tswitch i.(type) {\n\tcase int:\n\t\ts.tp = intType\n\tcase int64:\n\t\ts.tp = int64Type\n\tcase uint:\n\t\ts.tp = uintType\n\tcase uint64:\n\t\ts.tp = uint64Type\n\tcase string:\n\t\ts.tp = stringType\n\t}\n}\n\nfunc (s *Set) validate(i interface{}) {\n\tif s.tp == unmanaged {\n\t\treturn\n\t}\n\n\tswitch i.(type) {\n\tcase int:\n\t\tif s.tp != intType {\n\t\t\tfmt.Errorf(\"Error: element is int, but set contains elements with type %d\", s.tp)\n\t\t}\n\tcase int64:\n\t\tif s.tp != int64Type {\n\t\t\tfmt.Errorf(\"Error: element is int64, but set contains elements with type %d\", s.tp)\n\t\t}\n\tcase uint:\n\t\tif s.tp != uintType {\n\t\t\tfmt.Errorf(\"Error: element is uint, but set contains elements with type %d\", s.tp)\n\t\t}\n\tcase uint64:\n\t\tif s.tp != uint64Type {\n\t\t\tfmt.Errorf(\"Error: element is uint64, but set contains elements with type %d\", s.tp)\n\t\t}\n\tcase string:\n\t\tif s.tp != stringType {\n\t\t\tfmt.Errorf(\"Error: element is string, but set contains elements with type %d\", s.tp)\n\t\t}\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/utils/serializer/register.go\n```golang\npackage serializer\n\nimport (\n\t\"gorm.io/gorm/schema\"\n)\n\nfunc RegisterSerializer() {\n\tschema.RegisterSerializer(\"json_str\", JSONSerializer{})\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/utils/serializer/json.go\n```golang\npackage serializer\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"reflect\"\n\n\t\"gorm.io/gorm/schema\"\n)\n\n// JSONSerializer json序列化器\ntype JSONSerializer struct {\n}\n\n// 实现 Scan 方法\nfunc (JSONSerializer) Scan(ctx context.Context, field *schema.Field, dst reflect.Value, dbValue interface{}) (err error) {\n\tfieldValue := reflect.New(field.FieldType)\n\n\tif dbValue != nil {\n\t\tvar bytes []byte\n\t\tswitch v := dbValue.(type) {\n\t\tcase []byte:\n\t\t\tbytes = v\n\t\tcase string:\n\t\t\tbytes = []byte(v)\n\t\tdefault:\n\t\t\treturn fmt.Errorf(\"failed to unmarshal JSONB value: %#v\", dbValue)\n\t\t}\n\n\t\terr = json.Unmarshal(bytes, fieldValue.Interface())\n\t}\n\n\tfield.ReflectValueOf(ctx, dst).Set(fieldValue.Elem())\n\treturn\n}\n\n// 实现 Value 方法\nfunc (JSONSerializer) Value(ctx context.Context, field *schema.Field, dst reflect.Value, fieldValue interface{}) (interface{}, error) {\n\treturn json.Marshal(fieldValue)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/controller/ebs_pool.go\n```golang\npackage controller\n\nimport (\n\t\"net/http\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype EbsPoolController struct {\n\tsvc service.EbsPoolService\n}\n\nfunc NewEbsPoolController() *EbsPoolController {\n\treturn &EbsPoolController{\n\t\tsvc: service.NewEbsPoolService(),\n\t}\n}\n\n// OverviewAlert godoc\n// @Summary      EbsPool Alert Overview\n// @Description  Get EbsPool Alert Overview\n// @Tags         EbsPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsPoolOverviewAlertReq true \"ebsPool Overview Alert Request\"\n// @Success      200  {object}  dto.EbsPoolOverviewAlertRsp\n// @Router       /block_storage/ebs_pool/overview_alert [POST]\nfunc (n *EbsPoolController) OverviewAlert(c *gin.Context) {\n\tvar params dto.EbsPoolOverviewAlertReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewAlert(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取块存储概览告警信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// Overview godoc\n// @Summary      EbsPool  Overview\n// @Description  Get EbsPool  Overview\n// @Tags         EbsPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsPoolOverviewReq true \"ebsPool Overview Request\"\n// @Success      200  {object}  dto.EbsPoolOverviewRsp\n// @Router       /block_storage/ebs_pool/overview [POST]\nfunc (n *EbsPoolController) Overview(c *gin.Context) {\n\tvar params dto.EbsPoolOverviewReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.Overview(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取块存储概览信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// OverviewLine godoc\n// @Summary      EbsPool OverviewLine\n// @Description  Get EbsPool Overview\n// @Tags         EbsPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsPoolOverviewLineReq true \"ebsPool OverviewLine Request\"\n// @Success      200  {object}  dto.EbsPoolOverviewLineRsp\n// @Router       /block_storage/ebs_pool/overview_line [POST]\nfunc (n *EbsPoolController) OverviewLine(c *gin.Context) {\n\tvar params dto.EbsPoolOverviewLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取块存储概览线信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// List godoc\n// @Summary      EbsPool List\n// @Description  Get EbsPool List\n// @Tags         EbsPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsPoolListReq true \"ebsPool List Request\"\n// @Success      200  {object}  dto.EbsPoolListReq\n// @Router       /block_storage/ebs_pool/list [POST]\nfunc (n *EbsPoolController) List(c *gin.Context) {\n\tvar params dto.EbsPoolListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.List(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取块存储列表信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailMetricOverview godoc\n// @Summary      EbsPool DetailMetricOverview\n// @Description  Get EbsPool DetailMetricOverview\n// @Tags         EbsPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsPoolDetailMetricReq true \"ebsPool DetailMetricOverview Request\"\n// @Success      200  {object}  dto.EbsPoolDetailMetricRsp\n// @Router       /block_storage/ebs_pool/detail_metric_overview [POST]\nfunc (n *EbsPoolController) DetailMetricOverview(c *gin.Context) {\n\tvar params dto.EbsPoolDetailMetricReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.DetailMetricOverview(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取块存储详情-监控指标-详情概览信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailMetricLines godoc\n// @Summary      EbsPool DetailMetricLine\n// @Description  Get EbsPool DetailMetricLine\n// @Tags         EbsPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsPoolDetailMetricLineReq true \"ebsPool DetailMetricLine Request\"\n// @Success      200  {object}  dto.EbsPoolDetailMetricLineRsp\n// @Router       /block_storage/ebs_pool/detail_metric_lines [POST]\nfunc (n *EbsPoolController) DetailMetricLines(c *gin.Context) {\n\tvar params dto.EbsPoolDetailMetricLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.DetailMetricLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取块存储详情-监控指标-监控线信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// ListOptionalCondition godoc\n// @Summary      EbsPool ListOptionalCondition\n// @Description  Get EbsPool ListOptionalCondition\n// @Tags         EbsPool\n// @Accept       json\n// @Produce      json\n// @Success      200  {object}  dto.OptionalEbsPoolResult\n// @Router       /block_storage/ebs_pool/list_optional_condition [GET]\nfunc (n *EbsPoolController) ListOptionalCondition(c *gin.Context) {\n\t// 业务处理\n\tres, err := n.svc.GetListOptionalCondition(c)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取可选列表信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/controller/ebs_volume.go\n```golang\npackage controller\n\nimport (\n\t\"net/http\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype EbsVolumeController struct {\n\tsvc service.EbsVolumeService\n}\n\nfunc NewEbsVolumeController() *EbsVolumeController {\n\treturn &EbsVolumeController{\n\t\tsvc: service.NewEbsVolumeService(),\n\t}\n}\n\n// OverviewTop godoc\n// @Summary      EbsVolume OverviewTop\n// @Description  Get EbsVolume OverviewTop\n// @Tags         EbsVolume\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsVolumeOverviewTopReq true \"ebsVolume Overview Top Request\"\n// @Success      200  {object}  dto.EbsVolumeOverviewTopRsp\n// @Router       /block_storage/ebs_volume/overview_top [POST]\nfunc (n *EbsVolumeController) OverviewTop(c *gin.Context) {\n\tvar params dto.EbsVolumeOverviewTopReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewTop(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云产品-块存储概览TopK信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// Overview godoc\n// @Summary      EbsVolume Overview\n// @Description  Get EbsVolume Overview\n// @Tags         EbsVolume\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsVolumeOverviewReq true \"ebsVolume Overview Request\"\n// @Success      200  {object}  dto.EbsVolumeOverviewRsp\n// @Router       /block_storage/ebs_volume/overview [POST]\nfunc (n *EbsVolumeController) Overview(c *gin.Context) {\n\tvar params dto.EbsVolumeOverviewReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.Overview(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云产品-块存储概览信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailMetric godoc\n// @Summary      EbsVolume DetailMetric\n// @Description  Get EbsVolume DetailMetric\n// @Tags         EbsVolume\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsVolumeDetailMetricReq true \"ebsVolume detail metric Request\"\n// @Success      200  {object}  dto.EbsVolumeDetailMetricRsp\n// @Router       /block_storage/ebs_volume/detail_metric [POST]\nfunc (n *EbsVolumeController) DetailMetric(c *gin.Context) {\n\tvar params dto.EbsVolumeDetailMetricReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.DetailMetric(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云产品-块存储详情指标信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailMetricLines godoc\n// @Summary      EbsVolume DetailMetricLine\n// @Description  Get EbsVolume DetailMetricLine\n// @Tags         EbsVolume\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsVolumeDetailMetricLineReq true \"ebsVolume detail metric Request\"\n// @Success      200  {object}  dto.EbsVolumeDetailMetricLineRsp\n// @Router       /block_storage/ebs_volume/detail_metric_lines [POST]\nfunc (n *EbsVolumeController) DetailMetricLines(c *gin.Context) {\n\tvar params dto.EbsVolumeDetailMetricLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.DetailMetricLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云产品-块存储详情指标线信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/constant/constant.go\n```golang\npackage constant\n\nvar EbsVolumeStatusMap = map[string]string{\n\t\"creating\":        \"创建中\",\n\t\"available\":       \"待挂载\",\n\t\"attaching\":       \"挂载中\",\n\t\"in-use\":          \"使用中\",\n\t\"detaching\":       \"卸载中\",\n\t\"extending\":       \"扩容中\",\n\t\"deleting\":        \"删除中\",\n\t\"error\":           \"错误\",\n\t\"error_attaching\": \"挂载失败\",\n\t\"error_detaching\": \"卸载失败\",\n\t\"error_deleting\":  \"删除失败\",\n\t\"error_extending\": \"扩容失败\",\n\t\"deleted\":         \"已删除\",\n\t\"recycling\":       \"回收中\",\n\t\"rollbacking\":     \"回滚中\",\n}\n\nvar EbsVolumeUseStatusMap = map[string]string{\n\t\"creating\":    \"创建中\",\n\t\"available\":   \"待挂载\",\n\t\"attaching\":   \"挂载中\",\n\t\"in-use\":      \"使用中\",\n\t\"detaching\":   \"卸载中\",\n\t\"extending\":   \"扩容中\",\n\t\"recycling\":   \"回收中\",\n\t\"rollbacking\": \"回滚中\",\n}\n\nvar PlatformTenantName = []string{\"init_test\", \"init_user\"}\n\nvar EbsVolumeTopMap = map[string]string{\n\t\"ebs_volume_band_read\":      \"读带宽\",\n\t\"ebs_volume_band_write\":     \"写带宽\",\n\t\"ebs_volume_io_read\":        \"读\",\n\t\"ebs_volume_io_write\":       \"写\",\n\t\"ebs_volume_io_read_delay\":  \"读延时\",\n\t\"ebs_volume_io_write_delay\": \"写延时\",\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/model/monitor_tsdb_metrics.go\n```golang\npackage model\n\nimport \"time\"\n\ntype MonitorTsdbMetrics struct {\n\tID           int       `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`\n\tProductLine  string    `gorm:\"column:product_line;NOT NULL\"`  // 产品线\n\tCode         string    `gorm:\"column:code;NOT NULL\"`          // 唯一标识\n\tName         string    `gorm:\"column:name;NOT NULL\"`          // 中文名\n\tMetricPrefix string    `gorm:\"column:metric_prefix;NOT NULL\"` // metric前缀\n\tUnit         string    `gorm:\"column:unit;NOT NULL;default:''\"`\n\tCreatedAt    time.Time `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"`\n\tUpdatedAt    time.Time `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"`\n\tDeletedAt    time.Time `gorm:\"column:deleted_at\"`\n}\n\nfunc (m *MonitorTsdbMetrics) TableName() string {\n\treturn \"monitor_tsdb_metrics\"\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/model/monitor_top.go\n```golang\npackage model\n\nimport (\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n)\n\n// region + az + code 唯一\ntype MonitorTop struct {\n\tID                  int        `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`        // 主键\n\tProductLine         string     `gorm:\"column:product_line;NOT NULL\"`                // 产品线\n\tRegion              string     `gorm:\"column:region;NOT NULL\"`                      // 区域\n\tAz                  string     `gorm:\"column:az;NOT NULL\"`                          // 可用区\n\tCode                string     `gorm:\"column:code;NOT NULL\"`                        // top项的唯一标识\n\tName                string     `gorm:\"column:name;NOT NULL\"`                        // 中文名\n\tHalfHour            []TopValue `gorm:\"column:half_hour;serializer:json_str\"`        // 0.5h top10数据\n\tHalfHourUpdateAt    time.Time  `gorm:\"column:half_hour_update_at\"`                  // 0.5h更新时间\n\tOneHour             []TopValue `gorm:\"column:one_hour;serializer:json_str\"`         // 1h top10数据\n\tOneHourUpdateAt     time.Time  `gorm:\"column:one_hour_update_at\"`                   // 1h更新时间\n\tThreeHours          []TopValue `gorm:\"column:three_hours;serializer:json_str\"`      // 3h top10数据\n\tThreeHoursUpdateAt  time.Time  `gorm:\"column:three_hours_update_at\"`                // 3h更新时间\n\tTwelveHours         []TopValue `gorm:\"column:twelve_hours;serializer:json_str\"`     // 12h top10数据\n\tTwelveHoursUpdateAt time.Time  `gorm:\"column:twelve_hours_update_at\"`               // 12h更新时间\n\tOneDay              []TopValue `gorm:\"column:one_day;serializer:json_str\"`          // 1d top10数据\n\tOneDayUpdateAt      time.Time  `gorm:\"column:one_day_update_at\"`                    // 1d更新时间\n\tSevenDays           []TopValue `gorm:\"column:seven_days;serializer:json_str\"`       // 7d top10数据\n\tSevenDaysUpdateAt   time.Time  `gorm:\"column:seven_days_update_at\"`                 // 7d更新时间\n\tThirtyDays          []TopValue `gorm:\"column:thirty_days;serializer:json_str\"`      // 30d top10数据\n\tThirtyDaysUpdateAt  time.Time  `gorm:\"column:thirty_days_update_at\"`                // 30d更新时间\n\tCreatedAt           time.Time  `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"` // 创建时间\n\tUpdatedAt           time.Time  `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"` // 更新时间\n\tDeletedAt           time.Time  `gorm:\"column:deleted_at\"`                           // 删除时间\n}\ntype TopValue struct {\n\tId    string  //实例唯一id\n\tName  string  //名称\n\tValue float64 //值\n}\n\nfunc (m *MonitorTop) TableName() string {\n\treturn \"monitor_top\"\n}\n\nfunc (m *MonitorTop) ParseIntervalData(start, end int64) []TopValue {\n\tvar intervalData []TopValue\n\tintervalStr := opentsdb.ParseTimeInterval(start, end)\n\tswitch intervalStr {\n\tcase \"0.5h\":\n\t\tintervalData = m.HalfHour\n\tcase \"1h\":\n\t\tintervalData = m.OneHour\n\tcase \"3h\":\n\t\tintervalData = m.ThreeHours\n\tcase \"12h\":\n\t\tintervalData = m.TwelveHours\n\tcase \"1d\":\n\t\tintervalData = m.OneDay\n\tcase \"7d\":\n\t\tintervalData = m.SevenDays\n\tcase \"30d\":\n\t\tintervalData = m.ThirtyDays\n\t}\n\treturn intervalData\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/service/ebs_pool.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"math\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/utils\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tresource_blockstoragev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_blockstorage/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\tprom_client \"ezone.ksyun.com/ezone/luban/monitor/common/client/prom\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/blockstorage\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/server\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/constant\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/dto\"\n\tblockstorage_utils \"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/utils\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/utils/collection\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/pkg/errors\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n)\n\nvar (\n\talertLevels     = []string{\"p0\", \"p1\", \"p2\", \"p3\"}\n\talertLevelsName = map[string]string{\n\t\t\"p0\": \"紧急告警\",\n\t\t\"p1\": \"重要告警\",\n\t\t\"p2\": \"次要告警\",\n\t\t\"p3\": \"提醒告警\",\n\t}\n\talertKinds = map[string]string{\n\t\t\"p0\": types.KindError,\n\t\t\"p1\": types.KindWarn,\n\t\t\"p2\": types.KindMinor,\n\t\t\"p3\": types.KindInfo,\n\t}\n)\n\ntype EbsPoolService interface {\n\tOverviewAlert(ctx context.Context, par dto.EbsPoolOverviewAlertReq) (*dto.EbsPoolOverviewAlertRsp, error)\n\tOverview(ctx context.Context, par dto.EbsPoolOverviewReq) (*dto.EbsPoolOverviewRsp, error)\n\tOverviewLine(ctx context.Context, par dto.EbsPoolOverviewLineReq) (*dto.EbsPoolOverviewLineRsp, error)\n\tList(ctx context.Context, par dto.EbsPoolListReq) (res *dto.EbsPoolListRsp, err error)\n\tDetailMetricOverview(ctx context.Context, par dto.EbsPoolDetailMetricReq) (*dto.EbsPoolDetailMetricRsp, error)\n\tDetailMetricLine(ctx context.Context, par dto.EbsPoolDetailMetricLineReq) (*dto.EbsPoolDetailMetricLineRsp, error)\n\tGetListOptionalCondition(ctx *gin.Context) (*dto.OptionalEbsPoolResult, error)\n}\n\ntype ebsPoolService struct {\n\tStore dao.Store\n}\n\nfunc NewEbsPoolService() EbsPoolService {\n\treturn &ebsPoolService{\n\t\tStore: dao.NewBlockStorageStore(),\n\t}\n}\n\nfunc (n *ebsPoolService) OverviewAlert(ctx context.Context, par dto.EbsPoolOverviewAlertReq) (*dto.EbsPoolOverviewAlertRsp, error) {\n\t//var filters []string\n\t//\n\t//if par.Region != \"\" {\n\t//\tfilters = append(filters, fmt.Sprintf(\"region=%s\", par.Region))\n\t//}\n\t//if par.Az != \"\" {\n\t//\tfilters = append(filters, fmt.Sprintf(\"az=%s\", par.Az))\n\t//}\n\t//// 资源池\n\t//filters = append(filters, fmt.Sprintf(\"lubanResourceType=%s\", \"resourcePool\"))\n\t//// 获取告警\n\t//alerts, err := alert_client.GetAlertsByFilter(filters)\n\t//if err != nil {\n\t//\treturn nil, err\n\t//}\n\tvar az []string\n\tif par.Az != \"\" {\n\t\taz = []string{par.Az}\n\t}\n\talerts, err := n.Store.AlarmRpcClient().ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\tPageNo:   -1,\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t\tStatus:   \"firing\",\n\t\tAz:       az,\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListAlerts err\")\n\t}\n\n\t// 概览数据\n\talertSlots := []types.BasicOverviewSlot{}\n\tfor _, level := range alertLevels {\n\t\talertSlot := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tCode:     par.PoolType,\n\t\t\t\tName:     alertLevelsName[level],\n\t\t\t\tUnitType: types.TypeNumber,\n\t\t\t\tUnit:     \"个\",\n\t\t\t\tValue:    utils.CountAlertsNum(alerts.Items, strings.ToLower(par.PoolType), level),\n\t\t\t\tKind:     alertKinds[level],\n\t\t\t},\n\t\t}\n\t\talertSlots = append(alertSlots, alertSlot)\n\t}\n\treturn &dto.EbsPoolOverviewAlertRsp{\n\t\tAlerts: alertSlots,\n\t}, nil\n}\n\nfunc (n *ebsPoolService) Overview(ctx context.Context, par dto.EbsPoolOverviewReq) (*dto.EbsPoolOverviewRsp, error) {\n\t// 资源池容量\n\tvar (\n\t\tusedDiskSize, freeDiskSize int64\n\t\tplatformStatusCount        = map[string]int64{}\n\t\tbusinessStatusCount        = map[string]int64{}\n\t\tebsPools                   = make([]types.BasicOverviewSlot, 0)\n\t\tebsVolumePlatformCounts    = make([]types.BasicOverviewSlot, 0)\n\t\tebsVolumeBusinessCounts    = make([]types.BasicOverviewSlot, 0)\n\t)\n\tebsPoolStockList, err := n.Store.EbsPoolRpcClient().ListEbsPoolStock(ctx, &resource_blockstoragev1alpha.ListEbsPoolStockReq{\n\t\tPoolType: []string{par.PoolType},\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tif len(ebsPoolStockList.List) == 0 {\n\t\treturn nil, nil\n\t}\n\tebsPoolStock := ebsPoolStockList.List[0]\n\tusedDiskSize = ebsPoolStock.TotalDiskCapacity - ebsPoolStock.CapacityAvailabel\n\tfreeDiskSize = ebsPoolStock.CapacityAvailabel\n\t// 组装业务数据\n\tstorageUse := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:    0,\n\t\t\tName:     \"存储使用概览\",\n\t\t\tValue:    ebsPoolStock.TotalDiskCapacity,\n\t\t\tUnit:     \"GB\",\n\t\t\tUnitType: \"storage\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tstorageUse.Values = append(storageUse.Values,\n\t\ttypes.BasicOverviewSlotValue{\n\t\t\tName:     \"已使用\",\n\t\t\tValue:    usedDiskSize,\n\t\t\tUnit:     \"GB\",\n\t\t\tUnitType: \"storage\",\n\t\t},\n\t\ttypes.BasicOverviewSlotValue{\n\t\t\tName:     \"可使用\",\n\t\t\tValue:    freeDiskSize,\n\t\t\tUnit:     \"GB\",\n\t\t\tUnitType: \"storage\",\n\t\t},\n\t)\n\n\t// 平台块存储数量\n\tvar platformTotalCount, businessTotalCount int\n\tfor code, status := range constant.EbsVolumeStatusMap {\n\t\tvar azList []string\n\t\tif par.Az != \"\" {\n\t\t\tazList = append(azList, par.Az)\n\t\t}\n\t\tebsVolumePlatformResult, err := n.Store.EbsVolumeRpcClient().ListEbsVolume(ctx, &resource_blockstoragev1alpha.ListVolumeReq{\n\t\t\tPageSize:   -1,\n\t\t\tRegion:     par.Region,\n\t\t\tAz:         azList,\n\t\t\tUseStatus:  []string{code},\n\t\t\tVolumeType: []string{par.PoolType},\n\t\t\tTenantName: constant.PlatformTenantName,\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\t\treturn nil, err\n\t\t}\n\t\t// 存在数据进行录入\n\t\tif ebsVolumePlatformResult.TotalCount != 0 {\n\t\t\tplatformStatusCount[status] = ebsVolumePlatformResult.TotalCount\n\t\t\tplatformTotalCount += int(ebsVolumePlatformResult.TotalCount)\n\t\t}\n\n\t\tebsVolumeResult, err := n.Store.EbsVolumeRpcClient().ListEbsVolume(ctx, &resource_blockstoragev1alpha.ListVolumeReq{\n\t\t\tPageSize:   -1,\n\t\t\tRegion:     par.Region,\n\t\t\tAz:         azList,\n\t\t\tUseStatus:  []string{code},\n\t\t\tVolumeType: []string{par.PoolType},\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\t\treturn nil, err\n\t\t}\n\t\tif ebsVolumeResult.TotalCount != 0 {\n\t\t\tbusinessStatusCount[status] = ebsVolumeResult.TotalCount - ebsVolumePlatformResult.TotalCount\n\t\t\tbusinessTotalCount += int(ebsVolumeResult.TotalCount - ebsVolumePlatformResult.TotalCount)\n\t\t}\n\t}\n\tebsVolumePlatformCount := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:    1,\n\t\t\tName:     \"平台块存储\",\n\t\t\tValue:    platformTotalCount,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tfor status, count := range platformStatusCount {\n\t\tebsVolumePlatformCount.Values = append(ebsVolumePlatformCount.Values, types.BasicOverviewSlotValue{\n\t\t\tName:     status,\n\t\t\tValue:    count,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t})\n\t}\n\t// 业务块存储\n\tebsVolumeBusinessCount := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:    2,\n\t\t\tName:     \"业务块存储\",\n\t\t\tValue:    businessTotalCount,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tfor status, count := range businessStatusCount {\n\t\tebsVolumeBusinessCount.Values = append(ebsVolumeBusinessCount.Values, types.BasicOverviewSlotValue{\n\t\t\tName:     status,\n\t\t\tValue:    count,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t})\n\t}\n\tebsPools = append(ebsPools, storageUse)\n\tebsVolumePlatformCounts = append(ebsVolumePlatformCounts, ebsVolumePlatformCount)\n\tebsVolumeBusinessCounts = append(ebsVolumeBusinessCounts, ebsVolumeBusinessCount)\n\treturn &dto.EbsPoolOverviewRsp{\n\t\tEbsPools:                ebsPools,\n\t\tEbsVolumePlatformCounts: ebsVolumePlatformCounts,\n\t\tEbsVolumeBusinessCounts: ebsVolumeBusinessCounts,\n\t}, nil\n}\n\nfunc (n *ebsPoolService) OverviewLine(ctx context.Context, par dto.EbsPoolOverviewLineReq) (*dto.EbsPoolOverviewLineRsp, error) {\n\tvar azList []string\n\tif par.Az != \"\" {\n\t\tazList = append(azList, par.Az)\n\t}\n\tebsPoolRpcRes, err := n.Store.EbsPoolRpcClient().ListEbsPool(ctx, &resource_blockstoragev1alpha.ListEbsPoolReq{\n\t\tRegion:   par.Region,\n\t\tAz:       azList,\n\t\tPoolType: []string{par.PoolType},\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagHTTPFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\tif len(ebsPoolRpcRes.List) == 0 {\n\t\treturn nil, nil\n\t}\n\tebsPool := ebsPoolRpcRes.List[0]\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tpredictionMetrics := []string{blockstorage.EbsCapacity}\n\tfor _, metric := range par.MetricName {\n\t\trsp, err := n.Store.AlarmRpcClient().ListPromQLs(ctx, blockstorage.TemplateMap[metric](ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType))\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\t\tpromQL := rsp.Items[0].RealPromql\n\t\tunit := rsp.Items[0].Unit\n\n\t\tmatrix, err := prom_client.MatrixQuery(ctx, promQL, v1.Range{\n\t\t\tStart: time.UnixMilli(par.Start),\n\t\t\tEnd:   time.UnixMilli(par.End),\n\t\t\tStep:  prom_client.TimeToStep(par.End - par.Start),\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\t\t// 封装结果\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tName:     blockstorage.MetricMap[metric],\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(unit),\n\t\t\t\tUnit:     unit,\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t},\n\t\t}\n\t\tfor _, m := range matrix {\n\t\t\tfor _, p := range m.Values {\n\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\tvalue := p.Value\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:     timeStamp.String(),\n\t\t\t\t\tCode:     metric,\n\t\t\t\t\tValue:    value,\n\t\t\t\t\tUnit:     unit,\n\t\t\t\t\tUnitType: types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\tKind:     types.KindInfo,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tvar predictSql string\n\t\tstart, end := par.Start/1e3, par.End/1e3\n\t\tstep := blockstorage_utils.TimeToStepForInt(end - start)\n\t\tpredictStart, predictEnd := end, end+(end-start)\n\t\t// 添加预测分析\n\t\tif par.HasPrediction && tools.Contains(predictionMetrics, metric) != -1 {\n\t\t\tline.Info.Prognosis = len(line.Values)\n\t\t\trangeDuration := strconv.FormatInt(3*(end-start), 10)\n\t\t\tpredictDuration := strconv.FormatInt(end-start, 10)\n\t\t\tswitch metric {\n\t\t\tcase blockstorage.EbsCapacity:\n\t\t\t\tpredictSql = blockstorage.GetPredictEbsCapacity(ebsPool.PoolType, rangeDuration+\"s\", predictDuration)\n\t\t\t}\n\t\t\tpredictMatrix, err := prom_client.MatrixQuery(ctx, predictSql, v1.Range{\n\t\t\t\tStart: time.Unix(predictStart, 0),\n\t\t\t\tEnd:   time.Unix(predictEnd, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus predictMatrix: %v\\n\", err)\n\t\t\t}\n\t\t\tfor _, m := range predictMatrix {\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tUnit:        unit,\n\t\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"预测数据\",\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\n\treturn &dto.EbsPoolOverviewLineRsp{\n\t\tLines: lines,\n\t}, nil\n\n}\n\nfunc (n *ebsPoolService) List(ctx context.Context, par dto.EbsPoolListReq) (res *dto.EbsPoolListRsp, err error) {\n\tebsPoolList, err := n.Store.EbsPoolRpcClient().ListEbsPool(ctx, &resource_blockstoragev1alpha.ListEbsPoolReq{\n\t\tPageNo:    int32(par.PageNo),\n\t\tPageSize:  int32(par.PageSize),\n\t\tRegion:    par.Region,\n\t\tAz:        par.Az,\n\t\tOrderCode: par.OrderCode,\n\t\tOrderType: par.OrderType,\n\t\tPoolType:  par.PoolType,\n\t\tQuery:     par.Query,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tres = &dto.EbsPoolListRsp{\n\t\tTotalCount: len(ebsPoolList.List),\n\t\tPageNo:     par.PageNo,\n\t\tPageSize:   par.PageSize,\n\t\tDataList:   make([]*dto.EbsPoolMonitor, 0),\n\t}\n\tfor _, ebsPool := range ebsPoolList.List {\n\t\t// 后续补prometheus sql\n\t\tcapacityTotal, err := n.EbsPoolVector(ctx, ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType, blockstorage.EbsCapTotal)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"prom vector error\": err})\n\t\t}\n\t\tcapacityUsed, err := n.EbsPoolVector(ctx, ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType, blockstorage.EbsCapUsed)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"prom vector error\": err})\n\t\t}\n\t\tcapUseRate, err := n.EbsPoolVector(ctx, ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType, blockstorage.EbsCapRate)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"prom vector error\": err})\n\t\t}\n\t\tIOReadQps, err := n.EbsPoolVector(ctx, ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType, blockstorage.EbsIOReadQps)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"prom vector error\": err})\n\t\t}\n\t\tIOWriteQps, err := n.EbsPoolVector(ctx, ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType, blockstorage.EbsIOWriteQps)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"prom vector error\": err})\n\t\t}\n\t\tIOReadDelay, err := n.EbsPoolVector(ctx, ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType, blockstorage.EbsIOReadDelay)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"prom vector error\": err})\n\t\t}\n\t\tIOWriteDelay, err := n.EbsPoolVector(ctx, ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType, blockstorage.EbsIOWriteDelay)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"prom vector error\": err})\n\t\t}\n\t\tIOReadBand, err := n.EbsPoolVector(ctx, ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType, blockstorage.EbsIOReadBand)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"prom vector error\": err})\n\t\t}\n\t\tIOWriteBand, err := n.EbsPoolVector(ctx, ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType, blockstorage.EbsIOWriteBand)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"prom vector error\": err})\n\t\t}\n\t\t// 告警数量\n\t\trpcAlertRes, err := n.Store.AlarmRpcClient().ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\t\tPageSize:        -1,\n\t\t\tRegion:          ebsPool.Region,\n\t\t\tAz:              []string{ebsPool.Az},\n\t\t\tLevel:           alertLevels,\n\t\t\tResourceType:    []string{\"resourcePool\"},\n\t\t\tResourceSubType: []string{ebsPool.PoolType},\n\t\t\tStatus:          \"firing\",\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc alert error\": err})\n\t\t}\n\t\tresult := &dto.EbsPoolMonitor{\n\t\t\tId:                ebsPool.PoolId,\n\t\t\tName:              ebsPool.Name,\n\t\t\tRegion:            ebsPool.Region,\n\t\t\tAz:                ebsPool.Az,\n\t\t\tPoolType:          ebsPool.PoolType,\n\t\t\tServerCount:       int(ebsPool.ServerCount),\n\t\t\tCloudDiskCount:    int(ebsPool.CloudDiskCount),\n\t\t\tCapacityTotal:     capacityTotal,\n\t\t\tCapacityAvailable: capacityTotal - capacityUsed,\n\t\t\tCapacityUsedRate:  math.Round(capUseRate*100*100) / 100,\n\t\t\tErrorRate:         0,                                                                                                  // 异常率 待办\n\t\t\tIOInput:           strconv.FormatFloat(IOReadQps, 'f', 2, 64) + \"/\" + strconv.FormatFloat(IOWriteQps, 'f', 2, 64),     // IO吞吐\n\t\t\tIODelay:           strconv.FormatFloat(IOReadDelay, 'f', 2, 64) + \"/\" + strconv.FormatFloat(IOWriteDelay, 'f', 2, 64), // IO延时\n\t\t\tBandwidth:         strconv.FormatFloat(IOReadBand, 'f', 2, 64) + \"/\" + strconv.FormatFloat(IOWriteBand, 'f', 2, 64),   // IO带宽\n\t\t\tCreateTime:        ebsPool.CreateTime,\n\t\t\tAlertCount:        int(rpcAlertRes.Total),\n\t\t}\n\t\tres.DataList = append(res.DataList, result)\n\t}\n\n\t// 排序操作\n\tswitch par.OrderCode {\n\tcase \"CapacityUsedRate\":\n\t\tsort.Slice(res.DataList, func(i, j int) bool {\n\t\t\tif par.OrderType == \"ASC\" {\n\t\t\t\treturn res.DataList[i].CapacityUsedRate < res.DataList[j].CapacityUsedRate\n\t\t\t} else {\n\t\t\t\treturn res.DataList[i].CapacityUsedRate > res.DataList[j].CapacityUsedRate\n\t\t\t}\n\t\t})\n\t}\n\n\treturn res, nil\n}\n\nfunc (n *ebsPoolService) EbsPoolVector(ctx context.Context, region, az, poolName, poolType, metricName string) (float64, error) {\n\tpromQlReq := blockstorage.TemplateMap[metricName](region, az, poolName, poolType)\n\trsp, err := n.Store.AlarmRpcClient().ListPromQLs(ctx, promQlReq)\n\tif err != nil {\n\t\treturn 0, errors.WithMessagef(err, \"rpc call ListPromQLs err, req: %+v\", promQlReq)\n\t}\n\tif rsp == nil || len(rsp.Items) < 1 {\n\t\treturn 0, err\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\tfmt.Println(\"real promQL: \", promQL)\n\n\t//查Prometheus\n\tmatrix, err := prom_client.VectorQuery(ctx, promQL)\n\tif err != nil {\n\t\treturn 0, errors.WithMessage(err, \"prom_client VectorQuery err\")\n\t}\n\treturn prom_client.ParseOneVectorValue(matrix), nil\n}\n\nfunc (n *ebsPoolService) EbsPoolServerVector(ctx context.Context, serverList *resource_serverv1alpha.ListPhysicalHostResponse, metricName string) (float64, error) {\n\tpromIpList := []string{}\n\tfor _, s := range serverList.PhysicalServerHostList {\n\t\tpromIpList = append(promIpList, s.ManageIp+\":9100\")\n\t}\n\n\t//查alarm获取promql\n\tpromQlReq := server.TemplateMap[metricName](promIpList)\n\trsp, err := n.Store.AlarmRpcClient().ListPromQLs(ctx, promQlReq)\n\tif err != nil {\n\t\treturn 0, errors.WithMessagef(err, \"rpc call ListPromQLs err, req: %+v\", promQlReq)\n\t}\n\tif rsp == nil || len(rsp.Items) < 1 {\n\t\treturn 0, err\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\tfmt.Println(\"real promQL: \", promQL)\n\n\t//查Prometheus\n\tmatrix, err := prom_client.VectorQuery(ctx, promQL)\n\tif err != nil {\n\t\treturn 0, errors.WithMessage(err, \"prom_client VectorQuery err\")\n\t}\n\treturn prom_client.ParseOneVectorValue(matrix), nil\n}\n\nfunc (n *ebsPoolService) DetailMetricOverview(ctx context.Context, par dto.EbsPoolDetailMetricReq) (*dto.EbsPoolDetailMetricRsp, error) {\n\tvar statusMap = map[string]int{}\n\tebsPool, err := n.Store.EbsPoolRpcClient().EbsPoolStock(ctx, &resource_blockstoragev1alpha.EbsPoolStockReq{\n\t\tPoolId: par.PoolId,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\n\tebsVolumes, err := n.Store.EbsVolumeRpcClient().ListEbsVolume(ctx, &resource_blockstoragev1alpha.ListVolumeReq{\n\t\tPageSize: -1,\n\t\tRegion:   ebsPool.Region,\n\t\tPoolId:   ebsPool.PoolId,\n\t\tAz:       []string{ebsPool.Az},\n\t\tPoolName: []string{ebsPool.Name},\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tfor _, ebsVolume := range ebsVolumes.List {\n\t\tstatusMap[ebsVolume.Status] += 1\n\t}\n\n\treturn &dto.EbsPoolDetailMetricRsp{\n\t\tResourceOverview: []dto.EbsPoolDetailMetric{\n\t\t\t{\n\t\t\t\tPoolId:   ebsPool.PoolId,\n\t\t\t\tName:     \"块存储总容量\",\n\t\t\t\tUnit:     \"GB\",\n\t\t\t\tUnitType: types.TypeStorage,\n\t\t\t\tValue:    ebsPool.TotalDiskCapacity,\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t},\n\t\t\t{\n\t\t\t\tPoolId:   ebsPool.PoolId,\n\t\t\t\tName:     \"块存储可用容量\",\n\t\t\t\tUnit:     \"GB\",\n\t\t\t\tUnitType: types.TypeStorage,\n\t\t\t\tValue:    ebsPool.CapacityAvailabel,\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t},\n\t\t\t{\n\t\t\t\tPoolId:   ebsPool.PoolId,\n\t\t\t\tName:     \"块存储总数\",\n\t\t\t\tUnit:     \"个\",\n\t\t\t\tUnitType: types.TypeNumber,\n\t\t\t\tValue:    ebsPool.CapacityAvailabel,\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t},\n\t\t\t{\n\t\t\t\tPoolId:   ebsPool.PoolId,\n\t\t\t\tName:     \"使用中块存储总数\",\n\t\t\t\tUnit:     \"个\",\n\t\t\t\tUnitType: types.TypeNumber,\n\t\t\t\tValue:    statusMap[\"in-use\"],\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t},\n\t\t\t{\n\t\t\t\tPoolId:   ebsPool.PoolId,\n\t\t\t\tName:     \"待挂载块存储总数\",\n\t\t\t\tUnit:     \"个\",\n\t\t\t\tUnitType: types.TypeNumber,\n\t\t\t\tValue:    statusMap[\"available\"],\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t},\n\t\t},\n\t}, nil\n}\n\nfunc (n *ebsPoolService) DetailMetricLine(ctx context.Context, par dto.EbsPoolDetailMetricLineReq) (*dto.EbsPoolDetailMetricLineRsp, error) {\n\tebsPoolRpcRes, err := n.Store.EbsPoolRpcClient().ListEbsPool(ctx, &resource_blockstoragev1alpha.ListEbsPoolReq{\n\t\tRegion:   par.Region,\n\t\tAz:       []string{par.Az},\n\t\tPoolType: []string{par.PoolType},\n\t})\n\tebsPool := ebsPoolRpcRes.List[0]\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagHTTPFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tfor _, metric := range par.MetricName {\n\t\trsp, err := n.Store.AlarmRpcClient().ListPromQLs(ctx, blockstorage.TemplateMap[metric](ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType))\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t}\n\t\tpromQL := rsp.Items[0].RealPromql\n\t\tunit := rsp.Items[0].Unit\n\n\t\tmatrix, err := prom_client.MatrixQuery(ctx, promQL, v1.Range{\n\t\t\tStart: time.UnixMilli(par.Start),\n\t\t\tEnd:   time.UnixMilli(par.End),\n\t\t\tStep:  prom_client.TimeToStep(par.End - par.Start),\n\t\t})\n\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t}\n\t\t// 封装结果\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        blockstorage.MetricMap[metric],\n\t\t\t\tValue:       0,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\tUnit:        unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0, //预测值，values的下标，0则无预测值\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t}\n\t\tfor _, m := range matrix {\n\t\t\tfor _, p := range m.Values {\n\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\tvalue := p.Value\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\tCode:        metric,\n\t\t\t\t\tValue:       value,\n\t\t\t\t\tUnit:        unit,\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\treturn &dto.EbsPoolDetailMetricLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\nfunc (n *ebsPoolService) GetListOptionalCondition(ctx *gin.Context) (*dto.OptionalEbsPoolResult, error) {\n\tvar (\n\t\tpoolTypeSet = collection.NewSet()\n\t\tazSet       = collection.NewSet()\n\t)\n\tebsPoolList, err := n.Store.EbsPoolRpcClient().ListEbsPool(ctx, &resource_blockstoragev1alpha.ListEbsPoolReq{PageNo: 1, PageSize: 1000})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tfor _, ebsPool := range ebsPoolList.List {\n\t\tif ebsPool.PoolType != \"\" {\n\t\t\tpoolTypeSet.Add(ebsPool.PoolType)\n\t\t}\n\t\tif ebsPool.Az != \"\" {\n\t\t\tazSet.Add(ebsPool.Az)\n\t\t}\n\t}\n\tresult := dto.OptionalEbsPoolResult{\n\t\t\"PoolTypeSet\": poolTypeSet,\n\t\t\"AzSet\":       azSet,\n\t}\n\treturn &result, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/service/ebs_volume.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\tresource_blockstoragev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_blockstorage/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb/pkg\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/ebs_volume\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/constant\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/dto\"\n)\n\ntype EbsVolumeService interface {\n\tOverviewTop(ctx context.Context, par dto.EbsVolumeOverviewTopReq) (*dto.EbsVolumeOverviewTopRsp, error)\n\tOverview(ctx context.Context, par dto.EbsVolumeOverviewReq) (*dto.EbsVolumeOverviewRsp, error)\n\tDetailMetric(ctx context.Context, par dto.EbsVolumeDetailMetricReq) (*dto.EbsVolumeDetailMetricRsp, error)\n\tDetailMetricLine(ctx context.Context, par dto.EbsVolumeDetailMetricLineReq) (*dto.EbsVolumeDetailMetricLineRsp, error)\n}\n\ntype ebsVolumeService struct {\n\tStore dao.Store\n}\n\nfunc NewEbsVolumeService() EbsVolumeService {\n\treturn &ebsVolumeService{\n\t\tStore: dao.NewBlockStorageStore(),\n\t}\n}\n\nfunc (n *ebsVolumeService) OverviewTop(ctx context.Context, par dto.EbsVolumeOverviewTopReq) (*dto.EbsVolumeOverviewTopRsp, error) {\n\tvar tops []types.BasicOverviewSlot\n\tfor _, name := range par.MetricName {\n\t\tname += \"_\" + par.DiskType\n\t\ttsdbMetric, err := n.Store.Metric().GetOneByCode(name)\n\t\tif err != nil {\n\t\t\treturn nil, nil\n\t\t}\n\t\ttopData, err := n.Store.MetricTop().GetOneByCode(dao.QueryParams{\n\t\t\tRegion: par.Region,\n\t\t\tAz:     par.Az,\n\t\t\tCode:   name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, nil\n\t\t}\n\t\tintervalData := topData.ParseIntervalData(par.Start, par.End)\n\t\t//topK\n\t\tif par.TopK > 10 {\n\t\t\treturn nil, fmt.Errorf(\"topK is too large\")\n\t\t}\n\t\tif len(intervalData) < par.TopK {\n\t\t\tlength := len(intervalData)\n\t\t\tintervalData = intervalData[:length]\n\t\t} else {\n\t\t\tintervalData = intervalData[:par.TopK]\n\t\t}\n\n\t\tvalues := []types.BasicOverviewSlotValue{}\n\t\tfor _, v := range intervalData {\n\t\t\tvalues = append(values, types.BasicOverviewSlotValue{\n\t\t\t\tName:     v.Name,\n\t\t\t\tCode:     v.Id,\n\t\t\t\tValue:    v.Value,\n\t\t\t\tUnit:     tsdbMetric.Unit,\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t})\n\t\t}\n\n\t\tslot := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        constant.EbsVolumeTopMap[name],\n\t\t\t\tValue:       0,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t\tValues: values,\n\t\t}\n\t\ttops = append(tops, slot)\n\t}\n\n\treturn &dto.EbsVolumeOverviewTopRsp{\n\t\tTops: tops,\n\t}, nil\n}\n\nfunc (n *ebsVolumeService) Overview(ctx context.Context, par dto.EbsVolumeOverviewReq) (*dto.EbsVolumeOverviewRsp, error) {\n\tvar (\n\t\tplatformStatusCount     = map[string]int64{}\n\t\tbusinessStatusCount     = map[string]int64{}\n\t\tebsStorageUse           = make([]types.BasicOverviewSlot, 0)\n\t\tebsVolumePlatformCounts = make([]types.BasicOverviewSlot, 0)\n\t\tebsVolumeBusinessCounts = make([]types.BasicOverviewSlot, 0)\n\t)\n\tvar platformUseCount, businessUseCount int\n\tplatformUseCount, businessUseCount = calculateEbsVolumeUseCount(ctx, n.Store, par)\n\tstorageUse := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:    0,\n\t\t\tName:     \"云硬盘规格统计\",\n\t\t\tValue:    platformUseCount + businessUseCount,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tstorageUse.Values = append(storageUse.Values,\n\t\ttypes.BasicOverviewSlotValue{\n\t\t\tName:     \"平台开盘量\",\n\t\t\tValue:    platformUseCount,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t},\n\t\ttypes.BasicOverviewSlotValue{\n\t\t\tName:     \"业务开盘量\",\n\t\t\tValue:    businessUseCount,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t},\n\t)\n\tebsStorageUse = append(ebsStorageUse, storageUse)\n\n\t// 平台块存储数量\n\tvar platformTotalCount, businessTotalCount int\n\tfor code, status := range constant.EbsVolumeUseStatusMap {\n\t\tvar azList []string\n\t\tif par.Az != \"\" {\n\t\t\tazList = append(azList, par.Az)\n\t\t}\n\t\tebsVolumePlatformResult, err := n.Store.EbsVolumeRpcClient().ListEbsVolume(ctx, &resource_blockstoragev1alpha.ListVolumeReq{\n\t\t\tPageSize:   -1,\n\t\t\tRegion:     par.Region,\n\t\t\tAz:         azList,\n\t\t\tUseStatus:  []string{code},\n\t\t\tVolumeType: []string{par.DiskType},\n\t\t\tTenantName: constant.PlatformTenantName,\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\t\treturn nil, err\n\t\t}\n\t\t// 存在数据进行录入\n\t\tif ebsVolumePlatformResult.TotalCount != 0 {\n\t\t\tplatformStatusCount[status] = ebsVolumePlatformResult.TotalCount\n\t\t\tplatformTotalCount += int(ebsVolumePlatformResult.TotalCount)\n\t\t}\n\n\t\tebsVolumeResult, err := n.Store.EbsVolumeRpcClient().ListEbsVolume(ctx, &resource_blockstoragev1alpha.ListVolumeReq{\n\t\t\tPageSize:   -1,\n\t\t\tRegion:     par.Region,\n\t\t\tAz:         azList,\n\t\t\tUseStatus:  []string{code},\n\t\t\tVolumeType: []string{par.DiskType},\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\t\treturn nil, err\n\t\t}\n\t\tif ebsVolumeResult.TotalCount != 0 {\n\t\t\tbusinessStatusCount[status] = ebsVolumeResult.TotalCount - ebsVolumePlatformResult.TotalCount\n\t\t\tbusinessTotalCount += int(ebsVolumeResult.TotalCount - ebsVolumePlatformResult.TotalCount)\n\t\t}\n\t}\n\tebsVolumePlatformCount := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:    1,\n\t\t\tName:     \"平台块存储\",\n\t\t\tValue:    platformTotalCount,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tfor status, count := range platformStatusCount {\n\t\tebsVolumePlatformCount.Values = append(ebsVolumePlatformCount.Values, types.BasicOverviewSlotValue{\n\t\t\tName:     status,\n\t\t\tValue:    count,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t})\n\t}\n\t// 业务块存储\n\tebsVolumeBusinessCount := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:    2,\n\t\t\tName:     \"业务块存储\",\n\t\t\tValue:    businessTotalCount,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tfor status, count := range businessStatusCount {\n\t\tebsVolumeBusinessCount.Values = append(ebsVolumeBusinessCount.Values, types.BasicOverviewSlotValue{\n\t\t\tName:     status,\n\t\t\tValue:    count,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t})\n\t}\n\tebsVolumePlatformCounts = append(ebsVolumePlatformCounts, ebsVolumePlatformCount)\n\tebsVolumeBusinessCounts = append(ebsVolumeBusinessCounts, ebsVolumeBusinessCount)\n\treturn &dto.EbsVolumeOverviewRsp{\n\t\tEbsStorageUse:           ebsStorageUse,\n\t\tEbsVolumePlatformCounts: ebsVolumePlatformCounts,\n\t\tEbsVolumeBusinessCounts: ebsVolumeBusinessCounts,\n\t}, nil\n}\n\nfunc calculateEbsVolumeUseCount(ctx context.Context, store dao.Store, par dto.EbsVolumeOverviewReq) (int, int) {\n\tvar platformUseCount, businessUseCount int\n\tfor code := range constant.EbsVolumeUseStatusMap {\n\t\tvar azList []string\n\t\tif par.Az != \"\" {\n\t\t\tazList = append(azList, par.Az)\n\t\t}\n\t\tebsVolumePlatformResult, err := store.EbsVolumeRpcClient().ListEbsVolume(ctx, &resource_blockstoragev1alpha.ListVolumeReq{\n\t\t\tPageSize:   -1,\n\t\t\tRegion:     par.Region,\n\t\t\tAz:         azList,\n\t\t\tUseStatus:  []string{code},\n\t\t\tVolumeType: []string{par.DiskType},\n\t\t\tTenantName: constant.PlatformTenantName,\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\t\treturn 0, 0\n\t\t}\n\t\t// 存在数据进行录入\n\t\tif ebsVolumePlatformResult.TotalCount != 0 {\n\t\t\tplatformUseCount += int(ebsVolumePlatformResult.TotalCount)\n\t\t}\n\n\t\tebsVolumeResult, err := store.EbsVolumeRpcClient().ListEbsVolume(ctx, &resource_blockstoragev1alpha.ListVolumeReq{\n\t\t\tPageSize:   -1,\n\t\t\tRegion:     par.Region,\n\t\t\tAz:         azList,\n\t\t\tUseStatus:  []string{code},\n\t\t\tVolumeType: []string{par.DiskType},\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\t\treturn 0, 0\n\t\t}\n\t\tif ebsVolumeResult.TotalCount != 0 {\n\t\t\tbusinessUseCount += int(ebsVolumeResult.TotalCount - ebsVolumePlatformResult.TotalCount)\n\t\t}\n\t}\n\treturn platformUseCount, businessUseCount\n}\n\nfunc (n *ebsVolumeService) DetailMetric(ctx context.Context, par dto.EbsVolumeDetailMetricReq) (*dto.EbsVolumeDetailMetricRsp, error) {\n\trpcRes, err := n.Store.EbsVolumeRpcClient().ListEbsVolume(ctx, &resource_blockstoragev1alpha.ListVolumeReq{\n\t\tPageSize: -1,\n\t\tQuery: map[string]string{\n\t\t\t\"VolumeId\": par.Id,\n\t\t},\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tebsVolume := rpcRes.List[0]\n\n\tresult := []dto.EbsVolumeDetailMetric{\n\t\t{\n\t\t\tName:     \"块存储总容量\",\n\t\t\tUnit:     \"GB\",\n\t\t\tUnitType: types.TypeStorage,\n\t\t\tValue:    ebsVolume.Size,\n\t\t},\n\t\t{\n\t\t\tName:     \"磁盘使用状态\",\n\t\t\tValue:    constant.EbsVolumeStatusMap[ebsVolume.Status],\n\t\t\tUnitType: types.TypePercent,\n\t\t\tUnit:     \"status\",\n\t\t},\n\t\t{\n\t\t\tName:  \"磁盘健康状态\",\n\t\t\tValue: nil, // 磁盘健康状态 后续讨论完进行定义\n\t\t},\n\t}\n\treturn &dto.EbsVolumeDetailMetricRsp{\n\t\tResourceOverview: result,\n\t}, nil\n}\n\nfunc (n *ebsVolumeService) DetailMetricLine(ctx context.Context, par dto.EbsVolumeDetailMetricLineReq) (*dto.EbsVolumeDetailMetricLineRsp, error) {\n\trpcRes, err := n.Store.EbsVolumeRpcClient().ListEbsVolume(ctx, &resource_blockstoragev1alpha.ListVolumeReq{\n\t\tQuery: map[string]string{\n\t\t\t\"VolumeId\": par.Id,\n\t\t},\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tebsVolume := rpcRes.List[0]\n\tregion := ebsVolume.Region\n\tqueryParam := pkg.QueryParam{\n\t\tStart: par.Start,\n\t\tEnd:   par.End,\n\t}\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tfor _, metric := range par.MetricName {\n\t\tsubQueries := make([]pkg.SubQuery, 0)\n\t\ttsdbMetric, err := n.Store.Metric().GetOneByCode(metric + \"_\" + ebsVolume.VolumeType)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\tcontinue\n\t\t}\n\t\tebsVolumeQuery := ebs_volume.ParseTsdbQuery(tsdbMetric.Code, tsdbMetric.MetricPrefix, ebsVolume.VmId)\n\t\tsubQueries = append(subQueries, pkg.SubQuery{\n\t\t\tAggregator: \"sum\",\n\t\t\tMetric:     ebsVolumeQuery.Metric,\n\t\t\tTags:       ebsVolumeQuery.Tags,\n\t\t\tDownsample: opentsdb.TimeToDownsample(par.End - par.Start),\n\t\t})\n\n\t\tqueryParam.Queries = subQueries\n\t\tqueryResp, err := opentsdb.Query(ctx, region, queryParam)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\tcontinue\n\t\t}\n\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        metric,\n\t\t\t\tValue:       nil,\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t}\n\t\tif len(queryResp.QueryRespCnts) > 0 {\n\t\t\tdataPoints := queryResp.QueryRespCnts[0].GetDataPoints()\n\t\t\tfor _, v := range dataPoints {\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        fmt.Sprintf(\"%d\", tools.UnixToUnixMilli(v.Timestamp)),\n\t\t\t\t\tCode:        \"\",\n\t\t\t\t\tValue:       v.Value,\n\t\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tDescription: v.Metric,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\n\treturn &dto.EbsVolumeDetailMetricLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/rpc/ebs_pool.go\n```golang\npackage rpc\n\nimport (\n\t\"context\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/blockstorage/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/dto\"\n\t\"github.com/jinzhu/copier\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\nfunc (n *blockStorageRpcServer) EbsPoolList(ctx context.Context, req *pb.EbsPoolListReq) (*pb.EbsPoolListRsp, error) {\n\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagRequestIn, map[string]interface{}{\"params\": req})\n\tvar par dto.EbsPoolListReq\n\tif err := copier.Copy(&par, req); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"copy err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tres, err := n.ebsPoolSvc.List(ctx, par)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"call service err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tresp := &pb.EbsPoolListRsp{}\n\tcopier.Copy(&resp, res)\n\treturn resp, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/blockstorage/rpc/rpcserver.go\n```golang\npackage rpc\n\nimport (\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/blockstorage/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/service\"\n)\n\ntype blockStorageRpcServer struct {\n\tebsPoolSvc   service.EbsPoolService\n\tebsVolumeSvc service.EbsVolumeService\n\tpb.UnimplementedEbsPoolServiceServer\n}\n\nfunc NewBlockStorageRpcServer() *blockStorageRpcServer {\n\treturn &blockStorageRpcServer{\n\t\tebsPoolSvc:   service.NewEbsPoolService(),\n\t\tebsVolumeSvc: service.NewEbsVolumeService(),\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/dto/response.go\n```golang\npackage dto\n\nimport \"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\ntype NetworkPoolDetailTopRsp struct {\n\tLines []types.BasicOverviewSlot\n}\n\ntype NetworkPoolDetailLineRsp struct {\n\tLines []types.BasicOverviewSlot\n}\n\ntype NetworkPoolOverviewLineRsp struct {\n\tLines []types.BasicOverviewSlot\n}\n\ntype NetworkPoolOverviewRsp struct {\n}\n\ntype NetworkPoolOverviewAlertRsp struct {\n\tAlerts []types.BasicOverviewSlot\n}\n\ntype NetworkPoolOverviewMonitorRsp struct {\n\tUp   []types.BasicOverviewSlot\n\tDown []types.BasicOverviewSlot\n}\n\ntype ListNetworkPoolEIPRsp struct {\n\tTotalCount int64\n\tPageNo     int\n\tPageSize   int\n\tSet        []*ListNetworkPoolEIP\n}\n\ntype ListNetworkPoolEIP struct {\n\tHosts       []string `json:\"Hosts\"`\n\tPoolName    string   `json:\"PoolName\"`\n\tPoolType    string   `json:\"PoolType\"`\n\tRegion      string   `json:\"Region\"`\n\tLBCount     int      `json:\"LBCount\"`\n\tServerCount int      `json:\"ServerCount\"`\n\tEipCount    int      `json:\"EipCount\"`\n\tCreateTime  int64    `json:\"CreateTime\"`\n\n\t//使用率\n\tCpuUsedRatio  float64 `json:\"CpuUsedRatio\"`\n\tMemUsedRatio  float64 `json:\"MemUsedRatio\"`\n\tDiskUsedRatio float64 `json:\"DiskUsedRatio\"`\n}\n\ntype ListNetworkPoolLBRsp struct {\n\tTotalCount int64\n\tPageNo     int\n\tPageSize   int\n\tSet        []*ListNetworkPoolLB\n}\n\ntype ListNetworkPoolLB struct {\n\tHosts       []string `json:\"Hosts\"`\n\tPoolName    string   `json:\"PoolName\"`\n\tPoolType    string   `json:\"PoolType\"`\n\tRegion      string   `json:\"Region\"`\n\tServerCount int      `json:\"ServerCount\"`\n\tLBCount     int      `json:\"LBCount\"`\n\tEipCount    int      `json:\"EipCount\"`\n\tCreateTime  int64    `json:\"CreateTime\"`\n\n\t//使用率\n\tCpuUsedRatio  float64 `json:\"CpuUsedRatio\"`\n\tMemUsedRatio  float64 `json:\"MemUsedRatio\"`\n\tDiskUsedRatio float64 `json:\"DiskUsedRatio\"`\n}\n\ntype ListNetworkPoolNATRsp struct {\n\tTotalCount int64\n\tPageNo     int\n\tPageSize   int\n\tSet        []*ListNetworkPoolNAT\n}\n\ntype ListNetworkPoolNAT struct {\n\tHosts       []string `json:\"Hosts\"`\n\tPoolName    string   `json:\"PoolName\"`\n\tPoolType    string   `json:\"PoolType\"`\n\tRegion      string   `json:\"Region\"`\n\tServerCount int      `json:\"ServerCount\"`\n\tNatCount    int      `json:\"NatCount\"`\n\tCreateTime  int64    `json:\"CreateTime\"`\n\n\t//使用率\n\tCpuUsedRatio  float64 `json:\"CpuUsedRatio\"`\n\tMemUsedRatio  float64 `json:\"MemUsedRatio\"`\n\tDiskUsedRatio float64 `json:\"DiskUsedRatio\"`\n}\n\ntype ListNetworkPoolBMRsp struct {\n\tTotalCount int64\n\tPageNo     int\n\tPageSize   int\n\tSet        []*ListNetworkPoolBM\n}\n\ntype ListNetworkPoolBM struct {\n\tHosts       []string `json:\"Hosts\"`\n\tPoolName    string   `json:\"PoolName\"`\n\tPoolType    string   `json:\"PoolType\"`\n\tRegion      string   `json:\"Region\"`\n\tServerCount int      `json:\"ServerCount\"`\n\tBMCount     int      `json:\"BMCount\"`\n\tCreateTime  int64    `json:\"CreateTime\"`\n\n\t//使用率\n\tCpuUsedRatio  float64 `json:\"CpuUsedRatio\"`\n\tMemUsedRatio  float64 `json:\"MemUsedRatio\"`\n\tDiskUsedRatio float64 `json:\"DiskUsedRatio\"`\n}\n\ntype ListNetworkPoolSLRsp struct {\n\tTotalCount int64\n\tPageNo     int\n\tPageSize   int\n\tSet        []*ListNetworkPoolSL\n}\n\ntype ListNetworkPoolSL struct {\n\tHosts       []string `json:\"Hosts\"`\n\tPoolName    string   `json:\"PoolName\"`\n\tPoolType    string   `json:\"PoolType\"`\n\tRegion      string   `json:\"Region\"`\n\tServerCount int      `json:\"ServerCount\"`\n\tSLCount     int      `json:\"SLCount\"`\n\tP2PCount    int      `json:\"P2PCount\"`\n\tVPNCount    int      `json:\"VPNCount\"`\n\tCreateTime  int64    `json:\"CreateTime\"`\n\n\t//使用率\n\tCpuUsedRatio  float64 `json:\"CpuUsedRatio\"`\n\tMemUsedRatio  float64 `json:\"MemUsedRatio\"`\n\tDiskUsedRatio float64 `json:\"DiskUsedRatio\"`\n}\n\ntype ProductEipOverviewAlertRsp struct {\n}\n\ntype ProductEipOverviewTopRsp struct {\n\tTops []types.BasicOverviewSlot\n}\n\ntype ProductEipInfoRsp struct {\n\tRegion       string `json:\"Region\"`\n\tCreateTime   int64  `json:\"CreateTime\"`\n\tInstanceID   string `json:\"InstanceID\"`\n\tInstanceName string `json:\"InstanceName\"`\n\tTenantID     string `json:\"TenantID\"`\n\tTenantName   string `json:\"TenantName\"`\n\tProjectID    string `json:\"ProjectID\"`\n\tProjectName  string `json:\"ProjectName\"`\n\n\tIpAddr      string `json:\"IpAddr\"`\n\tCidr        string `json:\"Cidr\"`\n\tWayType     string `json:\"WayType\"`\n\tBandWidth   string `json:\"BandWidth\"`\n\tIpVersion   string `json:\"IpVersion\"`\n\tLabel       string `json:\"Label\"`\n\tDescription string `json:\"Description\"`\n\n\t//绑定实例信息\n\tBoundId    string `json:\"BoundId\"`\n\tBoundType  string `json:\"BoundType\"`\n\tName       string `json:\"Name\"`       //绑定实例名称\n\tFlavor     string `json:\"Flavor\"`     //规格\n\tStatus     string `json:\"Status\"`     //绑定实例状态\n\tAggregate  string `json:\"Aggregate\"`  //所属资源池\n\tHypervisor string `json:\"Hypervisor\"` //所属服务器\n}\n\ntype ProductEipLineRsp struct {\n\tLines []types.BasicOverviewSlot\n}\n\ntype TaskRsp struct {\n\t//资源类型\n\tResourceType string `json:\"resource_type\"`\n\n\t//时间间隔\n\tInterval string `json:\"interval\"`\n}\n\ntype ProductLbListRsp struct {\n\tTotalCount int64 `json:\"TotalCount\"`\n\tPageNo     int   `json:\"PageNo\"`\n\tPageSize   int   `json:\"PageSize\"`\n\tList       []Lb  `json:\"List\"`\n}\n\ntype Lb struct {\n\tLoadBalancerId    string `json:\"LoadBalancerId\"`\n\tLoadBalancerName  string `json:\"LoadBalancerName\"`\n\tLoadBalancerState string `json:\"LoadBalancerState\"`\n\tLoadBalancerType  string `json:\"LoadBalancerType\"`\n\tVpcId             string `json:\"VpcId\"`\n\tVpcName           string `json:\"VpcName\"`\n\tPublicIp          string `json:\"PublicIp\"`\n\tListenersCount    int    `json:\"ListenersCount\"`\n\tRegion            string `json:\"Region\"`\n\tTenantId          string `json:\"TenantId\"`\n\tTenantName        string `json:\"TenantName\"`\n\tProjectId         string `json:\"ProjectId\"`\n\tProjectName       string `json:\"ProjectName\"`\n\tIpVersion         string `json:\"IpVersion\"`\n\tType              string `json:\"Type\"`\n\tLineType          string `json:\"LineType\"`\n\tCreateTime        int64  `json:\"CreateTime\"`\n\tPoolName          string `json:\"PoolName\"`\n\tPoolId            string `json:\"PoolId\"`\n}\n\ntype ProductLbOverviewTopRsp struct {\n\tTops []types.BasicOverviewSlot\n}\n\ntype ProductLbLineRsp struct {\n\tLines []types.BasicOverviewSlot\n}\n\ntype ProductNatOverviewTopRsp struct {\n\tTops []types.BasicOverviewSlot\n}\n\ntype ProductNatLineRsp struct {\n\tLines []types.BasicOverviewSlot\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/dto/request.go\n```golang\npackage dto\n\ntype NetworkPoolDetailTopReq struct {\n\tStart      int64  `json:\"Start\"`\n\tEnd        int64  `json:\"End\"`\n\tMetricName string `json:\"MetricName\"`\n\tRegion     string `json:\"Region\"`\n\tPoolType   string `json:\"PoolType\"`\n\tHostname   string `json:\"HostName\"`\n\tTopK       int    `json:\"TopK\"`\n}\n\ntype NetworkPoolDetailLineReq struct {\n\tStart         int64    `json:\"Start\"`\n\tEnd           int64    `json:\"End\"`\n\tMetricName    []string `json:\"MetricName\"`\n\tRegion        string   `json:\"Region\"`\n\tPoolType      string   `json:\"PoolType\"`\n\tHasPrediction bool     `json:\"HasPrediction\"`\n}\n\ntype NetworkPoolOverviewLineReq struct {\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n\tMetricName []string `json:\"MetricName\"`\n\tRegion     string   `json:\"Region\"`\n\tPoolType   string   `json:\"PoolType\"`\n}\n\ntype NetworkPoolOverviewAlertReq struct {\n\tRegion string `json:\"Region\"`\n\tAz     string `json:\"Az\"`\n}\n\ntype NetworkPoolOverviewMonitorReq struct {\n\tRegion string `json:\"Region\"`\n}\n\ntype CommonListReq struct {\n\tPageNo    int    `json:\"PageNo\"`\n\tPageSize  int    `json:\"PageSize\" binding:\"lte=1000\"`\n\tRegion    string `json:\"Region\"`\n\tOrderCode string `json:\"OrderCode\"`\n\tOrderType string `json:\"OrderType\" binding:\"omitempty,oneof=ASC DESC\"`\n\tQuery     Query  `json:\"Query\"`\n}\ntype Query map[string]string\n\ntype ListNetworkPoolEipReq struct {\n\tCommonListReq\n\tPoolType []string `json:\"PoolType\"`\n}\n\ntype ListNetworkPoolLBReq struct {\n\tCommonListReq\n\tPoolType []string `json:\"PoolType\"`\n}\n\ntype ListNetworkPoolNATReq struct {\n\tCommonListReq\n\tPoolType []string `json:\"PoolType\"`\n}\n\ntype ListNetworkPoolBMReq struct {\n\tCommonListReq\n\tPoolType []string `json:\"PoolType\"`\n}\n\ntype ListNetworkPoolSLReq struct {\n\tCommonListReq\n\tPoolType []string `json:\"PoolType\"`\n}\n\ntype ListNetworkPoolStockReq struct {\n\tCommonListReq\n\tPoolType []string `json:\"PoolType\"`\n}\n\ntype ProductEipOverviewAlertReq struct {\n\tRegion string `json:\"Region\"`\n}\n\ntype ProductEipOverviewTopReq struct {\n\tRegion     string   `json:\"Region\"`\n\tMetricName []string `json:\"MetricName\"`\n\tTopK       int      `json:\"TopK\"` //5,10\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n}\n\ntype ProductEipInfoReq struct {\n\tInstanceID string `form:\"InstanceID\"`\n\tIP         string `form:\"IP\"`\n}\n\ntype ProductEipLineReq struct {\n\tMetricName []string `json:\"MetricName\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n\tEIP        string   `json:\"EIP\"`\n\tID         string   `json:\"ID\"`\n}\n\ntype ProductLbListReq struct {\n\tCommonListReq\n\tAz                []string `json:\"Az\"`\n\tTenantId          []string `json:\"TenantId\"`\n\tTenantName        []string `json:\"TenantName\"`\n\tProjectId         []string `json:\"ProjectId\"`\n\tProjectName       []string `json:\"ProjectName\"`\n\tVpcName           []string `json:\"VpcName\"`\n\tVpcId             []string `json:\"VpcId\"`\n\tLoadBalancerState string   `json:\"LoadBalancerState\"`\n\tLoadBalancerType  string   `json:\"LoadBalancerType\"`\n\tType              string   `json:\"Type\"`\n\tPoolName          []string `json:\"PoolName\"`\n\tLineType          string   `json:\"LineType\"`\n\tHostName          string   `json:\"HostName\"`\n}\n\ntype ProductLbOverviewTopReq struct {\n\tRegion     string   `json:\"Region\"`\n\tAz         string   `json:\"Az\"`\n\tMetricName []string `json:\"MetricName\"`\n\tTopK       int      `json:\"TopK\"` //5,10\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n}\n\ntype ProductLbLineReq struct {\n\tMetricName []string `json:\"MetricName\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n\tID         string   `json:\"ID\"`\n}\n\ntype ProductLbOverviewReq struct {\n\tRegion string `json:\"Region\"`\n\tAz     string `json:\"Az\"`\n}\n\ntype ProductNatOverviewReq struct {\n\tRegion string `json:\"Region\"`\n\tAz     string `json:\"Az\"`\n}\n\ntype ProductNatOverviewTopReq struct {\n\tRegion     string   `json:\"Region\"`\n\tAz         string   `json:\"Az\"`\n\tMetricName []string `json:\"MetricName\"`\n\tTopK       int      `json:\"TopK\"` //5,10\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n}\n\ntype ProductNatLineReq struct {\n\tMetricName []string `json:\"MetricName\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n\tID         string   `json:\"ID\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/dao/monitor_tsdb_metrics.go\n```golang\npackage dao\n\nimport (\n\t\"context\"\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/model\"\n\t\"github.com/pkg/errors\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/plugin/opentelemetry/tracing\"\n)\n\ntype MetricDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewMetricDao() *MetricDao {\n\tdb := lib.GORMMapPool[\"business\"].Debug()\n\tdb.Use(tracing.NewPlugin(tracing.WithoutMetrics()))\n\n\treturn &MetricDao{\n\t\tdb: db,\n\t}\n}\n\nfunc (m *MetricDao) GetOneByCode(ctx context.Context, code string) (*model.MonitorTsdbMetrics, error) {\n\tcontent := model.MonitorTsdbMetrics{}\n\terr := m.db.WithContext(ctx).Where(\"code = ?\", code).First(&content).Error\n\tif err != nil {\n\t\tif errors.Is(err, gorm.ErrRecordNotFound) {\n\t\t\treturn nil, nil\n\t\t}\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &content, nil\n}\n\n// get list by codes\nfunc (m *MetricDao) GetListByCodes(ctx context.Context, codes []string) ([]model.MonitorTsdbMetrics, error) {\n\tvar content []model.MonitorTsdbMetrics\n\terr := m.db.WithContext(ctx).Where(\"code in (?)\", codes).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn content, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/dao/monitor_top.go\n```golang\npackage dao\n\nimport (\n\t\"context\"\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/gormSerializer\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/model\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/schema\"\n\t\"gorm.io/plugin/opentelemetry/tracing\"\n)\n\ntype MetricTopDao struct {\n\tdb *gorm.DB\n}\n\ntype QueryParams struct {\n\tRegion string\n\tAz     string\n\tCode   string\n}\n\nfunc NewMetricTopDao() *MetricTopDao {\n\tschema.RegisterSerializer(\"json_str\", gormSerializer.JSONSerializer{})\n\tdb := lib.GORMMapPool[\"business\"].Debug()\n\tdb.Use(tracing.NewPlugin(tracing.WithoutMetrics()))\n\n\treturn &MetricTopDao{\n\t\tdb: db,\n\t}\n}\n\n//func (m *MetricTopDao) Insert(data model.MonitorTop) error {\n//\tif err := m.db.Create(&data).Error; err != nil {\n//\t\treturn err\n//\t}\n//\treturn nil\n//}\n\nfunc (m *MetricTopDao) CreateOrUpdate(ctx context.Context, data model.MonitorTop) error {\n\t// Save update value in database, if the value doesn't have primary key, will insert it\n\tif err := m.db.WithContext(ctx).Save(&data).Error; err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (m *MetricTopDao) GetOneByCode(ctx context.Context, q QueryParams) (model.MonitorTop, error) {\n\tvar data model.MonitorTop\n\tif err := m.db.WithContext(ctx).Where(\"region = ? AND az = ? AND code = ?\", q.Region, q.Az, q.Code).First(&data).Error; err != nil {\n\t\treturn data, err\n\t}\n\treturn data, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/dao/overview.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tresource_networkv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n)\n\ntype NetworkStore struct {\n\t//rpc\n\tNetworkRpcClient resource_networkv1alpha.ResourceNetworkClient\n\tServerRpcClient  resource_serverv1alpha.ResourceServiceClient\n\tAlarmRpcClient   alarmv1alpha.AlarmServiceClient\n\n\t//dao\n\tMetricDao    *MetricDao\n\tMetricTopDao *MetricTopDao\n}\n\nfunc NewNetworkStore() *NetworkStore {\n\t//resource\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\n\t//alarm\n\talarmAddr := lib.GetStringConf(\"base.grpc.alarm\")\n\talarmConn, err := grpcx.NewGrpcClientConn(alarmAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect alarm grpc server error, %s\": err.Error()})\n\t}\n\n\treturn &NetworkStore{\n\t\tNetworkRpcClient: resource_networkv1alpha.NewResourceNetworkClient(resourceConn),\n\t\tServerRpcClient:  resource_serverv1alpha.NewResourceServiceClient(resourceConn),\n\t\tAlarmRpcClient:   alarmv1alpha.NewAlarmServiceClient(alarmConn),\n\t\tMetricDao:        NewMetricDao(),\n\t\tMetricTopDao:     NewMetricTopDao(),\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/controller/product_nat.go\n```golang\npackage controller\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype ProductNatController struct {\n\tsvc *service.ProductNatService\n}\n\nfunc NewProductNatController() *ProductNatController {\n\treturn &ProductNatController{\n\t\tsvc: service.NewProductNatService(),\n\t}\n}\n\nfunc (p *ProductNatController) Overview(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductNatOverviewReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := p.svc.Overview(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (p *ProductNatController) Top(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductNatOverviewTopReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := p.svc.OverviewTop(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (p *ProductNatController) Line(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductNatLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := p.svc.NatLine(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取折线图信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取折线图信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/controller/product_lb.go\n```golang\npackage controller\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype ProductLbController struct {\n\tsvc    *service.ProductLbService\n\teipSvc *service.ProductEipService\n}\n\nfunc NewProductLbController() *ProductLbController {\n\treturn &ProductLbController{\n\t\tsvc:    service.NewProductLbService(),\n\t\teipSvc: service.NewProductEipService(),\n\t}\n}\n\nfunc (p *ProductLbController) List(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.ProductLbListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := p.svc.LbList(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取db list失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (p *ProductLbController) Overview(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductLbOverviewReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := p.svc.Overview(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (p *ProductLbController) Top(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductLbOverviewTopReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tvar eipTop bool\n\tfor _, v := range params.MetricName {\n\t\tif strings.HasPrefix(v, \"eip_\") {\n\t\t\teipTop = true\n\t\t\tbreak\n\t\t}\n\t}\n\tvar res interface{}\n\tvar err error\n\tif eipTop {\n\t\tres, err = p.eipSvc.OverviewTop(c.Request.Context(), &dto.ProductEipOverviewTopReq{\n\t\t\tRegion:     params.Region,\n\t\t\tMetricName: params.MetricName,\n\t\t\tTopK:       params.TopK,\n\t\t\tStart:      params.Start,\n\t\t\tEnd:        params.End,\n\t\t})\n\t} else {\n\t\tres, err = p.svc.OverviewTop(c.Request.Context(), &params)\n\t}\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (p *ProductLbController) Line(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductLbLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := p.svc.LbLine(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取折线图信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取折线图信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/controller/network_pool.go\n```golang\npackage controller\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/trace\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype NetworkPoolController struct {\n\tsvc *service.NetworkPoolService\n}\n\nfunc NewNetworkPoolController() *NetworkPoolController {\n\treturn &NetworkPoolController{\n\t\tsvc: service.NewNetworkPoolService(),\n\t}\n}\n\nfunc (n *NetworkPoolController) OverviewAlert(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.NetworkPoolOverviewAlertReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewAlert(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n\n}\n\nfunc (n *NetworkPoolController) OverviewMonitor(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.NetworkPoolOverviewMonitorReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewMonitor(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n\n}\n\nfunc (n *NetworkPoolController) OverviewLine(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.NetworkPoolOverviewLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewLine(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (n *NetworkPoolController) ListLBPool(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ListNetworkPoolLBReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.ListLBPool(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (n *NetworkPoolController) ListEIPPool(c *gin.Context) {\n\tfmt.Printf(\"DEBUG - traceID: %s\\n\", trace.TraceIDFromContext(c.Request.Context()))\n\n\t// 绑定参数\n\tvar params dto.ListNetworkPoolEipReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.ListEIPPool(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (n *NetworkPoolController) ListNatPool(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ListNetworkPoolNATReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.ListNATPool(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (n *NetworkPoolController) ListBMPool(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ListNetworkPoolBMReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.ListBMPool(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (n *NetworkPoolController) ListSLPool(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ListNetworkPoolSLReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.ListSLPool(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (n *NetworkPoolController) DetailLine(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.NetworkPoolDetailLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.DetailLine(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (n *NetworkPoolController) DetailTop(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.NetworkPoolDetailTopReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.DetailTop(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/controller/product_eip.go\n```golang\npackage controller\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype ProductEipController struct {\n\tsvc *service.ProductEipService\n}\n\nfunc NewProductEipController() *ProductEipController {\n\treturn &ProductEipController{\n\t\tsvc: service.NewProductEipService(),\n\t}\n}\n\nfunc (n *ProductEipController) OverviewAlert(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductEipOverviewAlertReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewAlert(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (n *ProductEipController) OverviewTop(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductEipOverviewTopReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewTop(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (n *ProductEipController) EipInfo(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductEipInfoReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.EipInfo(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\nfunc (n *ProductEipController) EipLine(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ProductEipLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.EipLine(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": fmt.Sprintf(\"%+v\", err)})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tif res == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"data\": res})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取列表信息失败\")\n\t\treturn\n\t}\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/constant/constant.go\n```golang\npackage constant\n\nconst (\n\tXgw     = \"XGW\"\n\tTengine = \"Tengine\"\n\tKgw     = \"KGW\"\n\tSgw     = \"SGW\"\n\tNat     = \"NAT\"\n\tPgw     = \"PGW\"\n\tTgw     = \"TGW\"\n\n\tLb  = \"LB\"  //负载均衡\n\tEip = \"EIP\" //弹性IP\n\tBm  = \"BM\"  //裸金属\n\tSl  = \"SL\"  //专线\n\tP2p = \"P2P\" // peer to peer 对等连接\n\tVpn = \"VPN\" //VPN\n\n\tXgwLb     = \"XGW-LB\"\n\tXgwEip    = \"XGW-EIP\"\n\tTengineLb = \"Tengine-LB\"\n\tKgwLb     = \"KGW-LB\"\n\tSgwEip    = \"SGW-EIP\"\n\tNatNat    = \"NAT\"\n\tPgwBm     = \"PGW-BM\"\n\tTgwSl     = \"TGW-SL\"\n\tTgwP2p    = \"TGW-P2P\"\n\tTgwVpn    = \"TGW-VPN\"\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/model/monitor_tsdb_metrics.go\n```golang\npackage model\n\nimport (\n\t\"time\"\n)\n\ntype MonitorTsdbMetrics struct {\n\tID           int       `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`\n\tProductLine  string    `gorm:\"column:product_line;NOT NULL\"` // 产品线\n\tCode         string    `gorm:\"column:code;NOT NULL\"`         // 唯一标识\n\tName         string    `gorm:\"column:name;NOT NULL\"`         // 中文名\n\tDisplayName  string    `gorm:\"column:display_name;NOT NULL\"`\n\tMetricPrefix string    `gorm:\"column:metric_prefix;NOT NULL\"` // metric前缀\n\tUnit         string    `gorm:\"column:unit;NOT NULL;default:''\"`\n\tCreatedAt    time.Time `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"`\n\tUpdatedAt    time.Time `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"`\n\tDeletedAt    time.Time `gorm:\"column:deleted_at\"`\n}\n\nfunc (m *MonitorTsdbMetrics) TableName() string {\n\treturn \"monitor_tsdb_metrics\"\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/model/monitor_top.go\n```golang\npackage model\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n\t\"fmt\"\n\t\"time\"\n)\n\n// region + az + code 唯一\ntype MonitorTop struct {\n\tID                  int        `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`        // 主键\n\tProductLine         string     `gorm:\"column:product_line;NOT NULL\"`                // 产品线\n\tRegion              string     `gorm:\"column:region;NOT NULL\"`                      // 区域\n\tAz                  string     `gorm:\"column:az;NOT NULL\"`                          // 可用区\n\tCode                string     `gorm:\"column:code;NOT NULL\"`                        // top项的唯一标识\n\tName                string     `gorm:\"column:name;NOT NULL\"`                        // 中文名\n\tHalfHour            []TopValue `gorm:\"column:half_hour;serializer:json_str\"`        // 0.5h top10数据\n\tHalfHourUpdateAt    time.Time  `gorm:\"column:half_hour_update_at\"`                  // 0.5h更新时间\n\tOneHour             []TopValue `gorm:\"column:one_hour;serializer:json_str\"`         // 1h top10数据\n\tOneHourUpdateAt     time.Time  `gorm:\"column:one_hour_update_at\"`                   // 1h更新时间\n\tThreeHours          []TopValue `gorm:\"column:three_hours;serializer:json_str\"`      // 3h top10数据\n\tThreeHoursUpdateAt  time.Time  `gorm:\"column:three_hours_update_at\"`                // 3h更新时间\n\tTwelveHours         []TopValue `gorm:\"column:twelve_hours;serializer:json_str\"`     // 12h top10数据\n\tTwelveHoursUpdateAt time.Time  `gorm:\"column:twelve_hours_update_at\"`               // 12h更新时间\n\tOneDay              []TopValue `gorm:\"column:one_day;serializer:json_str\"`          // 1d top10数据\n\tOneDayUpdateAt      time.Time  `gorm:\"column:one_day_update_at\"`                    // 1d更新时间\n\tSevenDays           []TopValue `gorm:\"column:seven_days;serializer:json_str\"`       // 7d top10数据\n\tSevenDaysUpdateAt   time.Time  `gorm:\"column:seven_days_update_at\"`                 // 7d更新时间\n\tThirtyDays          []TopValue `gorm:\"column:thirty_days;serializer:json_str\"`      // 30d top10数据\n\tThirtyDaysUpdateAt  time.Time  `gorm:\"column:thirty_days_update_at\"`                // 30d更新时间\n\tCreatedAt           time.Time  `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"` // 创建时间\n\tUpdatedAt           time.Time  `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"` // 更新时间\n\tDeletedAt           time.Time  `gorm:\"column:deleted_at\"`                           // 删除时间\n}\n\ntype TopValue struct {\n\tId    string  //实例唯一id\n\tName  string  //名称\n\tValue float64 //值\n}\n\nfunc (m *MonitorTop) TableName() string {\n\treturn \"monitor_top\"\n}\n\nfunc (m *MonitorTop) ParseIntervalData(start, end int64) []TopValue {\n\tvar intervalData []TopValue\n\tintervalStr := opentsdb.ParseTimeInterval(start, end)\n\tfmt.Printf(\"DEBUG: intervalStr:%s\\n\", intervalStr)\n\tswitch intervalStr {\n\tcase \"0.5h\":\n\t\tintervalData = m.HalfHour\n\tcase \"1h\":\n\t\tintervalData = m.OneHour\n\tcase \"3h\":\n\t\tintervalData = m.ThreeHours\n\tcase \"12h\":\n\t\tintervalData = m.TwelveHours\n\tcase \"1d\":\n\t\tintervalData = m.OneDay\n\tcase \"7d\":\n\t\tintervalData = m.SevenDays\n\tcase \"30d\":\n\t\tintervalData = m.ThirtyDays\n\t}\n\treturn intervalData\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/model/network_pool.go\n```golang\npackage model\n\nimport \"time\"\n\n// NetworkPool 网络资源池信息\ntype NetworkPool struct {\n\tGalaxy         string    `gorm:\"column:galaxy\"`          // 环境\n\tRegion         string    `gorm:\"column:region\"`          // 区域\n\tAz             string    `gorm:\"column:az\"`              // 可用区\n\tDeleted        int       `gorm:\"column:deleted\"`         // 是否删除\n\tLastUpdateAt   time.Time `gorm:\"column:last_update_at\"`  // 最后更新时间\n\tPoolID         string    `gorm:\"column:pool_id\"`         // 资源池ID\n\tPoolName       string    `gorm:\"column:pool_name\"`       // 资源池名称\n\tID             uint64    `gorm:\"column:id\"`              // 自增ID\n\tCreatedAt      time.Time `gorm:\"column:created_at\"`      // 创建时间\n\tUpdatedAt      time.Time `gorm:\"column:updated_at\"`      // 更新时间\n\tDeletedAt      time.Time `gorm:\"column:deleted_at\"`      // 删除时间\n\tPoolType       string    `gorm:\"column:pool_type\"`       // 资源池类型\n\tServerCount    int       `gorm:\"column:server_count\"`    // 服务器数量\n\tHosts          string    `gorm:\"column:hosts\"`           // 主机列表\n\tExtensionCount string    `gorm:\"column:extension_count\"` // 扩展数量\n}\n\ntype NetworkPoolInventory struct {\n\tId        int       `gorm:\"column:id\"`\n\tCreatedAt time.Time `gorm:\"column:created_at\"`\n\tUpdatedAt time.Time `gorm:\"column:updated_at\"`\n\tDeletedAt time.Time `gorm:\"column:deleted_at\"`\n\n\tGalaxy       string    `gorm:\"column:galaxy\"`\n\tRegion       string    `gorm:\"column:region\"`\n\tAz           string    `gorm:\"column:az\"`\n\tDeleted      int       `gorm:\"column:deleted\"`\n\tLastUpdateAt time.Time `gorm:\"column:last_update_at\"`\n\n\tPoolType         string  `gorm:\"column:pool_type\"`\n\tWayType          string  `gorm:\"column:way_type\"`\n\tCidr             string  `gorm:\"column:cidr\"`\n\tIpCount          int     `gorm:\"column:ip_count\"`\n\tIpUsedCount      int     `gorm:\"column:ip_used_count\"`\n\tIpValidCount     int     `gorm:\"column:ip_valid_count\"`\n\tIpRemindCount    int     `gorm:\"column:ip_remind_count\"`\n\tIpUsedRatio      float64 `gorm:\"column:ip_used_ratio\"`\n\tIpAvailableRatio float64 `gorm:\"column:ip_available_ratio\"`\n\tCpuTotal         int     `gorm:\"column:cpu_total\"`\n\tMemTotal         int     `gorm:\"column:mem_total\"`\n}\n\ntype NetworkPoolClusters struct {\n\tGalaxy          string    `gorm:\"column:galaxy\"`\n\tRegion          string    `gorm:\"column:region\"`\n\tAz              string    `gorm:\"column:az\"`\n\tDeleted         int       `gorm:\"column:deleted\"`\n\tLastUpdateAt    time.Time `gorm:\"column:last_update_at\"`\n\tId              uint64    `gorm:\"column:id\"`\n\tCreatedAt       time.Time `gorm:\"column:created_at\"`\n\tUpdatedAt       time.Time `gorm:\"column:updated_at\"`\n\tDeletedAt       time.Time `gorm:\"column:deleted_at\"`\n\tName            string    `gorm:\"column:name\"`\n\tCount           int       `gorm:\"column:count\"`\n\tInstancesCounts string    `gorm:\"column:instances_counts\"`\n}\n\ntype NetworkProductEip struct {\n\tId     int    `gorm:\"column:id\"`\n\tGalaxy string `gorm:\"column:galaxy\"`\n\tRegion string `gorm:\"column:region\"`\n\tAz     string `gorm:\"column:az\"`\n\t//Deleted      int       `gorm:\"column:deleted\"`\n\t//LastUpdateAt int64     `gorm:\"column:last_update_at\"`\n\tPoolId       string    `gorm:\"column:pool_id\"`\n\tPoolName     string    `gorm:\"column:pool_name\"`\n\tTenantId     string    `gorm:\"column:tenant_id\"`\n\tTenantName   string    `gorm:\"column:tenant_name\"`\n\tProjectId    string    `gorm:\"column:project_id\"`\n\tProjectName  string    `gorm:\"column:project_name\"`\n\tInstanceId   string    `gorm:\"column:instance_id\"`\n\tInstanceName string    `gorm:\"column:instance_name\"`\n\tCreatedAt    time.Time `gorm:\"column:created_at\"`\n\tUpdatedAt    time.Time `gorm:\"column:updated_at\"`\n\tDeletedAt    time.Time `gorm:\"column:deleted_at\"`\n\n\tXgwCluster string    `gorm:\"column:xgw_cluster\"`\n\tIpAddr     string    `gorm:\"column:ip_addr\"`\n\tBoundState int       `gorm:\"column:bound_state\"`\n\tNetSegName string    `gorm:\"column:net_seg_name\"`\n\tCidr       string    `gorm:\"column:cidr\"`\n\tIpVersion  string    `gorm:\"column:ip_version\"`\n\tWayType    string    `gorm:\"column:way_type\"`\n\tBoundType  string    `gorm:\"column:bound_type\"`\n\tBoundName  string    `gorm:\"column:bound_name\"`\n\tBoundId    string    `gorm:\"column:bound_id\"`\n\tNetCard    string    `gorm:\"column:net_card\"`\n\tCardType   string    `gorm:\"column:card_type\"`\n\tBandwidth  string    `gorm:\"column:bandwidth\"`\n\tRowNum     int       `gorm:\"column:row_num\"`\n\tCreateTime time.Time `gorm:\"column:create_time\"`\n}\n\ntype VmDetail struct {\n\tId                     string `gorm:\"column:id\"`\n\tTenantId               string `gorm:\"column:tenant_id\"`\n\tTenantName             string `gorm:\"column:tenant_name\"`\n\tStatus                 string `gorm:\"column:status\"`\n\tName                   string `gorm:\"column:name\"`\n\tAggregate              string `gorm:\"column:aggregate\"`\n\tAggregateId            int    `gorm:\"column:aggregate_id\"`\n\tRegion                 string `gorm:\"column:region\"`\n\tRegionName             string `gorm:\"column:region_name\"`\n\tAz                     string `gorm:\"column:az\"`\n\tAzName                 string `gorm:\"column:az_name\"`\n\tHost                   string `gorm:\"column:host\"`\n\tVmName                 string `gorm:\"column:vm_name\"`\n\tBusiness               string `gorm:\"column:business\"`\n\tOpsLabel               string `gorm:\"column:ops_label\"`\n\tLabel                  string `gorm:\"column:label\"`\n\tImageId                string `gorm:\"column:image_id\"`\n\tDataGuardSet           string `gorm:\"column:data_guard_set\"`\n\tAdminPass              string `gorm:\"column:admin_pass\"`\n\tCreateTime             int    `gorm:\"column:create_time\"`\n\tEndTime                int    `gorm:\"column:end_time\"`\n\tDeleteTime             int    `gorm:\"column:delete_time\"`\n\tInstanceType           string `gorm:\"column:instance_type\"`\n\tSize                   string `gorm:\"column:size\"`\n\tOs                     string `gorm:\"column:os\"`\n\tSysDisk                string `gorm:\"column:sys_disk\"`\n\tDataDisk               string `gorm:\"column:data_disk\"`\n\tIncId                  string `gorm:\"column:inc_id\"`\n\tEip                    string `gorm:\"column:eip\"`\n\tDns1                   string `gorm:\"column:dns1\"`\n\tDns2                   string `gorm:\"column:dns2\"`\n\tInternetIpv4           string `gorm:\"column:internet_ipv4\"`\n\tSecurityGroup          string `gorm:\"column:security_group\"`\n\tVpc                    string `gorm:\"column:vpc\"`\n\tSubNetwork             string `gorm:\"column:sub_network\"`\n\tInnerIp                string `gorm:\"column:inner_ip\"`\n\tNetworkData            string `gorm:\"column:network_data\"`\n\tKeySet                 string `gorm:\"column:key_set\"`\n\tKeyList                string `gorm:\"column:key_list\"`\n\tDataGuardList          string `gorm:\"column:data_guard_list\"`\n\tSecurityList           string `gorm:\"column:security_list\"`\n\tLocalVolumeSetDataList string `gorm:\"column:local_volume_set_data_list\"`\n\tEbsVolumes             string `gorm:\"column:ebs_volumes\"`\n\tHostname               string `gorm:\"column:hostname\"`\n\tMetricDir              string `gorm:\"column:metric_dir\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/service/product_nat.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\tresource_networkv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb/pkg\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dto\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"net/http\"\n)\n\ntype ProductNatService struct {\n\tStore dao.NetworkStore\n}\n\nfunc NewProductNatService() *ProductNatService {\n\treturn &ProductNatService{\n\t\tStore: *dao.NewNetworkStore(),\n\t}\n}\n\nfunc (p *ProductNatService) Overview(ctx context.Context, par *dto.ProductNatOverviewReq) (*dto.ProductNatOverviewTopRsp, error) {\n\tnatListRsp, err := p.Store.NetworkRpcClient.ListNat(ctx, &resource_networkv1alpha.ListNatReq{\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t\tAz:       []string{par.Az},\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"error query rpc ListNat: %v\", err)\n\t\treturn nil, err\n\t}\n\n\tvar (\n\t\tpublic  = 0 //公网\n\t\tprivate = 0 // 内网\n\t\ti       = int64(0)\n\t)\n\tfor ; i < natListRsp.TotalCount; i++ {\n\t\tswitch natListRsp.NatSet[i].NatType {\n\t\tcase \"public\":\n\t\t\tpublic++\n\t\tdefault:\n\t\t\tprivate++\n\t\t}\n\t}\n\tvalues := []types.BasicOverviewSlotValue{\n\t\t{\n\t\t\tName:  \"公网\",\n\t\t\tValue: public,\n\t\t},\n\t\t{\n\t\t\tName:  \"金山云内网\",\n\t\t\tValue: private,\n\t\t},\n\t}\n\tslot := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:  \"NAT统计\",\n\t\t\tValue: natListRsp.TotalCount,\n\t\t},\n\t\tValues: values,\n\t}\n\ttops := []types.BasicOverviewSlot{slot}\n\treturn &dto.ProductNatOverviewTopRsp{\n\t\tTops: tops,\n\t}, nil\n}\n\nfunc (p *ProductNatService) OverviewTop(ctx context.Context, par *dto.ProductNatOverviewTopReq) (*dto.ProductNatOverviewTopRsp, error) {\n\ttops := []types.BasicOverviewSlot{}\n\n\tfor _, name := range par.MetricName {\n\t\ttsdbMetric, err := p.Store.MetricDao.GetOneByCode(ctx, name)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"get tsdb metric %s err\", name)\n\t\t}\n\t\tif tsdbMetric == nil {\n\t\t\treturn nil, errors.WithMessagef(fmt.Errorf(\"record not found\"), \"get tsdb metric %s err\", name)\n\t\t}\n\t\ttopData, err := p.Store.MetricTopDao.GetOneByCode(ctx, dao.QueryParams{\n\t\t\tRegion: par.Region,\n\t\t\tAz:     par.Az,\n\t\t\tCode:   name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tintervalData := topData.ParseIntervalData(par.Start, par.End)\n\t\t//topK\n\t\tif par.TopK > 10 {\n\t\t\treturn nil, fmt.Errorf(\"topK is too large\")\n\t\t}\n\t\tif par.TopK < len(intervalData) {\n\t\t\tintervalData = intervalData[:par.TopK]\n\t\t}\n\n\t\tvalues := []types.BasicOverviewSlotValue{}\n\t\tfor k, v := range intervalData {\n\t\t\tvalue := types.BasicOverviewSlotValue{\n\t\t\t\tName:     fmt.Sprintf(\"Top%d\", k+1),\n\t\t\t\tSubName:  v.Name,\n\t\t\t\tCode:     v.Id,\n\t\t\t\tValue:    v.Value,\n\t\t\t\tUnit:     tsdbMetric.Unit,\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t}\n\t\t\tvalues = append(values, value)\n\t\t}\n\n\t\tslot := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        tsdbMetric.DisplayName,\n\t\t\t\tValue:       0,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t\tValues: values,\n\t\t}\n\t\ttops = append(tops, slot)\n\t}\n\n\treturn &dto.ProductNatOverviewTopRsp{\n\t\tTops: tops,\n\t}, nil\n}\n\nfunc (p *ProductNatService) NatLine(ctx context.Context, par *dto.ProductNatLineReq) (*dto.ProductNatLineRsp, error) {\n\tnatInfo, err := p.Store.NetworkRpcClient.DetailNat(ctx, &resource_networkv1alpha.DetailNatReq{NatId: par.ID})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call DetailNat err\")\n\t}\n\tif natInfo == nil || natInfo.NatId == \"\" {\n\t\treturn nil, errors.New(fmt.Sprintf(\"nat instance %s not found\", par.ID))\n\t}\n\tregion := natInfo.Region\n\tqueryParam := pkg.QueryParam{\n\t\tStart: par.Start,\n\t\tEnd:   par.End,\n\t}\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tfor _, name := range par.MetricName {\n\t\tsubqueries := make([]pkg.SubQuery, 0)\n\t\ttsdbMetric, err := p.Store.MetricDao.GetOneByCode(ctx, name)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"get tsdb metric %s err\", name)\n\t\t}\n\t\tif tsdbMetric == nil {\n\t\t\treturn nil, errors.WithMessagef(fmt.Errorf(\"record not found\"), \"get tsdb metric %s err\", name)\n\t\t}\n\t\teipQuery := tsdbql_template.ParseTsdbQuery(tsdbMetric.ProductLine, tsdbMetric.MetricPrefix, par.ID)\n\t\tsubqueries = append(subqueries, pkg.SubQuery{\n\t\t\tAggregator: \"sum\",\n\t\t\tMetric:     eipQuery.Metric,\n\t\t\tTags:       map[string]string{\"host\": eipQuery.HostTag},\n\t\t\tDownsample: opentsdb.TimeToDownsample(par.End - par.Start),\n\t\t})\n\n\t\tqueryParam.Queries = subqueries\n\t\tqueryResp, err := opentsdb.Query(ctx, region, queryParam)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"tsdb query err, param : %v\", queryParam)\n\t\t}\n\t\t//查询404返回空数据\n\t\tif queryResp.StatusCode != http.StatusOK {\n\t\t\tif queryResp.StatusCode == http.StatusNotFound {\n\t\t\t\treturn &dto.ProductNatLineRsp{Lines: lines}, nil\n\t\t\t}\n\t\t\treturn nil, errors.New(\"tsdb query response failed\")\n\t\t}\n\t\t//查询200,但是数据为空，返回空数据\n\t\tif len(queryResp.QueryRespCnts) <= 0 {\n\t\t\treturn &dto.ProductNatLineRsp{Lines: lines}, nil\n\t\t}\n\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        tsdbMetric.DisplayName,\n\t\t\t\tValue:       nil,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t}\n\n\t\tdataPoints := queryResp.QueryRespCnts[0].GetDataPoints()\n\t\tfor _, v := range dataPoints {\n\t\t\tif tsdbMetric.Unit == \"%\" {\n\t\t\t\tv.Value = tools.FormPercent(v.Value.(float64) / 1e2)\n\t\t\t}\n\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:        fmt.Sprintf(\"%d\", tools.UnixToUnixMilli(v.Timestamp)),\n\t\t\t\tCode:        \"\",\n\t\t\t\tValue:       v.Value,\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tDescription: v.Metric,\n\t\t\t})\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\n\treturn &dto.ProductNatLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/service/product_lb.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\tresource_networkv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb/pkg\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/lb\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dto\"\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/pkg/errors\"\n\t\"k8s.io/klog/v2\"\n\t\"net/http\"\n)\n\ntype ProductLbService struct {\n\tStore dao.NetworkStore\n}\n\nfunc NewProductLbService() *ProductLbService {\n\treturn &ProductLbService{\n\t\tStore: *dao.NewNetworkStore(),\n\t}\n}\n\nfunc (p *ProductLbService) LbList(ctx *gin.Context, par dto.ProductLbListReq) (*dto.ProductLbListRsp, error) {\n\t//获取\n\trpcResult, err := p.Store.NetworkRpcClient.ListLb(ctx, &resource_networkv1alpha.ListLbReq{\n\t\tPageNo:            1,\n\t\tPageSize:          -1,\n\t\tLoadBalancerType:  par.LoadBalancerType,\n\t\tLoadBalancerState: par.LoadBalancerState,\n\t\tLineType:          par.LineType,\n\t\tType:              par.Type,\n\t\tRegion:            par.Region,\n\t\tAz:                par.Az,\n\t\tPoolName:          par.PoolName,\n\t\tTenantId:          par.TenantId,\n\t\tTenantName:        par.TenantName,\n\t\tProjectName:       par.ProjectName,\n\t\tOrderCode:         par.OrderCode,\n\t\tOrderType:         par.OrderType,\n\t\tQuery:             par.Query,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar lbList []dto.Lb\n\n\tfor _, v := range rpcResult.LoadBalancerSet {\n\t\tlbList = append(lbList, dto.Lb{\n\t\t\tLoadBalancerName:  v.LoadBalancerName,\n\t\t\tLoadBalancerId:    v.LoadBalancerId,\n\t\t\tLoadBalancerType:  v.LoadBalancerType,\n\t\t\tLoadBalancerState: v.LoadBalancerState,\n\t\t\tLineType:          v.LineType,\n\t\t\tVpcName:           v.VpcName,\n\t\t\tPublicIp:          v.PublicIp,\n\t\t\tRegion:            v.Region,\n\t\t\tPoolName:          v.PoolName,\n\t\t\tTenantId:          v.TenantId,\n\t\t\tTenantName:        v.TenantName,\n\t\t\tProjectName:       v.ProjectName,\n\t\t\tCreateTime:        v.CreateTime,\n\t\t})\n\t}\n\t//分页\n\tlow := (par.PageNo - 1) * par.PageSize\n\tif low > len(rpcResult.LoadBalancerSet) {\n\t\tklog.Info(\"PageSize is too large\")\n\t}\n\n\thigh := low + par.PageSize\n\tif high > len(rpcResult.LoadBalancerSet) {\n\t\thigh = len(rpcResult.LoadBalancerSet)\n\t}\n\n\tvar results dto.ProductLbListRsp\n\tresults.PageSize = par.PageSize\n\tresults.PageNo = par.PageNo\n\tresults.TotalCount = int64(len(rpcResult.LoadBalancerSet))\n\tresults.List = lbList[low:high]\n\n\treturn &results, err\n}\n\nfunc (p *ProductLbService) Overview(ctx context.Context, par *dto.ProductLbOverviewReq) (*dto.ProductLbOverviewTopRsp, error) {\n\tlbListRsp, err := p.Store.NetworkRpcClient.ListLb(ctx, &resource_networkv1alpha.ListLbReq{\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t\tAz:       []string{par.Az},\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"error query rpc ListLb: %v\", err)\n\t\treturn nil, err\n\t}\n\n\tvar (\n\t\tactive   = 0 //运行中\n\t\tshutdown = 0 //已停止\n\t\ti        = int64(0)\n\t)\n\tfor ; i < lbListRsp.TotalCount; i++ {\n\t\tswitch lbListRsp.LoadBalancerSet[i].LoadBalancerState {\n\t\tcase \"start\":\n\t\t\tactive++\n\t\tdefault:\n\t\t\tshutdown++\n\t\t}\n\t}\n\tvalues := []types.BasicOverviewSlotValue{\n\t\t{\n\t\t\tName:  \"运行中\",\n\t\t\tValue: active,\n\t\t},\n\t\t{\n\t\t\tName:  \"已停止\",\n\t\t\tValue: shutdown,\n\t\t},\n\t}\n\tslot := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:  \"实例状态\",\n\t\t\tValue: lbListRsp.TotalCount,\n\t\t},\n\t\tValues: values,\n\t}\n\ttops := []types.BasicOverviewSlot{slot}\n\treturn &dto.ProductLbOverviewTopRsp{\n\t\tTops: tops,\n\t}, nil\n}\n\nfunc (p *ProductLbService) OverviewTop(ctx context.Context, par *dto.ProductLbOverviewTopReq) (*dto.ProductLbOverviewTopRsp, error) {\n\ttops := []types.BasicOverviewSlot{}\n\n\tfor _, name := range par.MetricName {\n\t\ttsdbMetric, err := p.Store.MetricDao.GetOneByCode(ctx, name)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"get tsdb metric %s err\", name)\n\t\t}\n\t\tif tsdbMetric == nil {\n\t\t\treturn nil, errors.WithMessagef(fmt.Errorf(\"record not found\"), \"get tsdb metric %s err\", name)\n\t\t}\n\t\ttopData, err := p.Store.MetricTopDao.GetOneByCode(ctx, dao.QueryParams{\n\t\t\tRegion: par.Region,\n\t\t\tAz:     par.Az,\n\t\t\tCode:   name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tintervalData := topData.ParseIntervalData(par.Start, par.End)\n\t\t//topK\n\t\tif par.TopK > 10 {\n\t\t\treturn nil, fmt.Errorf(\"topK is too large\")\n\t\t}\n\t\tif par.TopK < len(intervalData) {\n\t\t\tintervalData = intervalData[:par.TopK]\n\t\t}\n\n\t\tvalues := []types.BasicOverviewSlotValue{}\n\t\tfor k, v := range intervalData {\n\t\t\tvalue := types.BasicOverviewSlotValue{\n\t\t\t\tName:     v.Name,\n\t\t\t\tCode:     v.Id,\n\t\t\t\tValue:    v.Value,\n\t\t\t\tUnit:     tsdbMetric.Unit,\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t}\n\t\t\tif name != lb.Lb_cps {\n\t\t\t\tvalue.SubName = value.Name\n\t\t\t\tvalue.Name = fmt.Sprintf(\"Top%d\", k+1)\n\t\t\t}\n\t\t\tvalues = append(values, value)\n\t\t}\n\n\t\tslot := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        tsdbMetric.DisplayName,\n\t\t\t\tValue:       0,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t\tValues: values,\n\t\t}\n\t\ttops = append(tops, slot)\n\t}\n\n\treturn &dto.ProductLbOverviewTopRsp{\n\t\tTops: tops,\n\t}, nil\n}\n\nfunc (p *ProductLbService) LbLine(ctx context.Context, par *dto.ProductLbLineReq) (*dto.ProductLbLineRsp, error) {\n\tlbInfo, err := p.Store.NetworkRpcClient.DetailLb(ctx, &resource_networkv1alpha.DetailLbReq{LoadBalancerId: par.ID})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call DetailLb err\")\n\t}\n\tif lbInfo == nil || lbInfo.LoadBalancerId == \"\" {\n\t\treturn nil, errors.New(fmt.Sprintf(\"lb instance %s not found\", par.ID))\n\t}\n\tregion := lbInfo.Region\n\tqueryParam := pkg.QueryParam{\n\t\tStart: par.Start,\n\t\tEnd:   par.End,\n\t}\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tfor _, name := range par.MetricName {\n\t\tsubqueries := make([]pkg.SubQuery, 0)\n\t\ttsdbMetric, err := p.Store.MetricDao.GetOneByCode(ctx, name)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"get tsdb metric %s err\", name)\n\t\t}\n\t\tif tsdbMetric == nil {\n\t\t\treturn nil, errors.WithMessagef(fmt.Errorf(\"record not found\"), \"get tsdb metric %s err\", name)\n\t\t}\n\t\teipQuery := tsdbql_template.ParseTsdbQuery(tsdbMetric.ProductLine, tsdbMetric.MetricPrefix, par.ID)\n\t\tsubqueries = append(subqueries, pkg.SubQuery{\n\t\t\tAggregator: \"sum\",\n\t\t\tMetric:     eipQuery.Metric,\n\t\t\tTags:       map[string]string{\"host\": eipQuery.HostTag},\n\t\t\tDownsample: opentsdb.TimeToDownsample(par.End - par.Start),\n\t\t})\n\n\t\tqueryParam.Queries = subqueries\n\t\tqueryResp, err := opentsdb.Query(ctx, region, queryParam)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"tsdb query err, param : %v\", queryParam)\n\t\t}\n\t\t//查询404返回空数据\n\t\tif queryResp.StatusCode != http.StatusOK {\n\t\t\tif queryResp.StatusCode == http.StatusNotFound {\n\t\t\t\treturn &dto.ProductLbLineRsp{Lines: lines}, nil\n\t\t\t}\n\t\t\treturn nil, errors.New(\"tsdb query response failed\")\n\t\t}\n\t\t//查询200,但是数据为空，返回空数据\n\t\tif len(queryResp.QueryRespCnts) <= 0 {\n\t\t\treturn &dto.ProductLbLineRsp{Lines: lines}, nil\n\t\t}\n\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        tsdbMetric.DisplayName,\n\t\t\t\tValue:       nil,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t}\n\n\t\tdataPoints := queryResp.QueryRespCnts[0].GetDataPoints()\n\t\tfor _, v := range dataPoints {\n\t\t\tif tsdbMetric.Unit == \"%\" {\n\t\t\t\tv.Value = tools.FormPercent(v.Value.(float64) / 1e2)\n\t\t\t}\n\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:        fmt.Sprintf(\"%d\", tools.UnixToUnixMilli(v.Timestamp)),\n\t\t\t\tCode:        \"\",\n\t\t\t\tValue:       v.Value,\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tDescription: v.Metric,\n\t\t\t})\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\n\treturn &dto.ProductLbLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/service/network_pool.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\ttemplate \"ezone.ksyun.com/ezone/luban/monitor/common/promql_template\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/network\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/server\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/trace\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/utils\"\n\t\"github.com/pkg/errors\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n\tprom_model \"github.com/prometheus/common/model\"\n\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tresource_networkv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\tprom_client \"ezone.ksyun.com/ezone/luban/monitor/common/client/prom\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dto\"\n\t\"github.com/jinzhu/copier\"\n)\n\nvar (\n\talertLevels      = []string{\"p0\", \"p1\", \"p2\", \"p3\"}\n\t_alertLevelsName = map[string]string{\n\t\t\"p0\": \"紧急告警\",\n\t\t\"p1\": \"重要告警\",\n\t\t\"p2\": \"次要告警\",\n\t\t\"p3\": \"提醒告警\",\n\t}\n\tpoolTypes      = []string{\"XGW\", \"Tengine\", \"SGW\", \"NAT\", \"KGW\"}\n\t_poolTypesName = map[string]string{\n\t\t\"XGW\":     \"XGW集群\",\n\t\t\"Tengine\": \"Tengine集群\",\n\t\t\"SGW\":     \"SGW集群\",\n\t\t\"NAT\":     \"NAT集群\",\n\t\t\"KGW\":     \"KGW集群\",\n\t\t\"PGW\":     \"PGW集群\",\n\t\t\"TGW\":     \"TGW集群\",\n\t}\n)\n\ntype NetworkPoolService struct {\n\tStore dao.NetworkStore\n}\n\nfunc NewNetworkPoolService() *NetworkPoolService {\n\treturn &NetworkPoolService{\n\t\tStore: *dao.NewNetworkStore(),\n\t}\n}\n\nfunc (n *NetworkPoolService) OverviewAlert(ctx context.Context, par *dto.NetworkPoolOverviewAlertReq) (*dto.NetworkPoolOverviewAlertRsp, error) {\n\n\talerts, err := n.Store.AlarmRpcClient.ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\tPageNo:   -1,\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t\tStatus:   \"firing\",\n\t})\n\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListAlerts err\")\n\t}\n\n\t//概览数据拼装\n\talertSlots := []types.BasicOverviewSlot{}\n\tfor _, level := range alertLevels {\n\t\talertValues := []types.BasicOverviewSlotValue{}\n\t\tlevelCount := 0\n\t\tfor _, poolType := range poolTypes {\n\t\t\tlevelPoolTypeCount := utils.CountAlertsNum(alerts.Items, strings.ToLower(poolType), level)\n\t\t\tlevelCount += levelPoolTypeCount\n\t\t\talertValues = append(alertValues, types.BasicOverviewSlotValue{\n\t\t\t\tName:        poolType,\n\t\t\t\tCode:        poolType,\n\t\t\t\tValue:       levelPoolTypeCount,\n\t\t\t\tUnit:        \"个\",\n\t\t\t\tUnitType:    types.TypeNumber,\n\t\t\t\tKind:        types.KindError,\n\t\t\t\tDescription: \"\",\n\t\t\t})\n\t\t}\n\t\talertSlot := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tCode:        level,\n\t\t\t\tName:        level,\n\t\t\t\tValue:       levelCount,\n\t\t\t\tUnitType:    types.TypeNumber,\n\t\t\t\tUnit:        \"个\",\n\t\t\t\tKind:        types.KindError,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t\tValues: alertValues,\n\t\t}\n\t\talertSlots = append(alertSlots, alertSlot)\n\t}\n\n\treturn &dto.NetworkPoolOverviewAlertRsp{\n\t\tAlerts: alertSlots,\n\t}, nil\n}\n\nfunc (n *NetworkPoolService) OverviewMonitor(ctx context.Context, par *dto.NetworkPoolOverviewMonitorReq) (*dto.NetworkPoolOverviewMonitorRsp, error) {\n\t//服务器列表\n\tserverList, err := n.Store.ServerRpcClient.PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\tPageSize: -1, //all\n\t\tRegion:   par.Region,\n\t\tNodeType: []string{\"network\"},\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call ServerRpcClient.PhysicalServerList err\")\n\t}\n\n\tipList := []string{}\n\tpromIpList := []string{}\n\t//group server  by resource pool\n\t//XGW: []string{\"89.207.132.170\", \"38.0.101.76\"}\n\tpoolTypeToServesMap := map[string][]string{}\n\tfor _, s := range serverList.PhysicalServerHostList {\n\t\tipList = append(ipList, s.ManageIp)\n\t\tpromIpList = append(promIpList, s.ManageIp+\":9100\")\n\t\tresourcePools := strings.Split(s.ResourcePoolType, \",\")\n\t\tfor _, rp := range resourcePools {\n\t\t\tpoolTypeToServesMap[rp] = append(poolTypeToServesMap[rp], s.ManageIp)\n\t\t}\n\t}\n\n\t//查alarm获取promql\n\trsp, err := n.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.Status](promIpList))\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListPromQLs err\")\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\n\t//查Prometheus\n\tup, err := prom_client.VectorQuery(ctx, promQL)\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"prom_client VectorQuery err\")\n\t}\n\tserverMonitorUpStatusMap := prom_client.ParseServerMonitoringStatus(up)\n\n\t//UpCount by resource pool\n\t//XGW: 1\n\tpoolTypeToUpCountMap := map[string]int{}\n\tpoolTypeToDownCountMap := map[string]int{}\n\tupCount := 0\n\tdownCount := 0\n\tfor pt, ips := range poolTypeToServesMap {\n\t\tfor _, ip := range ips {\n\t\t\tif serverMonitorUpStatusMap[ip] == \"up\" {\n\t\t\t\tupCount++\n\t\t\t\tpoolTypeToUpCountMap[pt]++\n\t\t\t} else if serverMonitorUpStatusMap[ip] == \"down\" {\n\t\t\t\tdownCount++\n\t\t\t\tpoolTypeToDownCountMap[pt]++\n\t\t\t} else {\n\t\t\t\t//nothing\n\t\t\t}\n\t\t}\n\t}\n\n\t//服务器监控\n\tmonitors := []types.BasicOverviewSlot{}\n\tmonitorUpValues := []types.BasicOverviewSlotValue{}\n\tmonitorDownValues := []types.BasicOverviewSlotValue{}\n\tfor _, poolType := range poolTypes {\n\t\tmonitorUpValues = append(monitorUpValues, types.BasicOverviewSlotValue{\n\t\t\tName:        poolType,\n\t\t\tCode:        poolType,\n\t\t\tValue:       poolTypeToUpCountMap[poolType],\n\t\t\tUnit:        \"个\",\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tKind:        types.KindInfo,\n\t\t\tDescription: \"\",\n\t\t})\n\n\t\tmonitorDownValues = append(monitorDownValues, types.BasicOverviewSlotValue{\n\t\t\tName:        poolType,\n\t\t\tCode:        poolType,\n\t\t\tValue:       poolTypeToDownCountMap[poolType],\n\t\t\tUnit:        \"个\",\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tKind:        types.KindError,\n\t\t\tDescription: \"\",\n\t\t})\n\t}\n\tmonitorUp := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tCode:        \"up\",\n\t\t\tName:        \"up\",\n\t\t\tValue:       upCount,\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tUnit:        \"个\",\n\t\t\tKind:        types.KindError,\n\t\t\tPrognosis:   0,\n\t\t\tDescription: \"\",\n\t\t},\n\t\tValues: monitorUpValues,\n\t}\n\n\tmonitorDown := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tCode:        \"down\",\n\t\t\tName:        \"down\",\n\t\t\tValue:       downCount,\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tUnit:        \"个\",\n\t\t\tKind:        types.KindError,\n\t\t\tPrognosis:   0,\n\t\t\tDescription: \"\",\n\t\t},\n\t\tValues: monitorDownValues,\n\t}\n\tmonitors = append(monitors, monitorUp, monitorDown)\n\n\treturn &dto.NetworkPoolOverviewMonitorRsp{\n\t\tUp:   []types.BasicOverviewSlot{monitorUp},\n\t\tDown: []types.BasicOverviewSlot{monitorDown},\n\t}, nil\n}\n\nfunc (n *NetworkPoolService) OverviewLine(ctx context.Context, par *dto.NetworkPoolOverviewLineReq) (*dto.NetworkPoolOverviewLineRsp, error) {\n\t////TODO my test req\n\t//currentTime := time.Now()\n\t//par.End = currentTime.UnixMilli()\n\t//par.Start = currentTime.Add(-time.Hour).UnixMilli()\n\t//\n\t//poolType := par.PoolType\n\t//metrics := par.Name\n\t//服务器列表\n\tserverList, err := n.Store.ServerRpcClient.PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\tPageSize: -1, //all\n\t\tRegion:   par.Region,\n\t\tQuery: map[string]string{\n\t\t\t\"ResourcePoolType\": par.PoolType,\n\t\t},\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call ServerRpcClient.PhysicalServerList err\")\n\t}\n\n\tfmt.Printf(\"DEBUG: NetworkOverviewLine: serverList : %+v\", serverList)\n\n\tpromIpList := []string{}\n\tfor _, s := range serverList.PhysicalServerHostList {\n\t\tpromIpList = append(promIpList, s.ManageIp+\":9100\")\n\t}\n\n\tlines := []types.BasicOverviewSlot{}\n\tfor _, name := range par.MetricName {\n\t\t//查模版\n\t\ttpl, ok := server.TemplateMap[name]\n\t\tif !ok {\n\t\t\treturn nil, errors.New(\"not found metric name\")\n\t\t}\n\n\t\t//查alarm获取promql\n\t\trsp, err := n.Store.AlarmRpcClient.ListPromQLs(ctx, tpl(promIpList))\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListPromQLs err\")\n\t\t}\n\t\tif rsp == nil || len(rsp.Items) < 1 {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListPromQLs rsp err\")\n\t\t}\n\t\tpromQL := rsp.Items[0].RealPromql\n\t\tunit := rsp.Items[0].Unit\n\n\t\tstep := prom_client.TimeToStep(par.End - par.Start)\n\n\t\t//查Prometheus\n\t\tmatrix, err := prom_client.MatrixQuery(ctx, promQL, v1.Range{\n\t\t\tStart: time.UnixMilli(par.Start),\n\t\t\tEnd:   time.UnixMilli(par.End),\n\t\t\tStep:  step,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"call prom_client.MatrixQuery err\")\n\t\t}\n\n\t\tfmt.Printf(\"DEBUG: NetworkOverviewLine: real promQL : %s\", promQL)\n\t\tfmt.Printf(\"DEBUG: NetworkOverviewLine: rsp %+v\", matrix)\n\t\tfmt.Printf(\"DEBUG: NetworkOverviewLine: rsp err %+v\", err)\n\n\t\t//封装结果数据\n\t\tfor _, m := range matrix {\n\t\t\tlineName := string(m.Metric[\"hostname\"])\n\t\t\tline := types.BasicOverviewSlot{\n\t\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\t\tIndex:       0,\n\t\t\t\t\tName:        lineName,\n\t\t\t\t\tValue:       0,\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\tUnit:        unit,\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tPrognosis:   0, //预测值，values的下标，0则无预测值\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t},\n\t\t\t}\n\t\t\tfor _, p := range m.Values {\n\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\tvalue := p.Value\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\tCode:        lineName,\n\t\t\t\t\tValue:       value,\n\t\t\t\t\tUnit:        unit,\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t})\n\t\t\t}\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\treturn &dto.NetworkPoolOverviewLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\nfunc (n *NetworkPoolService) ListEIPPool(ctx context.Context, par *dto.ListNetworkPoolEipReq) (*dto.ListNetworkPoolEIPRsp, error) {\n\t//dtoReq to pb\n\tpbReq := resource_networkv1alpha.ListNetworkPoolTypeReq{}\n\terr := copier.Copy(&pbReq, &par)\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"dto to pb err\")\n\t}\n\n\tfmt.Printf(\"DEBUG 1 - traceID: %s\\n\", trace.TraceIDFromContext(ctx))\n\n\t//rpc call\n\trsp, err := n.Store.NetworkRpcClient.ListEIPPool(ctx, &pbReq)\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call NetworkRpcClient.ListEIPPool err\")\n\t}\n\n\t//pb to dto\n\tdtoResult := dto.ListNetworkPoolEIPRsp{}\n\terr = copier.Copy(&dtoResult, rsp)\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"pb to dto err\")\n\t}\n\n\t//add monitor value\n\tfor _, item := range dtoResult.Set {\n\t\tcpuUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.CpuUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call networkPoolVector err\")\n\t\t}\n\t\tmemUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.MemUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call networkPoolVector err\")\n\t\t}\n\t\tdiskUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.DiskUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call networkPoolVector err\")\n\t\t}\n\t\titem.CpuUsedRatio = tools.FormPercent(cpuUsedRatio)\n\t\titem.MemUsedRatio = tools.FormPercent(memUsedRatio)\n\t\titem.DiskUsedRatio = tools.FormPercent(diskUsedRatio)\n\t}\n\n\treturn &dtoResult, nil\n}\n\nfunc (n *NetworkPoolService) ListLBPool(ctx context.Context, par *dto.ListNetworkPoolLBReq) (*dto.ListNetworkPoolLBRsp, error) {\n\t//dtoReq to pb\n\tpbReq := resource_networkv1alpha.ListNetworkPoolTypeReq{}\n\tif err := copier.Copy(&pbReq, par); err != nil {\n\t\treturn nil, errors.WithMessage(err, \"failed to copy dto to pb\")\n\t}\n\n\t//rpc call\n\trsp, err := n.Store.NetworkRpcClient.ListLBPool(ctx, &pbReq)\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"failed to call ListLBPool rpc\")\n\t}\n\n\t//pb to dto\n\tdtoResult := dto.ListNetworkPoolLBRsp{}\n\tif err := copier.Copy(&dtoResult, rsp); err != nil {\n\t\treturn nil, errors.WithMessage(err, \"failed to copy pb to dto\")\n\t}\n\n\t//add monitor value\n\tfor _, item := range dtoResult.Set {\n\t\tcpuUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.CpuUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call networkPoolVector err\")\n\t\t}\n\t\tmemUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.MemUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call networkPoolVector err\")\n\t\t}\n\t\tdiskUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.DiskUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call networkPoolVector err\")\n\t\t}\n\t\titem.CpuUsedRatio = tools.FormPercent(cpuUsedRatio)\n\t\titem.MemUsedRatio = tools.FormPercent(memUsedRatio)\n\t\titem.DiskUsedRatio = tools.FormPercent(diskUsedRatio)\n\t}\n\n\treturn &dtoResult, nil\n}\n\nfunc (n *NetworkPoolService) ListNATPool(ctx context.Context, par *dto.ListNetworkPoolNATReq) (*dto.ListNetworkPoolNATRsp, error) {\n\t//dtoReq to pb\n\tpbReq := resource_networkv1alpha.ListNetworkPoolTypeReq{}\n\tif err := copier.Copy(&pbReq, &par); err != nil {\n\t\treturn nil, errors.WithMessage(err, \"error copying dto to pb\")\n\t}\n\n\t//rpc call\n\trsp, err := n.Store.NetworkRpcClient.ListNATPool(ctx, &pbReq)\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"error calling ListNATPool RPC\")\n\t}\n\n\t//pb to dto\n\tdtoResult := dto.ListNetworkPoolNATRsp{}\n\tif err := copier.Copy(&dtoResult, rsp); err != nil {\n\t\treturn nil, errors.WithMessage(err, \"error copying pb to dto\")\n\t}\n\n\t//add monitor value\n\tfor _, item := range dtoResult.Set {\n\t\tcpuUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.CpuUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"error getting CPU usage\")\n\t\t}\n\t\tmemUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.MemUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"error getting memory usage\")\n\t\t}\n\t\tdiskUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.DiskUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"error getting disk usage\")\n\t\t}\n\t\titem.CpuUsedRatio = tools.FormPercent(cpuUsedRatio)\n\t\titem.MemUsedRatio = tools.FormPercent(memUsedRatio)\n\t\titem.DiskUsedRatio = tools.FormPercent(diskUsedRatio)\n\t}\n\n\treturn &dtoResult, nil\n}\n\nfunc (n *NetworkPoolService) ListBMPool(ctx context.Context, par *dto.ListNetworkPoolBMReq) (*dto.ListNetworkPoolBMRsp, error) {\n\t//dtoReq to pb\n\tpbReq := resource_networkv1alpha.ListNetworkPoolTypeReq{}\n\tif err := copier.Copy(&pbReq, &par); err != nil {\n\t\treturn nil, errors.WithMessage(err, \"failed to copy dto to pb\")\n\t}\n\n\t//rpc call\n\trsp, err := n.Store.NetworkRpcClient.ListBMPool(ctx, &pbReq)\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"failed to call ListBMPool rpc\")\n\t}\n\n\t//pb to dto\n\tdtoResult := dto.ListNetworkPoolBMRsp{}\n\tif err := copier.Copy(&dtoResult, rsp); err != nil {\n\t\treturn nil, errors.WithMessage(err, \"failed to copy pb to dto\")\n\t}\n\n\t//add monitor value\n\tfor _, item := range dtoResult.Set {\n\t\tcpuUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.CpuUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"failed to get CPU usage\")\n\t\t}\n\t\tmemUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.MemUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"failed to get memory usage\")\n\t\t}\n\t\tdiskUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.DiskUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"failed to get disk usage\")\n\t\t}\n\t\titem.CpuUsedRatio = tools.FormPercent(cpuUsedRatio)\n\t\titem.MemUsedRatio = tools.FormPercent(memUsedRatio)\n\t\titem.DiskUsedRatio = tools.FormPercent(diskUsedRatio)\n\t}\n\n\treturn &dtoResult, nil\n}\n\nfunc (n *NetworkPoolService) ListSLPool(ctx context.Context, par *dto.ListNetworkPoolSLReq) (*dto.ListNetworkPoolSLRsp, error) {\n\t//dtoReq to pb\n\tpbReq := resource_networkv1alpha.ListNetworkPoolTypeReq{}\n\tif err := copier.Copy(&pbReq, &par); err != nil {\n\t\treturn nil, errors.WithMessage(err, \"error copying pbReq from par\")\n\t}\n\n\t//rpc call\n\trsp, err := n.Store.NetworkRpcClient.ListSLPool(ctx, &pbReq)\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"error calling ListSLPool\")\n\t}\n\n\t//pb to dto\n\tdtoResult := dto.ListNetworkPoolSLRsp{}\n\tif err := copier.Copy(&dtoResult, rsp); err != nil {\n\t\treturn nil, errors.WithMessage(err, \"error copying dtoResult from rsp\")\n\t}\n\n\t//add monitor value\n\tfor _, item := range dtoResult.Set {\n\t\tcpuUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.CpuUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call networkPoolVector err\")\n\t\t}\n\t\tmemUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.MemUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call networkPoolVector err\")\n\t\t}\n\t\tdiskUsedRatio, err := n.networkPoolVector(ctx, par.Region, item.PoolType, server.DiskUsageSumRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call networkPoolVector err\")\n\t\t}\n\t\titem.CpuUsedRatio = tools.FormPercent(cpuUsedRatio)\n\t\titem.MemUsedRatio = tools.FormPercent(memUsedRatio)\n\t\titem.DiskUsedRatio = tools.FormPercent(diskUsedRatio)\n\t}\n\n\treturn &dtoResult, nil\n}\n\nfunc (n *NetworkPoolService) networkPoolVector(ctx context.Context, region, poolType, metricName string) (float64, error) {\n\t//服务器列表\n\tserverList, err := n.Store.ServerRpcClient.PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\tPageSize: -1, //all\n\t\tRegion:   region,\n\t\tQuery: map[string]string{\n\t\t\t\"ResourcePoolType\": poolType,\n\t\t},\n\t})\n\tif err != nil {\n\t\treturn 0, errors.WithMessage(err, \"rpc call PhysicalServerList err\")\n\t}\n\tpromIpList := []string{}\n\tfor _, s := range serverList.PhysicalServerHostList {\n\t\tpromIpList = append(promIpList, s.ManageIp+\":9100\")\n\t}\n\n\t//查alarm获取promql\n\tpromQlReq := server.TemplateMap[metricName](promIpList)\n\trsp, err := n.Store.AlarmRpcClient.ListPromQLs(ctx, promQlReq)\n\tif err != nil {\n\t\treturn 0, errors.WithMessagef(err, \"rpc call ListPromQLs err, req: %+v\", promQlReq)\n\t}\n\tif rsp == nil || len(rsp.Items) < 1 {\n\t\treturn 0, err\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\tfmt.Println(\"real promQL: \", promQL)\n\n\t//查Prometheus\n\tmatrix, err := prom_client.VectorQuery(ctx, promQL)\n\tif err != nil {\n\t\treturn 0, errors.WithMessage(err, \"prom_client VectorQuery err\")\n\t}\n\treturn prom_client.ParseOneVectorValue(matrix), nil\n}\n\nfunc (n *NetworkPoolService) DetailLine(ctx context.Context, par *dto.NetworkPoolDetailLineReq) (*dto.NetworkPoolDetailLineRsp, error) {\n\n\t//TODO my test req\n\t//currentTime := time.Now()\n\t//par.End = currentTime.UnixMilli()\n\t//par.Start = currentTime.Add(-time.Hour).UnixMilli()\n\t//par.MetricName = []string{server.NodeNetworkPps}\n\t//poolType := \"XGW\"\n\n\t//节点汇总\n\t//节点实例连接数汇总 NodeNetstatTcpCurrEstabSum\n\n\t//按节点\n\t//节点实例连接数    NodeNetstatTcpCurrEstab\n\t//节点pps\tNodeNetworkPps\n\t//节点bps\tNodeNetworkBps\n\t//CPU使用率\tCpuUsageRate\n\t//内存使用量  MemUsage\n\t//内存使用率\tMemUsageRate\n\t//磁盘使用量\tDiskUsage\n\t//磁盘使用率\tDiskUsageRate\n\n\t//需要预测的metric\n\tpredictionMetrics := []string{server.NodeNetstatTcpCurrEstabSum, server.NodeNetstatTcpCurrEstab}\n\n\t//需要特别处理line name\n\tspecialLineNameMetrics := []string{server.NodeNetstatTcpCurrEstabSum}\n\n\t//服务器列表\n\tserverList, err := n.Store.ServerRpcClient.PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\tPageSize: -1, //all\n\t\tRegion:   par.Region,\n\t\tQuery: map[string]string{\n\t\t\t\"ResourcePoolType\": par.PoolType,\n\t\t},\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call ServerRpcClient.PhysicalServerList err\")\n\t}\n\n\tpromIpList := []string{}\n\tfor _, s := range serverList.PhysicalServerHostList {\n\t\tpromIpList = append(promIpList, s.ManageIp+\":9100\")\n\t}\n\n\tlines := []types.BasicOverviewSlot{}\n\tfor _, name := range par.MetricName {\n\t\t//查alarm获取promql\n\t\tpromReq := server.TemplateMap[name](promIpList)\n\t\trsp, err := n.Store.AlarmRpcClient.ListPromQLs(ctx, promReq)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListPromQLs err\")\n\t\t}\n\t\tif rsp == nil || len(rsp.Items) < 1 {\n\t\t\treturn nil, errors.New(\"rpc call AlarmRpcClient.ListPromQLs rsp err\")\n\t\t}\n\t\tpromQL := rsp.Items[0].RealPromql\n\t\tunit := rsp.Items[0].Unit\n\n\t\t//查Prometheus\n\t\tstep := prom_client.TimeToStep(par.End - par.Start)\n\t\tmatrix, err := prom_client.MatrixQuery(ctx, promQL, v1.Range{\n\t\t\tStart: time.UnixMilli(par.Start),\n\t\t\tEnd:   time.UnixMilli(par.End),\n\t\t\tStep:  step,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"prom_client MatrixQuery err\")\n\t\t}\n\n\t\t//封装结果数据\n\t\tfor _, m := range matrix {\n\t\t\tlineName := string(m.Metric[\"hostname\"])\n\t\t\tif tools.Contains(specialLineNameMetrics, name) != -1 {\n\t\t\t\tlineName = par.PoolType\n\t\t\t}\n\n\t\t\tline := types.BasicOverviewSlot{\n\t\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\t\tIndex:       0,\n\t\t\t\t\tName:        lineName,\n\t\t\t\t\tValue:       0,\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\tUnit:        unit,\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tPrognosis:   0, //预测值，values的下标，0则无预测值\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t},\n\t\t\t}\n\t\t\tfor _, p := range m.Values {\n\t\t\t\ttimeStamp := tools.UnixToUnixMilli(p.Timestamp.Unix())\n\t\t\t\tvalue := p.Value\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        strconv.Itoa(int(timeStamp)),\n\t\t\t\t\tCode:        lineName,\n\t\t\t\t\tValue:       value,\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\tUnit:        unit,\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t})\n\t\t\t}\n\n\t\t\t//添加预测值\n\t\t\tif par.HasPrediction && tools.Contains(predictionMetrics, name) != -1 {\n\t\t\t\tline.Info.Prognosis = len(line.Values)\n\t\t\t\tpredictStart := par.End\n\t\t\t\tpredictEnd := par.End + (par.End - par.Start)\n\t\t\t\ttInt := tools.UnixMilliToUnix(par.End) - tools.UnixMilliToUnix(par.Start)\n\t\t\t\trangeDuration := strconv.FormatInt(3*tInt, 10)\n\t\t\t\tpredictDuration := strconv.FormatInt(tInt, 10)\n\t\t\t\tpredictSql := \"\"\n\t\t\t\tswitch name {\n\t\t\t\tcase server.NodeNetstatTcpCurrEstabSum:\n\t\t\t\t\tpredictSql = network.GetPredictNodeNetstatTcpCurrEstabSum(promIpList, rangeDuration+\"s\", predictDuration)\n\t\t\t\tcase server.NodeNetstatTcpCurrEstab:\n\t\t\t\t\tinstance := string(m.Metric[\"instance\"])\n\t\t\t\t\tpredictSql = network.GetPredictNodeNetstatTcpCurrEstab(instance, rangeDuration+\"s\", predictDuration)\n\t\t\t\t}\n\n\t\t\t\tpredictMatrix, err := prom_client.MatrixQuery(ctx, predictSql, v1.Range{\n\t\t\t\t\tStart: time.UnixMilli(predictStart),\n\t\t\t\t\tEnd:   time.UnixMilli(predictEnd),\n\t\t\t\t\tStep:  step,\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, errors.WithMessage(err, \"prom_client predictMatrix err\")\n\t\t\t\t}\n\n\t\t\t\tfor _, pm := range predictMatrix {\n\t\t\t\t\tfor _, p := range pm.Values {\n\t\t\t\t\t\ttimeStamp := tools.UnixToUnixMilli(p.Timestamp.Unix())\n\t\t\t\t\t\tvalue := p.Value\n\t\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\t\tName:        strconv.Itoa(int(timeStamp)),\n\t\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\t\tUnit:        unit,\n\t\t\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\t\t\tDescription: \"预测数据\",\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\treturn &dto.NetworkPoolDetailLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\nfunc (n *NetworkPoolService) DetailTop(ctx context.Context, par *dto.NetworkPoolDetailTopReq) (*dto.NetworkPoolDetailTopRsp, error) {\n\n\t////TODO my test req\n\t//currentTime := time.Now()\n\t//par.End = currentTime.UnixMilli()\n\t//par.Start = currentTime.Add(-time.Hour).UnixMilli()\n\t//par.TopK = 5\n\t//par.Name = []string{\"slbConns\"}\n\t//par.Hostname = \"xgw-2.poc.test.com\"\n\t//par.PoolType = \"XGW\"\n\n\tmetricName := par.MetricName\n\tquerySql, ok := network.NativeTemplateMap[metricName]\n\tif !ok {\n\t\treturn nil, errors.New(\"not find metric\")\n\t}\n\tunit := querySql.Unit\n\t//displayName := querySql.Name\n\tquerySql.TopK = par.TopK\n\tquerySql.Duration = tools.UnixMilliToUnix(par.End) - tools.UnixMilliToUnix(par.Start)\n\terr := querySql.Labels.AddMatcher(template.MatchEqual, \"hostname\", par.Hostname)\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"add hostname matcher err\")\n\t}\n\tpromSql, err := querySql.Render()\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"render promql err\")\n\t}\n\n\tmatrix, err := prom_client.MatrixQuery(ctx, promSql, v1.Range{\n\t\tStart: time.UnixMilli(par.Start),\n\t\tEnd:   time.UnixMilli(par.End),\n\t\tStep:  prom_client.TimeToStep(par.End - par.Start),\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"prom_client MatrixQuery err\")\n\t}\n\n\tlines := []types.BasicOverviewSlot{}\n\tfor _, m := range matrix {\n\t\tname := parseMetricDisplayName(metricName, m.Metric)\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        name,\n\t\t\t\tValue:       0,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\tUnit:        unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t}\n\t\tfor _, p := range m.Values {\n\t\t\ttimeStamp := tools.UnixToUnixMilli(p.Timestamp.Unix())\n\t\t\tvalue := p.Value\n\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:        strconv.Itoa(int(timeStamp)),\n\t\t\t\tCode:        name,\n\t\t\t\tValue:       value,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\tUnit:        unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tDescription: \"\",\n\t\t\t})\n\t\t}\n\n\t\tlines = append(lines, line)\n\t}\n\n\treturn &dto.NetworkPoolDetailTopRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\nfunc parseMetricDisplayName(name string, metric prom_model.Metric) string {\n\tdisplayNames := map[string]string{\n\t\tnetwork.SlbConns:                   fmt.Sprintf(\"%s_%s\", metric[\"ip\"], metric[\"port\"]),\n\t\tnetwork.SlbTrafficIn:               fmt.Sprintf(\"%s_%s\", metric[\"ip\"], metric[\"port\"]),\n\t\tnetwork.SlbTrafficOut:              fmt.Sprintf(\"%s_%s\", metric[\"ip\"], metric[\"port\"]),\n\t\tnetwork.TengineSlbConns:            fmt.Sprintf(\"%s_%s\", metric[\"ip\"], metric[\"port\"]),\n\t\tnetwork.TengineSlbTrafficIn:        fmt.Sprintf(\"%s_%s\", metric[\"ip\"], metric[\"port\"]),\n\t\tnetwork.TengineSlbTrafficOut:       fmt.Sprintf(\"%s_%s\", metric[\"ip\"], metric[\"port\"]),\n\t\tnetwork.EipTrafficIn:               fmt.Sprintf(\"%s\", metric[\"eip\"]),\n\t\tnetwork.EipTrafficOut:              fmt.Sprintf(\"%s\", metric[\"eip\"]),\n\t\tnetwork.NatTrafficIn:               fmt.Sprintf(\"%s\", metric[\"vni\"]),\n\t\tnetwork.NatTrafficOut:              fmt.Sprintf(\"%s\", metric[\"vni\"]),\n\t\tnetwork.TgwLpeerBytesIn:            fmt.Sprintf(\"%s_%s\", metric[\"domain\"], metric[\"vni\"]),\n\t\tnetwork.TgwLpeerBytesOut:           fmt.Sprintf(\"%s_%s\", metric[\"domain\"], metric[\"vni\"]),\n\t\tnetwork.TgwDcytesIn:                fmt.Sprintf(\"%s_%s\", metric[\"domain\"], metric[\"vni\"]),\n\t\tnetwork.TgwDcBytesOut:              fmt.Sprintf(\"%s_%s\", metric[\"domain\"], metric[\"vni\"]),\n\t\tnetwork.TgwVpnBytesIn:              fmt.Sprintf(\"%s_%s\", metric[\"domain\"], metric[\"vni\"]),\n\t\tnetwork.TgwVpnBytesOut:             fmt.Sprintf(\"%s_%s\", metric[\"domain\"], metric[\"vni\"]),\n\t\tnetwork.SgwPublicDropPacketRateIn:  fmt.Sprintf(\"%s\", metric[\"ip\"]),\n\t\tnetwork.SgwPublicDropPacketRateOut: fmt.Sprintf(\"%s\", metric[\"ip\"]),\n\t\tnetwork.SgwPublicEipTrafficIn:      fmt.Sprintf(\"%s\", metric[\"ip\"]),\n\t\tnetwork.SgwPublicEipTrafficOut:     fmt.Sprintf(\"%s\", metric[\"ip\"]),\n\t}\n\n\treturn displayNames[name]\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/service/product_eip.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb/pkg\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/dto\"\n\t\"fmt\"\n\t\"github.com/jinzhu/copier\"\n\t\"github.com/pkg/errors\"\n\t\"net/http\"\n)\n\ntype ProductEipService struct {\n\tStore dao.NetworkStore\n}\n\nfunc NewProductEipService() *ProductEipService {\n\treturn &ProductEipService{\n\t\tStore: *dao.NewNetworkStore(),\n\t}\n}\n\nfunc (n *ProductEipService) OverviewAlert(ctx context.Context, par *dto.ProductEipOverviewAlertReq) (*dto.ProductEipOverviewAlertRsp, error) {\n\treturn nil, nil\n}\n\nfunc (n *ProductEipService) OverviewTop(ctx context.Context, par *dto.ProductEipOverviewTopReq) (*dto.ProductEipOverviewTopRsp, error) {\n\n\t////TODO my test req\n\t//currentTime := time.Now()\n\t//par.End = currentTime.UnixMilli()\n\t//par.Start = currentTime.Add(-time.Hour).UnixMilli()\n\t//par.TopK = 10\n\n\ttops := []types.BasicOverviewSlot{}\n\n\tfor _, name := range par.MetricName {\n\t\ttsdbMetric, err := n.Store.MetricDao.GetOneByCode(ctx, name)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"get tsdb metric %s err\", name)\n\t\t}\n\t\tif tsdbMetric == nil {\n\t\t\treturn nil, errors.WithMessagef(fmt.Errorf(\"record not found\"), \"get tsdb metric %s err\", name)\n\t\t}\n\n\t\ttopData, err := n.Store.MetricTopDao.GetOneByCode(ctx, dao.QueryParams{\n\t\t\tRegion: par.Region,\n\t\t\tAz:     \"\",\n\t\t\tCode:   name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"MetricTopDao.GetOneByCode err\")\n\t\t}\n\n\t\tintervalData := topData.ParseIntervalData(par.Start, par.End)\n\t\t//topK\n\t\tif par.TopK > 10 {\n\t\t\treturn nil, errors.New(\"topK is too large\")\n\t\t}\n\t\tif par.TopK < len(intervalData) {\n\t\t\tintervalData = intervalData[:par.TopK]\n\t\t}\n\n\t\tvalues := []types.BasicOverviewSlotValue{}\n\t\tfor _, v := range intervalData {\n\t\t\tvalues = append(values, types.BasicOverviewSlotValue{\n\t\t\t\tName:     v.Name,\n\t\t\t\tCode:     v.Id,\n\t\t\t\tValue:    v.Value,\n\t\t\t\tUnit:     tsdbMetric.Unit,\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t})\n\t\t}\n\n\t\tslot := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        name,\n\t\t\t\tValue:       0,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t\tValues: values,\n\t\t}\n\t\ttops = append(tops, slot)\n\t}\n\n\treturn &dto.ProductEipOverviewTopRsp{\n\t\tTops: tops,\n\t}, nil\n}\n\nfunc (n *ProductEipService) EipInfo(ctx context.Context, par *dto.ProductEipInfoReq) (*dto.ProductEipInfoRsp, error) {\n\n\teip, err := n.Store.NetworkRpcClient.DetailEip(ctx, &pb.DetailEipReq{\n\t\tInstanceID: par.InstanceID,\n\t\tIP:         par.IP,\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call DetailEip err\")\n\t}\n\n\t//rsp pb to dto\n\tresult := &dto.ProductEipInfoRsp{}\n\terr = copier.Copy(&result, &eip)\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"failed to copy pb to dto\")\n\t}\n\n\t// add monitor status\n\treturn result, nil\n}\n\nfunc (n *ProductEipService) EipLine(ctx context.Context, par *dto.ProductEipLineReq) (*dto.ProductEipLineRsp, error) {\n\n\teipInfo, err := n.Store.NetworkRpcClient.DetailEip(ctx, &pb.DetailEipReq{InstanceID: par.ID})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call DetailEip err\")\n\t}\n\tregion := eipInfo.Region\n\n\tqueryParam := pkg.QueryParam{\n\t\tStart: par.Start,\n\t\tEnd:   par.End,\n\t}\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tfor _, name := range par.MetricName {\n\n\t\tsubqueries := make([]pkg.SubQuery, 0)\n\t\ttsdbMetric, err := n.Store.MetricDao.GetOneByCode(ctx, name)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"get tsdb metric %s err\", name)\n\t\t}\n\t\tif tsdbMetric == nil {\n\t\t\treturn nil, errors.WithMessagef(fmt.Errorf(\"record not found\"), \"get tsdb metric %s err\", name)\n\t\t}\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        name,\n\t\t\t\tValue:       nil,\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t}\n\n\t\teipQuery := tsdbql_template.ParseTsdbQuery(tsdbMetric.ProductLine, tsdbMetric.MetricPrefix, par.ID)\n\t\tsubqueries = append(subqueries, pkg.SubQuery{\n\t\t\tAggregator: \"sum\",\n\t\t\tMetric:     eipQuery.Metric,\n\t\t\tTags:       map[string]string{\"host\": eipQuery.HostTag},\n\t\t\tDownsample: opentsdb.TimeToDownsample(par.End - par.Start),\n\t\t})\n\t\tqueryParam.Queries = subqueries\n\t\tqueryResp, err := opentsdb.Query(ctx, region, queryParam)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"tsdb query err, param : %v\", queryParam)\n\t\t}\n\n\t\t//查询404返回空数据\n\t\tif queryResp.StatusCode != http.StatusOK {\n\t\t\tif queryResp.StatusCode == http.StatusNotFound {\n\t\t\t\treturn &dto.ProductEipLineRsp{Lines: lines}, nil\n\t\t\t}\n\t\t\treturn nil, errors.New(\"tsdb query response failed\")\n\t\t}\n\t\t//查询200,但是数据为空，返回空数据\n\t\tif len(queryResp.QueryRespCnts) <= 0 {\n\t\t\treturn &dto.ProductEipLineRsp{Lines: lines}, nil\n\t\t}\n\n\t\tdataPoints := queryResp.QueryRespCnts[0].GetDataPoints()\n\t\tfmt.Printf(\"DEBUG len of dataPoints is %d\\n\", len(dataPoints))\n\t\tfor _, v := range dataPoints {\n\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:        fmt.Sprintf(\"%d\", tools.UnixToUnixMilli(v.Timestamp)),\n\t\t\t\tCode:        \"\",\n\t\t\t\tValue:       v.Value,\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tDescription: v.Metric, //完整metric，便于排查问题\n\t\t\t})\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\n\treturn &dto.ProductEipLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/network/rpc/rpcserver.go\n```golang\npackage rpc\n\nimport (\n\t\"context\"\n\tmonitor_networkv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/network/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/service\"\n)\n\ntype NetWorkRpcServer struct {\n\tsvc service.ProductEipService\n\tmonitor_networkv1alpha.UnimplementedNetworkServer\n}\n\nfunc NewNetWorkRpcServer() *NetWorkRpcServer {\n\treturn &NetWorkRpcServer{\n\t\tsvc: *service.NewProductEipService(),\n\t}\n}\n\nfunc (n *NetWorkRpcServer) Test(ctx context.Context, req *monitor_networkv1alpha.TestRequest) (*monitor_networkv1alpha.TestResponse, error) {\n\treturn &monitor_networkv1alpha.TestResponse{HostName: \"my test\"}, nil\n}\n\nfunc (n *NetWorkRpcServer) EipInfo(ctx context.Context, req *monitor_networkv1alpha.EipInfoRequest) (*monitor_networkv1alpha.EipInfoResponse, error) {\n\n\t////req pb to dto\n\t//\n\t//\n\t////call service\n\t//dtoResult, err := n.svc.EipInfo(ctx, req)\n\t//if err != nil {\n\t//\treturn nil, status.Errorf(codes.Unknown, \"call service error, %s\", err.Error())\n\t//}\n\t//\n\t////rsp dto to pb\n\n\treturn nil, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/basic/dto/response.go\n```golang\npackage dto\n\nimport \"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\ntype DashboardCreateRsp struct {\n\tName string            `json:\"Name\"`\n\tData map[string]string `json:\"Data\"`\n}\n\ntype DashboardUpdateRsp struct {\n\tName string            `json:\"Name\"`\n\tData map[string]string `json:\"Data\"`\n}\n\ntype DashboardDeleteRsp struct {\n\tName string            `json:\"Name\"`\n\tData map[string]string `json:\"Data\"`\n}\n\ntype DashboardInfo struct {\n\tName string            `json:\"Name\"`\n\tData map[string]string `json:\"Data\"`\n}\ntype DashboardListRsp []DashboardInfo\n\ntype DashboardDetailRsp struct {\n\tName string            `json:\"Name\"`\n\tData map[string]string `json:\"Data\"`\n}\n\ntype PhysicalOverviewTopRsp struct {\n\tPhysicalCount []types.BasicOverviewSlot `json:\"PhysicalCount\"`\n\tServerState   []types.BasicOverviewSlot `json:\"ServerState\"`\n\tSwitchState   []types.BasicOverviewSlot `json:\"SwitchState\"`\n\tTops          []types.BasicOverviewSlot `json:\"Top\"`\n}\n\ntype ComputePoolLineRsp struct {\n\tCpuRate    []types.BasicOverviewSlot `json:\"CpuRate\"`\n\tMemoryRate []types.BasicOverviewSlot `json:\"MemoryRate\"`\n\tDiskRate   []types.BasicOverviewSlot `json:\"DiskRate\"`\n}\n\ntype EbsPoolLineRsp struct {\n\tCapRate []types.BasicOverviewSlot `json:\"CapRate\"`\n}\n\ntype ObjectPoolLineRsp struct {\n\tCapRate []types.BasicOverviewSlot `json:\"CapRate\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/basic/dto/request.go\n```golang\npackage dto\n\ntype DashboardCreateReq struct {\n\tName string            `json:\"Name\"`\n\tData map[string]string `json:\"Data\"`\n}\n\ntype DashboardUpdateReq struct {\n\tName string            `json:\"Name\"`\n\tData map[string]string `json:\"Data\"`\n}\n\ntype DashboardDeleteReq struct {\n\tName string `json:\"Name\"`\n}\n\ntype DashboardListReq struct {\n}\n\ntype DashboardDetailReq struct {\n\tName string `json:\"Name\"`\n}\n\ntype PhysicalDeviceReq struct {\n\tRegion string `json:\"Region\"`\n}\n\ntype ComputePoolLineReq struct {\n\tRegion string `json:\"Region\"`\n}\n\ntype EbsPoolLineReq struct {\n\tRegion string `json:\"Region\"`\n}\n\ntype ObjectPoolLineReq struct {\n\tRegion string `json:\"Region\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/basic/dao/overview.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tblockstoragepb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_blockstorage/v1alpha/gen\"\n\tcomputepb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_compute/v1alpha/gen\"\n\tnetworkpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\tobjectstoragepb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_objectstorage/v1alpha/gen\"\n\tserverpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\tswitch_rpc \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_switch/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n)\n\ntype DashboardStore struct {\n\t//rpc\n\tNetworkRpcClient     networkpb.ResourceNetworkClient\n\tServiceRpcClient     serverpb.ResourceServiceClient\n\tSwitchRpcClient      switch_rpc.ResourceSwitchClient\n\tAlarmRpcClient       alarmv1alpha.AlarmServiceClient\n\tComputePoolRpcClient computepb.ComputePoolServiceClient\n\tEbsPoolRpcClient     blockstoragepb.EbsPoolServiceClient\n\tObjectPoolRpcClient  objectstoragepb.ObjectPoolServiceClient\n}\n\nfunc NewJobsStore() *DashboardStore {\n\t//resource\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\n\t//alarm\n\talarmAddr := lib.GetStringConf(\"base.grpc.alarm\")\n\talarmConn, err := grpcx.NewGrpcClientConn(alarmAddr)\n\n\treturn &DashboardStore{\n\t\tNetworkRpcClient:     networkpb.NewResourceNetworkClient(resourceConn),\n\t\tServiceRpcClient:     serverpb.NewResourceServiceClient(resourceConn),\n\t\tSwitchRpcClient:      switch_rpc.NewResourceSwitchClient(resourceConn),\n\t\tAlarmRpcClient:       alarmv1alpha.NewAlarmServiceClient(alarmConn),\n\t\tComputePoolRpcClient: computepb.NewComputePoolServiceClient(resourceConn),\n\t\tEbsPoolRpcClient:     blockstoragepb.NewEbsPoolServiceClient(resourceConn),\n\t\tObjectPoolRpcClient:  objectstoragepb.NewObjectPoolServiceClient(resourceConn),\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/basic/controller/dashboard.go\n```golang\npackage controller\n\nimport (\n\t\"net/http\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/basic/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/basic/service\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype DashboardController struct {\n\tsvc *service.DashboardService\n}\n\nfunc NewDashboardController() *DashboardController {\n\treturn &DashboardController{\n\t\tsvc: service.NewDashboardService(),\n\t}\n}\n\nfunc (s *DashboardController) Create(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.DashboardCreateReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.Create(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"创建监控大屏失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *DashboardController) Update(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.DashboardUpdateReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.Update(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"更新监控大屏失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *DashboardController) Delete(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.DashboardDeleteReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\t// 业务处理\n\tres, err := s.svc.Delete(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"删除监控大屏失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *DashboardController) List(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.DashboardListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\t// 业务处理\n\tres, err := s.svc.List(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取监控大屏列表失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *DashboardController) Detail(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.DashboardDetailReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\t// 业务处理\n\tres, err := s.svc.Detail(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取监控大屏列表失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *DashboardController) PhysicalDevice(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.PhysicalDeviceReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\t// 业务处理\n\tres, err := s.svc.PhysicalDevice(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取监控大屏列表失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// ComputePoolLine godoc\n// @Summary      Dashboard ComputePoolLine\n// @Description  Get Dashboard ComputePoolLine\n// @Tags         dashBoard\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ComputePoolLineReq true \" Dashboard ComputePoolLine Request\"\n// @Success      200  {object}  dto.ComputePoolLineRsp\n// @Router       /dashboard/compute_pool_line [POST]\nfunc (s *DashboardController) ComputePoolLine(c *gin.Context) {\n\tvar params dto.ComputePoolLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\t// 业务处理\n\tres, err := s.svc.ComputePoolLine(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取计算资源池使用率信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// EbsPoolLine godoc\n// @Summary      Dashboard EbsPoolLine\n// @Description  Get Dashboard EbsPoolLine\n// @Tags         dashBoard\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.EbsPoolLineReq true \" Dashboard EbsPoolLine Request\"\n// @Success      200  {object}  dto.EbsPoolLineRsp\n// @Router       /dashboard/ebs_pool_line [POST]\nfunc (s *DashboardController) EbsPoolLine(c *gin.Context) {\n\tvar params dto.EbsPoolLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\t// 业务处理\n\tres, err := s.svc.EbsPoolLine(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取块存储资源池使用率信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// ObjectPoolLine godoc\n// @Summary      Dashboard ObjectPoolLine\n// @Description  Get Dashboard ObjectPoolLine\n// @Tags         dashBoard\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ObjectPoolLineReq true \" Dashboard ObjectPoolLine Request\"\n// @Success      200  {object}  dto.ObjectPoolLineRsp\n// @Router       /dashboard/object_pool_line [POST]\nfunc (s *DashboardController) ObjectPoolLine(c *gin.Context) {\n\tvar params dto.ObjectPoolLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\t// 业务处理\n\tres, err := s.svc.ObjectPoolLine(c, &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取对象存储资源池使用率信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/basic/constant/constant.go\n```golang\npackage constant\n\nconst ()\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/basic/service/dashboard.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\tresource_objectstoragev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_objectstorage/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/objectstorage\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\tresource_blockstoragev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_blockstorage/v1alpha/gen\"\n\tresource_computev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_compute/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\tswitch_rpc \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_switch/v1alpha/gen\"\n\tk8sclient \"ezone.ksyun.com/ezone/luban/monitor/common/client/k8s\"\n\tprom_client \"ezone.ksyun.com/ezone/luban/monitor/common/client/prom\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/blockstorage\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/compute\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/server\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/basic/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/basic/dto\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/pkg/errors\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n\tcore \"k8s.io/api/core/v1\"\n\tmeta \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n)\n\nconst (\n\tDefaultLabelKey   = \"luban\"\n\tDefaultLabelValue = \"dashboard\"\n\tDefaultName       = \"default\"\n\tDefaultMapKey     = \"title\"\n\tDefaultMapValue   = \"Dashboard\"\n)\n\nvar (\n\tnamespace = \"luban\"\n\tclientSet = k8sclient.GetClient()\n)\n\ntype DashboardService struct {\n\tStore dao.DashboardStore\n}\n\nfunc NewDashboardService() *DashboardService {\n\treturn &DashboardService{\n\t\tStore: *dao.NewJobsStore(),\n\t}\n}\n\nfunc (n *DashboardService) Create(ctx context.Context, par *dto.DashboardCreateReq) (*dto.DashboardCreateRsp, error) {\n\n\tconMap := &core.ConfigMap{}\n\tconMap.Name = par.Name\n\tconMap.Labels = map[string]string{\n\t\tDefaultLabelKey: DefaultLabelValue,\n\t}\n\tif len(par.Data) != 0 {\n\t\tconMap.Data = par.Data\n\t}\n\t_, err := clientSet.CoreV1().ConfigMaps(namespace).Create(ctx, conMap, meta.CreateOptions{})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"create configmap failed\")\n\t}\n\treturn &dto.DashboardCreateRsp{}, nil\n}\n\nfunc (n *DashboardService) Update(ctx context.Context, par *dto.DashboardUpdateReq) (*dto.DashboardUpdateRsp, error) {\n\n\tname := par.Name\n\tdata := par.Data\n\tif name == \"\" {\n\t\treturn nil, errors.New(\"name is nil, Invalid value!\")\n\t}\n\n\tcm, err := clientSet.CoreV1().ConfigMaps(namespace).Get(ctx, name, meta.GetOptions{})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"get configmap failed\")\n\t}\n\n\tcm.Labels = map[string]string{\n\t\tDefaultLabelKey: DefaultLabelValue,\n\t}\n\n\tif len(cm.Data) != 0 {\n\t\tcm.Data = data\n\t}\n\n\tnewCm, e := clientSet.CoreV1().ConfigMaps(namespace).Update(ctx, cm, meta.UpdateOptions{})\n\tif e != nil {\n\t\treturn nil, errors.WithMessage(e, \"update configmap failed\")\n\t}\n\treturn &dto.DashboardUpdateRsp{\n\t\tName: newCm.Name,\n\t\tData: newCm.Data,\n\t}, nil\n}\n\nfunc (n *DashboardService) Delete(ctx context.Context, par *dto.DashboardDeleteReq) (*dto.DashboardDeleteRsp, error) {\n\tname := par.Name\n\tif name == \"\" {\n\t\treturn nil, errors.New(\"name is nil, Invalid value!\")\n\t}\n\n\terr := clientSet.CoreV1().ConfigMaps(namespace).Delete(ctx, name, meta.DeleteOptions{})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"delete configmap failed\")\n\t}\n\treturn &dto.DashboardDeleteRsp{}, nil\n}\n\nfunc (n *DashboardService) List(ctx context.Context, par *dto.DashboardListReq) (*dto.DashboardListRsp, error) {\n\n\tcml, err := clientSet.CoreV1().ConfigMaps(namespace).List(ctx, meta.ListOptions{\n\t\tLabelSelector: DefaultLabelKey + \"=\" + DefaultLabelValue,\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"list configmap failed\")\n\t}\n\tvar rps dto.DashboardListRsp\n\tfor _, cm := range cml.Items {\n\t\trps = append(rps, dto.DashboardInfo{\n\t\t\tName: cm.Name,\n\t\t\tData: cm.Data,\n\t\t})\n\t}\n\treturn &rps, nil\n}\n\nfunc (n *DashboardService) Detail(ctx context.Context, par *dto.DashboardDetailReq) (*dto.DashboardDetailRsp, error) {\n\tname := par.Name\n\tif name == \"\" {\n\t\treturn nil, errors.New(\"name is nil, Invalid value!\")\n\t}\n\n\tcm, err := clientSet.CoreV1().ConfigMaps(namespace).Get(ctx, name, meta.GetOptions{})\n\tif err == nil {\n\t\trsp := dto.DashboardDetailRsp{\n\t\t\tName: cm.Name,\n\t\t\tData: cm.Data,\n\t\t}\n\t\treturn &rsp, nil\n\t}\n\n\t//默认值未创建，则创建默认值\n\tif err != nil {\n\t\tif name == DefaultName {\n\t\t\tm := make(map[string]string, 0)\n\t\t\tm[DefaultMapKey] = DefaultMapValue\n\t\t\tconMap := &core.ConfigMap{}\n\t\t\tconMap.Name = DefaultName\n\t\t\tconMap.Labels = map[string]string{\n\t\t\t\tDefaultLabelKey: DefaultLabelValue,\n\t\t\t}\n\t\t\tconMap.Data = m\n\t\t\t_, err = clientSet.CoreV1().ConfigMaps(namespace).Create(ctx, conMap, meta.CreateOptions{})\n\t\t\tif err != nil {\n\t\t\t\treturn nil, errors.WithMessage(err, \"create configmap failed\")\n\t\t\t}\n\t\t\trsp := dto.DashboardDetailRsp{\n\t\t\t\tName: DefaultName,\n\t\t\t\tData: m,\n\t\t\t}\n\t\t\treturn &rsp, nil\n\t\t}\n\t}\n\treturn &dto.DashboardDetailRsp{}, nil\n}\n\nfunc (n *DashboardService) PhysicalDevice(ctx *gin.Context, par *dto.PhysicalDeviceReq) (*dto.PhysicalOverviewTopRsp, error) {\n\n\t//获取服务器数据\n\trpcServer, err := n.Store.ServiceRpcClient.PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\tPageNo:   1,\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar (\n\t\tserverUp     int\n\t\tserverDown   int\n\t\tswitchUp     int\n\t\tswitchDown   int\n\t\tphysicalNum  []types.BasicOverviewSlot\n\t\tserverStatus []types.BasicOverviewSlot\n\t\tswitchStatus []types.BasicOverviewSlot\n\t)\n\n\tvar ipList []string\n\n\tfor _, servers := range rpcServer.PhysicalServerHostList {\n\t\tipList = append(ipList, servers.ManageIp+\":9100\")\n\t\t//ipNamMap[server.ManageIp+\":9100\"] = server.HostName\n\t\tif servers.MonitoringStatus == \"up\" {\n\t\t\tserverUp += 1\n\t\t} else {\n\t\t\tserverDown += 1\n\t\t}\n\t}\n\tstatusList := []string{\"Up\", \"Down\"}\n\tfor _, name := range statusList {\n\t\tvar serverStatusInfo types.BasicOverviewSlot\n\t\tvar value int\n\t\tif name == \"Up\" {\n\t\t\tvalue = serverUp\n\t\t} else {\n\t\t\tvalue = serverDown\n\t\t}\n\t\tserverStatusInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:     0,\n\t\t\tName:      name,\n\t\t\tValue:     value,\n\t\t\tUnitType:  types.TypeNumber,\n\t\t\tUnit:      \"个\",\n\t\t\tPrognosis: 0,\n\t\t}\n\t\tserverStatus = append(serverStatus, serverStatusInfo)\n\t}\n\n\t//获取交换机监控状态\n\trpcSwitch, err := n.Store.SwitchRpcClient.SwitchList(ctx, &switch_rpc.SwitchListRequest{\n\t\tPageNo:     1,\n\t\tPageSize:   -1,\n\t\tRegionCode: par.Region,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor _, switchs := range rpcSwitch.DataList {\n\t\tif switchs.RunStatus == \"up\" {\n\t\t\tswitchUp += 1\n\t\t} else {\n\t\t\tswitchDown += 1\n\t\t}\n\t}\n\n\tfor _, name := range statusList {\n\t\tvar switchStatusInfo types.BasicOverviewSlot\n\t\tvar value int\n\t\tif name == \"Up\" {\n\t\t\tvalue = switchUp\n\t\t} else {\n\t\t\tvalue = switchDown\n\t\t}\n\t\tswitchStatusInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:     0,\n\t\t\tName:      name,\n\t\t\tValue:     value,\n\t\t\tUnitType:  types.TypeNumber,\n\t\t\tUnit:      \"个\",\n\t\t\tPrognosis: 0,\n\t\t}\n\t\tswitchStatus = append(switchStatus, switchStatusInfo)\n\t}\n\n\t//物理设备数量\n\tphysicalList := []string{\"ServerNum\", \"SwitchNum\"}\n\tfor _, name := range physicalList {\n\t\tvar num types.BasicOverviewSlot\n\t\tvar value int\n\t\tif name == \"ServerNum\" {\n\t\t\tvalue = int(rpcServer.TotalCount)\n\t\t} else {\n\t\t\tvalue = int(rpcSwitch.TotalCount)\n\t\t}\n\t\tnum.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:     0,\n\t\t\tName:      name,\n\t\t\tValue:     value,\n\t\t\tUnitType:  types.TypeNumber,\n\t\t\tUnit:      \"个\",\n\t\t\tPrognosis: 0,\n\t\t}\n\t\tphysicalNum = append(physicalNum, num)\n\t}\n\n\t//获取服务器cpu mem disk top\n\tvar tops []types.BasicOverviewSlot\n\tips := strings.Join(ipList, \"|\")\n\tcpuTop, _ := Top(ctx, []string{\"CpuRate\"}, \"5\", ips, \"30m\")\n\tmemTop, _ := Top(ctx, []string{\"MemoryRate\"}, \"5\", ips, \"30m\")\n\tdiskTop, _ := Top(ctx, []string{\"DiskRate\"}, \"5\", ips, \"30m\")\n\ttops = append(tops, cpuTop)\n\ttops = append(tops, memTop)\n\ttops = append(tops, diskTop)\n\n\treturn &dto.PhysicalOverviewTopRsp{\n\t\tPhysicalCount: physicalNum,\n\t\tServerState:   serverStatus,\n\t\tSwitchState:   switchStatus,\n\t\tTops:          tops,\n\t}, nil\n}\n\nfunc Top(ctx *gin.Context, metricName []string, topK, ips, t string) (res types.BasicOverviewSlot, err error) {\n\tvar (\n\t\tpsql string\n\t\tname string\n\t)\n\tfor i := 0; i < len(metricName); i++ {\n\t\tswitch metricName[i] {\n\t\tcase \"CpuRate\":\n\t\t\tpsql = server.GetCpuRateTop(topK, ips, t)\n\t\t\tname = \"cpuRate\"\n\n\t\tcase \"MemoryRate\":\n\t\t\tpsql = server.GetMemoryRateTopK(topK, ips, t)\n\t\t\tname = \"MemoryRate\"\n\n\t\tcase \"DiskRate\":\n\t\t\tpsql = server.GetDiskRateTopK(topK, ips, t)\n\t\t\tname = \"DiskRate\"\n\t\t}\n\n\t\tresult, err := prom_client.VectorQuery(ctx, psql)\n\t\tif err != nil {\n\t\t\treturn res, err\n\t\t}\n\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\tName:     name,\n\t\t\tUnitType: \"\",\n\t\t\tUnit:     \"%\",\n\t\t}\n\t\tvar val []types.BasicOverviewSlotValue\n\t\tfor _, v := range result {\n\t\t\tip := string(v.Metric[\"instance\"])\n\t\t\thostName := string(v.Metric[\"hostname\"])\n\t\t\tvv := types.BasicOverviewSlotValue{\n\t\t\t\tName:     hostName,\n\t\t\t\tCode:     ip,\n\t\t\t\tValue:    strconv.FormatFloat(float64(v.Value), 'f', 2, 64),\n\t\t\t\tUnit:     \"%\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t}\n\t\t\tval = append(val, vv)\n\t\t}\n\t\tres = types.BasicOverviewSlot{\n\t\t\tInfo:   info,\n\t\t\tValues: val,\n\t\t}\n\t}\n\n\treturn\n}\n\nfunc (n *DashboardService) ComputePoolLine(ctx *gin.Context, par *dto.ComputePoolLineReq) (*dto.ComputePoolLineRsp, error) {\n\tcomputePoolRpcRes, err := n.Store.ComputePoolRpcClient.ListComputePool(ctx, &resource_computev1alpha.ListComputePoolReq{\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagHTTPFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\tvar res = &dto.ComputePoolLineRsp{\n\t\tCpuRate:    make([]types.BasicOverviewSlot, 0),\n\t\tMemoryRate: make([]types.BasicOverviewSlot, 0),\n\t\tDiskRate:   make([]types.BasicOverviewSlot, 0),\n\t}\n\tstart, end := time.Now().Add(-8*24*time.Hour).UnixMilli(), time.Now().UnixMilli()\n\tfor _, computePool := range computePoolRpcRes.DataList {\n\t\tcpuRate, err := n.ComputePoolMatrix(ctx, start, end, computePool.Region, computePool.Az, computePool.Name, compute.CpuRate)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t} else {\n\t\t\tres.CpuRate = append(res.CpuRate, cpuRate)\n\t\t}\n\t\tmemoryRate, err := n.ComputePoolMatrix(ctx, start, end, computePool.Region, computePool.Az, computePool.Name, compute.MemoryRate)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t} else {\n\t\t\tres.MemoryRate = append(res.MemoryRate, memoryRate)\n\t\t}\n\t\tdiskRate, err := n.ComputePoolMatrix(ctx, start, end, computePool.Region, computePool.Az, computePool.Name, compute.DiskRate)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t} else {\n\t\t\tres.DiskRate = append(res.DiskRate, diskRate)\n\t\t}\n\t}\n\treturn res, nil\n}\n\nfunc (n *DashboardService) ComputePoolMatrix(ctx context.Context, start, end int64, region, az, poolName, metricName string) (types.BasicOverviewSlot, error) {\n\tpromQlReq := compute.TemplateMap[metricName](region, az, poolName)\n\trsp, err := n.Store.AlarmRpcClient.ListPromQLs(ctx, promQlReq)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\tunit := rsp.Items[0].Unit\n\n\tmatrix, err := prom_client.MatrixQuery(ctx, promQL, v1.Range{\n\t\tStart: time.UnixMilli(start),\n\t\tEnd:   time.UnixMilli(end),\n\t\tStep:  prom_client.TimeToStep(end - start),\n\t})\n\tif err != nil {\n\t\treturn types.BasicOverviewSlot{}, errors.WithMessage(err, \"prom_client MatrixQuery err\")\n\t}\n\n\tline := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tName:        poolName,\n\t\t\tValue:       0,\n\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\tUnit:        unit,\n\t\t\tKind:        types.KindInfo,\n\t\t\tPrognosis:   0, //预测值，values的下标，0则无预测值\n\t\t\tDescription: \"\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tfor _, m := range matrix {\n\t\tfor _, p := range m.Values {\n\t\t\ttimeStamp := p.Timestamp\n\t\t\tvalue := p.Value\n\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:        timeStamp.String(),\n\t\t\t\tCode:        metricName,\n\t\t\t\tValue:       value,\n\t\t\t\tUnit:        unit,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tDescription: \"\",\n\t\t\t})\n\t\t}\n\t}\n\treturn line, nil\n}\n\nfunc (n *DashboardService) EbsPoolLine(ctx *gin.Context, par *dto.EbsPoolLineReq) (*dto.EbsPoolLineRsp, error) {\n\tebsPoolList, err := n.Store.EbsPoolRpcClient.ListEbsPool(ctx, &resource_blockstoragev1alpha.ListEbsPoolReq{\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tstart, end := time.Now().Add(-8*24*time.Hour).UnixMilli(), time.Now().UnixMilli()\n\tvar res = &dto.EbsPoolLineRsp{CapRate: make([]types.BasicOverviewSlot, 0)}\n\tfor _, ebsPool := range ebsPoolList.List {\n\t\tcapRate, err := n.EbsPoolMatrix(ctx, start, end, ebsPool.Region, ebsPool.Az, ebsPool.Name, ebsPool.PoolType, blockstorage.EbsCapRate)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t} else {\n\t\t\tres.CapRate = append(res.CapRate, capRate)\n\t\t}\n\t}\n\treturn res, nil\n}\n\nfunc (n *DashboardService) EbsPoolMatrix(ctx context.Context, start, end int64, region, az, poolName, poolType, metricName string) (types.BasicOverviewSlot, error) {\n\tpromQlReq := blockstorage.TemplateMap[metricName](region, az, poolName, poolType)\n\trsp, err := n.Store.AlarmRpcClient.ListPromQLs(ctx, promQlReq)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\tunit := rsp.Items[0].Unit\n\n\tmatrix, err := prom_client.MatrixQuery(ctx, promQL, v1.Range{\n\t\tStart: time.UnixMilli(start),\n\t\tEnd:   time.UnixMilli(end),\n\t\tStep:  prom_client.TimeToStep(end - start),\n\t})\n\tif err != nil {\n\t\treturn types.BasicOverviewSlot{}, errors.WithMessage(err, \"prom_client MatrixQuery err\")\n\t}\n\n\tline := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tName:        poolName,\n\t\t\tValue:       0,\n\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\tUnit:        unit,\n\t\t\tKind:        types.KindInfo,\n\t\t\tPrognosis:   0, //预测值，values的下标，0则无预测值\n\t\t\tDescription: \"\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tfor _, m := range matrix {\n\t\tfor _, p := range m.Values {\n\t\t\ttimeStamp := p.Timestamp\n\t\t\tvalue := p.Value\n\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:        timeStamp.String(),\n\t\t\t\tCode:        metricName,\n\t\t\t\tValue:       value,\n\t\t\t\tUnit:        unit,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tDescription: \"\",\n\t\t\t})\n\t\t}\n\t}\n\treturn line, nil\n}\n\nfunc (n *DashboardService) ObjectPoolLine(ctx *gin.Context, par *dto.ObjectPoolLineReq) (*dto.ObjectPoolLineRsp, error) {\n\tobjectPoolList, err := n.Store.ObjectPoolRpcClient.ListObjectPool(ctx, &resource_objectstoragev1alpha.ObjectPoolReq{\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tstart, end := time.Now().Add(-8*24*time.Hour).UnixMilli(), time.Now().UnixMilli()\n\tvar res = &dto.ObjectPoolLineRsp{CapRate: make([]types.BasicOverviewSlot, 0)}\n\tfor _, objectPool := range objectPoolList.List {\n\t\tcapRate, err := n.ObjectPoolMatrix(ctx, start, end, objectPool.Region, objectPool.Name, objectPool.PoolType, objectstorage.ObjectPoolUsageRate)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t} else {\n\t\t\tres.CapRate = append(res.CapRate, capRate)\n\t\t}\n\t}\n\treturn res, nil\n}\n\nfunc (n *DashboardService) ObjectPoolMatrix(ctx context.Context, start, end int64, region, poolName, poolType, metricName string) (types.BasicOverviewSlot, error) {\n\tpromQlReq := objectstorage.TemplateMap[metricName](region, \"\", poolName, poolType, poolName)\n\trsp, err := n.Store.AlarmRpcClient.ListPromQLs(ctx, promQlReq)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\tunit := rsp.Items[0].Unit\n\n\tmatrix, err := prom_client.MatrixQuery(ctx, promQL, v1.Range{\n\t\tStart: time.UnixMilli(start),\n\t\tEnd:   time.UnixMilli(end),\n\t\tStep:  prom_client.TimeToStep(end - start),\n\t})\n\tif err != nil {\n\t\treturn types.BasicOverviewSlot{}, errors.WithMessage(err, \"prom_client MatrixQuery err\")\n\t}\n\n\tline := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tName:        poolName,\n\t\t\tValue:       0,\n\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\tUnit:        unit,\n\t\t\tKind:        types.KindInfo,\n\t\t\tPrognosis:   0, //预测值，values的下标，0则无预测值\n\t\t\tDescription: \"\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tfor _, m := range matrix {\n\t\tfor _, p := range m.Values {\n\t\t\ttimeStamp := p.Timestamp\n\t\t\tvalue := p.Value / 100\n\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:        timeStamp.String(),\n\t\t\t\tCode:        metricName,\n\t\t\t\tValue:       value,\n\t\t\t\tUnit:        unit,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tDescription: \"\",\n\t\t\t})\n\t\t}\n\t}\n\treturn line, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/dto/response.go\n```golang\npackage dto\n\nimport \"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\ntype PhysicalOverviewAlertRsp struct {\n\tAlerts []types.BasicOverviewSlot `json:\"Alerts\"`\n}\n\ntype PhysicalOverviewMonitorRsp struct {\n\tMonitoringStatus   []types.BasicOverviewSlot `json:\"MonitoringStatus\"`\n\tHardwareMonitoring []types.BasicOverviewSlot `json:\"HardwareMonitoring\"`\n}\n\ntype PhysicalOverviewTopRsp struct {\n\tTops []types.BasicOverviewSlot\n}\n\ntype PhysicalListRsp struct {\n\tTotalCount             int64\n\tPageNo                 int\n\tPageSize               int\n\tPhysicalServerHostList []PhysicalServer `json:\"InstanceList\"`\n}\n\ntype PhysicalServer struct {\n\tHostId           int     `json:\"HostId\"`\n\tHostName         string  `json:\"HostName\"`\n\tMonitoringStatus string  `json:\"MonitoringStatus\"`\n\tNode             string  `json:\"Node\"`\n\tResourcePoolName string  `json:\"ResourcePoolName\"`\n\tResourcePoolType string  `json:\"ResourcePoolType\"`\n\tRegion           string  `json:\"Region\"`\n\tAz               string  `json:\"Az\"`\n\tLab              string  `json:\"Lab\"`\n\tSn               string  `json:\"Sn\"`\n\tIp               string  `json:\"Ip\"`\n\tOutBindIp        string  `json:\"OutBindIp\"`\n\tCpuErrNum        int     `json:\"CpuErrNum\"`\n\tCpuLoad          float64 `json:\"CpuLoad\"`\n\tMemErrNum        int     `json:\"MemErrNum\"`\n\tMemLoad          float64 `json:\"MemLoad\"`\n\tDiskErrNum       int     `json:\"DiskErrNum\"`\n\tDiskLoad         float64 `json:\"DiskLoad\"`\n\tAlertNumber      int     `json:\"AlertNumber\"`\n\tTag              string  `json:\"Tag\"`\n}\n\ntype PhysicalDetailsOverviewRsp struct {\n\tDetailsOverview []types.BasicOverviewSlot `json:\"DetailsOverview\"`\n}\n\ntype PhysicalDetailsOverviewLineRsp struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\ntype PhysicalHardwareRsp struct {\n\tIpmiStatus    []types.BasicOverviewSlot `json:\"IpmiStatus\"`\n\tInTemp        []types.BasicOverviewSlot `json:\"InTemp\"`\n\tOutTemp       []types.BasicOverviewSlot `json:\"OutTemp\"`\n\tCpuState      []types.BasicOverviewSlot `json:\"CpuState\"`\n\tMemState      []types.BasicOverviewSlot `json:\"MemState\"`\n\tDiskState     []types.BasicOverviewSlot `json:\"DiskState\"`\n\tPowerState    []types.BasicOverviewSlot `json:\"PowerState\"`\n\tFanState      []types.BasicOverviewSlot `json:\"FanState\"`\n\tMainBoardList []MainBoard               `json:\"mainBoardList\" description:\"主板\"`\n\tCpuList       CpuDetail                 `json:\"CpuList\" description:\"cpu\"`\n\tMemList       MemDetail                 `json:\"MemList\" description:\"内存\"`\n\tDiskList      DiskDetail                `json:\"DiskList\" description:\"硬盘\"`\n\tPowerList     []Power                   `json:\"PowerList\" description:\"电源\"`\n\tFanList       []Fan                     `json:\"FanList\" description:\"风扇\"`\n\tWorkList      []Work                    `json:\"WorkList\",description:\"网卡\"`\n}\n\ntype MainBoard struct {\n\tName          string  `json:\"Name\" description:\"名称\"`\n\tState         float64 `json:\"State\" description:\"健康状态\"`\n\tSn            string  `json:\"Sn\" description:\"序列号\"`\n\tProductNum    string  `json:\"ProductNum\" description:\"产品部件号\"`\n\tProductTime   int64   `json:\"ProductTime\" description:\"产品生产日期\"`\n\tProducFactory string  `json:\"ProductFactory\" description:\"生产厂家\"`\n}\n\ntype CpuDetail struct {\n\tSum     int   `json:\"Sum\" description:\"cpu总数\"`\n\tCores   int   `json:\"Cores\" description:\"cpu核心数\"`\n\tCpuList []Cpu `json:\"CpuList\" description:\"cpu列表\"`\n}\ntype Cpu struct {\n\tName        string  `json:\"Name\" description:\"名称\"`\n\tState       float64 `json:\"State\" description:\"健康状态\"`\n\tUsedRate    float64 `json:\"UsedRate\" description:\"使用率\"`\n\tTemperature string  `json:\"Temperature\" description:\"温度\"`\n\tModel       string  `json:\"Model\" description:\"型号\"`\n\tClockSpeed  string  `json:\"ClockSpeed\" description:\"主频\"`\n\tMaxClock    string  `json:\"MaxClock\" description:\"最大主频\"`\n\tCores       byte    `json:\"Cores\" description:\"核心数\"`\n\tThreads     byte    `json:\"Threads\" description:\"线程数\"`\n\tL1Cache     string  `json:\"L1Cache\" description:\"L1缓存\"`\n\tL2Cache     string  `json:\"L2Cache\" description:\"L2缓存\"`\n\tL3Cache     string  `json:\"L3Cache\" description:\"L3缓存\"`\n}\n\ntype MemDetail struct {\n\tSum      int      `json:\"Sum\" description:\"总数\"`\n\tCapacity string   `json:\"Capacity\" description:\"总容量\"`\n\tMemList  []Memory `json:\"MemList\" description:\"内存列表\"`\n}\n\ntype Memory struct {\n\tName          string  `json:\"Name\" description:\"名称\"`\n\tState         float64 `json:\"State\" description:\"健康状态\"`\n\tUsedRate      float64 `json:\"UsedRate\" description:\"使用率\"`\n\tIn            string  `json:\"In\" description:\"在位信息\"`\n\tPosition      string  `json:\"Position\" description:\"位置\"`\n\tChannl        string  `json:\"Channl\" description:\"通道\"`\n\tSlot          string  `json:\"Slot\" description:\"插槽\"`\n\tModel         string  `json:\"Model\" description:\"型号\"`\n\tRanks         int     `json:\"Ranks\" description:\"ranks\"`\n\tWidth         int     `json:\"Width\" description:\"位宽\"`\n\tMaxClock      int     `json:\"MaxClock\" description:\"最大主频\"`\n\tCapacity      string  `json:\"Capacity\" description:\"容量\"`\n\tTech          string  `json:\"Tech\" description:\"技术\"`\n\tSn            string  `json:\"Sn\" description:\"序列号\"`\n\tProductNum    string  `json:\"ProductNum\" description:\"产品部件号\"`\n\tProducFactory string  `json:\"ProducFactory\" description:\"生产厂家\"`\n}\n\ntype DiskDetail struct {\n\tSum      int    `json:\"sum\" description:\"总数\"`\n\tCapacity string `json:\"capacity\" description:\"总容量\"`\n\tDiskList []Disk `json:\"DiskList\" description:\"硬盘列表\"`\n}\n\ntype Disk struct {\n\tName          string  `json:\"Name\" description:\"名称\"`\n\tState         float64 `json:\"State\" description:\"健康状态\"`\n\tUpDown        string  `json:\"UpDown\" description:\"启用状态\"`\n\tUsedRate      string  `json:\"UsedRate\" description:\"使用率\"`\n\tIn            string  `json:\"In\" description:\"在位信息\"`\n\tCapacity      string  `json:\"Capacity\" description:\"容量\"`\n\tDomain        string  `json:\"Domain\" description:\"硬盘域\"`\n\tModel         string  `json:\"Model\" description:\"型号\"`\n\tDiskType      string  `json:\"DiskType\" description:\"类型\"`\n\tTemperature   string  `json:\"Temperature\" description:\"温度\"`\n\tSpeed         float64 `json:\"Speed\" description:\"转速\"`\n\tProducFactory string  `json:\"ProductFactory\" description:\"生产厂家\"`\n\tSn            string  `json:\"Sn\" description:\"序列号\"`\n}\n\ntype Power struct {\n\tId              string  `json:\"Id\" description:\"序号\"`\n\tState           float64 `json:\"State\" description:\"健康状态\"`\n\tIn              string  `json:\"In\" description:\"在位信息\"`\n\tTemperature     string  `json:\"Temperature\" description:\"温度\"`\n\tRatedPower      string  `json:\"RatePower\" description:\"额定功率\"`\n\tInputPower      float64 `json:\"InputPower\" description:\"输入功率\"`\n\tPowerInputModel string  `json:\"PowerInputModel\" description:\"电源输入模式\"`\n\tModel           string  `json:\"Model\" description:\"型号\"`\n\tFireWare        string  `json:\"FireWare\" description:\"固件\"`\n\tSn              string  `json:\"Sn\" description:\"序列号\"`\n\tProductNum      string  `json:\"ProductNum\" description:\"产品部件号\"`\n\tProducFactory   string  `json:\"ProductFactory\" description:\"生产厂家\"`\n}\n\ntype Fan struct {\n\tName       string  `json:\"Name\" description:\"名称\"`\n\tState      float64 `json:\"State\" description:\"健康状态\"`\n\tIn         string  `json:\"In\" description:\"在位信息\"`\n\tSpeed      float64 `json:\"Speed\" description:\"转速\"`\n\tSpeedRate  string  `json:\"SpeedRate\" description:\"速率比\"`\n\tRedundancy string  `json:\"Redundancy\" description:\"冗余\"`\n}\n\ntype Work struct {\n\tName         string `json:\"Name\"`\n\tHealthStatus string `json:\"HealthStatus\"` // 健康状态\n\tProduct      string `json:\"Product\"`      // 厂商\n\tVendor       string `json:\"Vendor\"`       // 型号\n\tSpeed        string `json:\"Speed\"`        // 速率\n\tUnits        string `json:\"Units\"`\n\tSize         int    `json:\"Size\"`\n\tMac          string `json:\"Mac\"`\n}\n\ntype GetMonitoringStatusRsp struct {\n\tIp           string `json:\"Ip\" binding:\"required\"`\n\tResourceType string `json:\"ResourceType\"`\n\tRunStatus    string `json:\"RunStatus\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/dto/request.go\n```golang\npackage dto\n\ntype PhysicalOverviewMonitorReq struct {\n\tRegion string   `json:\"Region\"`\n\tAz     []string `json:\"Az\"`\n\tLabId  []int32  `json:\"LabId\"`\n}\n\ntype PhysicalOverviewTopReq struct {\n\tRegion     string   `json:\"Region\"`\n\tAz         []string `json:\"Az\"`\n\tLabId      []int32  `json:\"LabId\"`\n\tMetricName []string `json:\"MetricName\"`\n\tTopK       string   `json:\"TopK\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n}\n\ntype PhysicalListReq struct {\n\tPageNo           int      `json:\"PageNo\"`\n\tPageSize         int      `json:\"PageSize\"`\n\tRegion           string   `json:\"Region\"`\n\tAz               []string `json:\"Az\"`\n\tLabId            []int32  `json:\"LabId\"`\n\tMonitoringStatus []string `json:\"MonitoringStatus\"` //监控状态\n\tNodeType         []string `json:\"NodeType\"`         //节点类型实际对应库里node字段\n\tResourcePoolType []string `json:\"ResourcePoolType\"` //所属资源池类型\n\tResourcePoolName string   `json:\"ResourcePoolName\"` //所属资源池\n\tCpuErrNum        string   `json:\"CpuErrNum\"`\n\tMemErrNum        string   `json:\"MemErrNum\"`\n\tDiskErrNum       string   `json:\"DiskErrNum\"`\n\tQuery            Query    `json:\"Query\"`\n\tOrderCode        string   `json:\"OrderCode\" form:\"OrderCode\"`\n\tOrderType        string   `json:\"OrderType\" form:\"OrderType\" binding:\"omitempty,oneof=ASC DESC\"`\n}\n\ntype Query map[string]string\n\ntype PhysicalDetailsOverviewReq struct {\n\tDeviceSn string\n}\n\ntype PhysicalDetailsLineReq struct {\n\tIp         string   `json:\"Ip\" binding:\"required\"`\n\tMetricName []string `json:\"MetricName\" binding:\"required\"`\n\tStart      int64    `json:\"Start\" binding:\"required\"`\n\tEnd        int64    `json:\"End\" binding:\"required\"`\n\tWorkName   string   `json:\"WorkName\"`\n}\n\ntype PhysicalWorkListReq struct {\n\tIp string `json:\"Ip\" binding:\"required\"`\n}\n\ntype PhysicalHardwareReq struct {\n\tDeviceSn string\n}\n\ntype GetMonitoringStatusReq struct {\n\tIp           string `json:\"Ip\" binding:\"required\"`\n\tResourceType string `json:\"ResourceType\" binding:\"omitempty,oneof=Switch Server\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/dao/overview.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tserverpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n)\n\ntype ServerStore struct {\n\t//rpc\n\tServiceRpcClient serverpb.ResourceServiceClient\n\tAlarmRpcClient   alarmv1alpha.AlarmServiceClient\n\n\t//dao\n\tAssetPhysicalServerHardwareDao *AssetPhysicalServerHardwareDao\n}\n\nfunc NewServerStore() *ServerStore {\n\t//resource\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\n\t//alarm\n\talarmAddr := lib.GetStringConf(\"base.grpc.alarm\")\n\talarmConn, err := grpcx.NewGrpcClientConn(alarmAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect alarm grpc server error, %s\": err.Error()})\n\t}\n\n\treturn &ServerStore{\n\t\tServiceRpcClient:               serverpb.NewResourceServiceClient(resourceConn),\n\t\tAlarmRpcClient:                 alarmv1alpha.NewAlarmServiceClient(alarmConn),\n\t\tAssetPhysicalServerHardwareDao: NewAssetPhysicalServerHardwareDao(),\n\t\t//MetricTopDao:     NewMetricTopDao(),\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/dao/asset_physical_server_hardware.go\n```golang\npackage dao\n\nimport (\n\t\"context\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/server/model\"\n\t\"gorm.io/gorm\"\n)\n\ntype AssetPhysicalServerHardwareDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewAssetPhysicalServerHardwareDao() *AssetPhysicalServerHardwareDao {\n\treturn &AssetPhysicalServerHardwareDao{\n\t\tdb: lib.GORMMapPool[\"business\"].Debug(),\n\t}\n}\n\nfunc (m *AssetPhysicalServerHardwareDao) GetHardware(ctx context.Context, sn string) (*model.AssetPhysicalServerHardware, error) {\n\tcontent := model.AssetPhysicalServerHardware{}\n\terr := m.db.Where(\"sn = ?\", sn).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &content, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/controller/server.go\n```golang\npackage controller\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/server/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/server/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype ServerController struct {\n\tsvc *service.PhysicalService\n}\n\nfunc NewServerController() *ServerController {\n\treturn &ServerController{\n\t\tsvc: service.NewPhysicalService(),\n\t}\n}\n\nfunc (s *ServerController) PhysicalOverviewAlert(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.PhysicalOverviewMonitorReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.PhysicalOverviewAlert(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取服务器概览监控告警失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *ServerController) PhysicalOverviewMonitor(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.PhysicalOverviewMonitorReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.PhysicalOverviewMonitor(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取服务器概览监控状态失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *ServerController) PhysicalOverviewTop(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.PhysicalOverviewTopReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.PhysicalOverviewTop(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取服务器概览Top失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *ServerController) PhysicalList(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.PhysicalListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.PhysicalList(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取服务器概览Top失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *ServerController) PhysicalDetailsOverview(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.PhysicalDetailsOverviewReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.PhysicalDetailsOverview(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取服务器详情概览失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *ServerController) PhysicalDetailsLine(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.PhysicalDetailsLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.PhysicalDetailsLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取服务器详情折线图失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *ServerController) PhysicalWorkList(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.PhysicalWorkListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.PhysicalWorkList(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取服务器详情折线图失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *ServerController) MonitoringStatus(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.GetMonitoringStatusReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.GetMonitoringStatus(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取监控状态失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *ServerController) PhysicalHardware(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.PhysicalHardwareReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.PhysicalHardware(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取服务器硬件失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/constant/constant.go\n```golang\npackage constant\n\nconst ()\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/model/asset_physical_server.go\n```golang\npackage model\n\nimport (\n\t\"time\"\n)\n\n// AssetPhysicalServer 物理服务器\n// 物理服务器\ntype AssetPhysicalServer struct {\n\tId                 int       `gorm:\"column:id;type:int(11);primary_key;AUTO_INCREMENT;comment:服务器ID\" json:\"id\"`\n\tName               string    `gorm:\"column:name;type:varchar(50);comment:服务器名称;NOT NULL\" json:\"name\"`\n\tIp                 string    `gorm:\"column:ip;type:varchar(20);comment:ip;NOT NULL\" json:\"ip\"`\n\tRunStatus          string    `gorm:\"column:run_status;type:varchar(10);comment:运行状态(up:运行中;down:故障中);NOT NULL\" json:\"run_status\"`\n\tAssignmentStatus   string    `gorm:\"column:assignment_status;type:varchar(10);comment:分配状态(assigned:已分配;unassigned:未分配);NOT NULL\" json:\"assignment_status\"`\n\tService            string    `gorm:\"column:service;type:varchar(500);comment:业务;NOT NULL\" json:\"service\"`\n\tAzId               int       `gorm:\"column:az_id;type:int(11);default:0;comment:az id;NOT NULL\" json:\"az_id\"`\n\tAzCode             string    `gorm:\"column:az_code;type:varchar(20);comment:可用区;NOT NULL\" json:\"az_code\"`\n\tRegionId           int       `gorm:\"column:region_id;type:int(11);default:0;comment:region id;NOT NULL\" json:\"region_id\"`\n\tRegionCode         string    `gorm:\"column:region_code;type:varchar(20);comment:区域;NOT NULL\" json:\"region_code\"`\n\tLabId              int       `gorm:\"column:lab_id;type:int(11);default:0;comment:机房id;NOT NULL\" json:\"lab_id\"`\n\tRoomId             int       `gorm:\"column:room_id;type:int(11);default:0;comment:房间id;NOT NULL\" json:\"room_id\"`\n\tCabinetId          int       `gorm:\"column:cabinet_id;type:int(11);default:0;comment:机柜id;NOT NULL\" json:\"cabinet_id\"`\n\tRackId             int       `gorm:\"column:rack_id;type:int(11);default:0;comment:机架位id;NOT NULL\" json:\"rack_id\"`\n\tHostUnitNumber     int       `gorm:\"column:host_unit_number;type:int(11);default:0;comment:所占U位;NOT NULL\" json:\"host_unit_number\"`\n\tSn                 string    `gorm:\"column:sn;type:varchar(36);comment:SN号;NOT NULL\" json:\"sn\"`\n\tServerType         string    `gorm:\"column:server_type;type:varchar(200);comment:服务器型号;NOT NULL\" json:\"server_type\"`\n\tOutBandIp          string    `gorm:\"column:out_band_ip;type:varchar(20);comment:带外IP;NOT NULL\" json:\"out_band_ip\"`\n\tOutBandUser        string    `gorm:\"column:out_band_user;type:varchar(255);comment:带外IP账号;NOT NULL\" json:\"out_band_user\"`\n\tOutBandPassword    string    `gorm:\"column:out_band_password;type:varchar(255);comment:带外IP账号密码;NOT NULL\" json:\"out_band_password\"`\n\tPower              string    `gorm:\"column:power;type:varchar(50);comment:电源/功率;NOT NULL\" json:\"power\"`\n\tMainMaintainer     string    `gorm:\"column:main_maintainer;type:varchar(10);comment:主要维护人;NOT NULL\" json:\"main_maintainer\"`\n\tUplinkSwitch       string    `gorm:\"column:uplink_switch;type:varchar(100);comment:上联交换机;NOT NULL\" json:\"uplink_switch\"`\n\tMaintenanceDue     time.Time `gorm:\"column:maintenance_due;type:timestamp;comment:维保到期时间\" json:\"maintenance_due\"`\n\tMaintenanceStatus  string    `gorm:\"column:maintenance_status;type:varchar(10);comment:维保到期状态(uninsured:未过保;insured3m:3个月过保;insured1m:1个月过保;insured:已过保);NOT NULL\" json:\"maintenance_status\"`\n\tAssetsNumber       string    `gorm:\"column:assets_number;type:varchar(20);comment:资产编号;NOT NULL\" json:\"assets_number\"`\n\tInputTime          int       `gorm:\"column:input_time;type:int(11);default:0;comment:录入时间;NOT NULL\" json:\"input_time\"`\n\tInputMethod        string    `gorm:\"column:input_method;type:varchar(10);comment:录入方式(auto:自动;manual:手动);NOT NULL\" json:\"input_method\"`\n\tMacAddress         string    `gorm:\"column:mac_address;type:varchar(100);comment:MAC地址;NOT NULL\" json:\"mac_address\"`\n\tSystemSales        string    `gorm:\"column:system_sales;type:varchar(100);comment:服务器厂商;NOT NULL\" json:\"system_sales\"`\n\tDescription        string    `gorm:\"column:description;type:varchar(100);comment:描述;NOT NULL\" json:\"description\"`\n\tCreator            string    `gorm:\"column:creator;type:varchar(64);comment:创建人;NOT NULL\" json:\"creator\"`\n\tCreateTime         int       `gorm:\"column:create_time;type:int(11);default:0;comment:创建时间;NOT NULL\" json:\"create_time\"`\n\tCpuAllocationRatio int       `gorm:\"column:cpu_allocation_ratio;type:int(10) unsigned;default:0;comment:cpu超配额;NOT NULL\" json:\"cpu_allocation_ratio\"`\n\tRamAllocationRatio float64   `gorm:\"column:ram_allocation_ratio;type:float unsigned;default:0;comment:内存超配额;NOT NULL\" json:\"ram_allocation_ratio\"`\n\tOperateSystem      string    `gorm:\"column:operate_system;type:varchar(64);comment:操作系统;NOT NULL\" json:\"operate_system\"`\n\tCpuTotal           int       `gorm:\"column:cpu_total;type:int(10) unsigned;default:0;comment:cpu总和;NOT NULL\" json:\"cpu_total\"`\n\tMemoryTotal        int       `gorm:\"column:memory_total;type:int(10) unsigned;default:0;comment:内存总和;NOT NULL\" json:\"memory_total\"`\n\tDeleted            int       `gorm:\"column:deleted;type:int(11);default:0;comment:是否删除 1：删除，0：未删除\" json:\"deleted\"`\n\tLabel              string    `gorm:\"column:label;type:varchar(100);comment:标签;NOT NULL\" json:\"label\"`\n\tResourcePoolType   string    `gorm:\"column:resource_pool_type;type:varchar(50);comment:服务器所属资源池类型;NOT NULL\" json:\"resource_pool_type\"`\n\tResourcePool       string    `gorm:\"column:resource_pool;type:varchar(50);comment:服务器所属资源池;NOT NULL\" json:\"resource_pool\"`\n\tNode               string    `gorm:\"column:node;type:varchar(255);comment:服务器节点\" json:\"node\"`\n\tNodeType           string    `gorm:\"column:node_type;type:varchar(100);comment:服务器节点类型;NOT NULL\" json:\"node_type\"`\n\tNodeGroup          string    `gorm:\"column:node_group;type:varchar(255);comment:服务器节点\" json:\"node_group\"`\n\tIsVm               int       `gorm:\"column:is_vm;type:int(11);default:0;comment:是否是虚机 0:物理机器,1虚机 ;NOT NULL\" json:\"is_vm\"`\n\tKind               string    `gorm:\"column:kind;type:varchar(64);comment:服务器型后;NOT NULL\" json:\"kind\"`\n\tLastUpdateAt       time.Time `gorm:\"column:last_update_at;type:timestamp\" json:\"last_update_at\"`\n}\n\n// AssetSwitch 物理交换机\ntype AssetSwitch struct {\n\tId                int       `gorm:\"column:id;type:int(11);primary_key;AUTO_INCREMENT;comment:交换机ID\" json:\"id\"`\n\tName              string    `gorm:\"column:name;type:varchar(50);comment:交换机名称;NOT NULL\" json:\"name\"`\n\tIp                string    `gorm:\"column:ip;type:varchar(20);comment:ip;NOT NULL\" json:\"ip\"`\n\tRunStatus         string    `gorm:\"column:run_status;type:varchar(10);comment:运行状态(up:运行中;down:故障中);NOT NULL\" json:\"run_status\"`\n\tSnmpStatus        int       `gorm:\"column:snmp_status;type:int(10);comment:snmp 状态 0 正常 1 异常\" json:\"snmp_status\"`\n\tAzId              int       `gorm:\"column:az_id;type:int(11);default:0;comment:az id;NOT NULL\" json:\"az_id\"`\n\tRegionId          int       `gorm:\"column:region_id;type:int(11);default:0;comment:region id;NOT NULL\" json:\"region_id\"`\n\tLabId             int       `gorm:\"column:lab_id;type:int(11);default:0;comment:机房id;NOT NULL\" json:\"lab_id\"`\n\tRoomId            int       `gorm:\"column:room_id;type:int(11);default:0;comment:房间id;NOT NULL\" json:\"room_id\"`\n\tCabinetId         int       `gorm:\"column:cabinet_id;type:int(11);default:0;comment:机柜id;NOT NULL\" json:\"cabinet_id\"`\n\tRackId            int       `gorm:\"column:rack_id;type:int(11);default:0;comment:机架位id;NOT NULL\" json:\"rack_id\"`\n\tSwitchUnitNumber  int       `gorm:\"column:switch_unit_number;type:int(11);default:0;comment:所占U位;NOT NULL\" json:\"switch_unit_number\"`\n\tSn                string    `gorm:\"column:sn;type:varchar(50);comment:SN号;NOT NULL\" json:\"sn\"`\n\tSwitchType        string    `gorm:\"column:switch_type;type:varchar(50);comment:交换机型号;NOT NULL\" json:\"switch_type\"`\n\tSwitchRole        string    `gorm:\"column:switch_role;type:varchar(10);comment:交换机角色;NOT NULL\" json:\"switch_role\"`\n\tOutBandIp         string    `gorm:\"column:out_band_ip;type:varchar(20);comment:带外IP;NOT NULL\" json:\"out_band_ip\"`\n\tCommunity         string    `gorm:\"column:community;type:varchar(20);comment:团体字;NOT NULL\" json:\"community\"`\n\tMainMaintainer    string    `gorm:\"column:main_maintainer;type:varchar(50);comment:负责人;NOT NULL\" json:\"main_maintainer\"`\n\tMaintenanceDue    time.Time `gorm:\"column:maintenance_due;type:timestamp;comment:维保到期时间\" json:\"maintenance_due\"`\n\tMaintenanceStatus string    `gorm:\"column:maintenance_status;type:varchar(10);comment:维保到期状态(uninsured:未过保;insured3m:3个月过保;insured1m:1个月过保;insured:已过保);NOT NULL\" json:\"maintenance_status\"`\n\tAssetsNumber      string    `gorm:\"column:assets_number;type:varchar(10);comment:资产编号;NOT NULL\" json:\"assets_number\"`\n\tInputTime         time.Time `gorm:\"column:input_time;type:timestamp;comment:交换机录入时间\" json:\"input_time\"`\n\tSystemSales       string    `gorm:\"column:system_sales;type:varchar(10);comment:交换机厂商;NOT NULL\" json:\"system_sales\"`\n\tHardwareVersion   string    `gorm:\"column:hardware_version;type:varchar(20);comment:硬件版本;NOT NULL\" json:\"hardware_version\"`\n\tOsVersion         string    `gorm:\"column:os_version;type:varchar(20);comment:OS版本;NOT NULL\" json:\"os_version\"`\n\tLabel             string    `gorm:\"column:label;type:varchar(20);comment:标签\" json:\"label\"`\n\tDescription       string    `gorm:\"column:description;type:varchar(100);comment:描述;NOT NULL\" json:\"description\"`\n\tCreator           string    `gorm:\"column:creator;type:varchar(64);comment:创建人;NOT NULL\" json:\"creator\"`\n\tCreateTime        time.Time `gorm:\"column:create_time;type:timestamp;default:CURRENT_TIMESTAMP;comment:创建时间;NOT NULL\" json:\"create_time\"`\n\tUpdater           string    `gorm:\"column:updater;type:varchar(64);comment:修改人;NOT NULL\" json:\"updater\"`\n\tUpdateTime        time.Time `gorm:\"column:update_time;type:timestamp;default:CURRENT_TIMESTAMP;comment:修改时间;NOT NULL\" json:\"update_time\"`\n\tOperateSystem     string    `gorm:\"column:operate_system;type:varchar(64);comment:操作系统;NOT NULL\" json:\"operate_system\"`\n\tDeleted           int       `gorm:\"column:deleted;type:int(11);default:0;comment:是否删除 1：删除，0：未删除\" json:\"deleted\"`\n\tCpuModel          string    `gorm:\"column:cpu_model;type:varchar(50);comment:cpu型号;NOT NULL\" json:\"cpu_model\"`\n\tMemModel          string    `gorm:\"column:mem_model;type:varchar(50);comment:内存型号;NOT NULL\" json:\"mem_model\"`\n\tMib               string    `gorm:\"column:mib;type:varchar(255);comment:mib\" json:\"mib\"`\n\tIntervalTime      string    `gorm:\"column:interval_time;type:varchar(255);comment:时间间隔\" json:\"interval_time\"`\n\tScrapeTimeout     string    `gorm:\"column:scrape_timeout;type:varchar(255);comment:过期时间\" json:\"scrape_timeout\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/model/asset_physical_server_hardware.go\n```golang\npackage model\n\nimport (\n\t\"database/sql/driver\"\n\t\"encoding/json\"\n\t\"time\"\n)\n\ntype AssetPhysicalServerHardware struct {\n\tId            int                `gorm:\"column:id;type:int(11);primary_key;AUTO_INCREMENT;comment:ID\" json:\"id\"`\n\tSn            string             `gorm:\"column:sn;type:varchar(64);comment:设备sn号;NOT NULL\" json:\"sn\"`\n\tHostName      string             `gorm:\"column:host_name;type:varchar(50);comment:名称;NOT NULL\" json:\"host_name\"`\n\tSysInfo       SysInfoSlice       `gorm:\"column:sys_info;type:text;comment:系统信息\" json:\"sys_info\"`\n\tBaseboardInfo BaseboardInfoSlice `gorm:\"column:baseboard_info;type:text;comment:主板信息\" json:\"baseboard_info\"`\n\tCpuInfo       CpuInfoSlice       `gorm:\"column:cpu_info;type:text;comment:cpu信息\" json:\"cpu_info\"`\n\tDiskInfo      DiskInfoSlice      `gorm:\"column:disk_info;type:text;comment:磁盘信息\" json:\"disk_info\"`\n\tGpuInfo       GpuInfoSlice       `gorm:\"column:gpu_info;type:text;comment:显卡信息\" json:\"gpu_info\"`\n\tMemoryInfo    MemoryInfoSlice    `gorm:\"column:memory_info;type:text;comment:内存信息\" json:\"memory_info\"`\n\tNicInfo       NicInfoSlice       `gorm:\"column:nic_info;type:text;comment:nic信息\" json:\"nic_info\"`\n\tRaidInfo      RaidInfoSlice      `gorm:\"column:raid_info;type:text;comment:磁盘阵列信息\" json:\"raid_info\"`\n\tWorkInfo      WorkInfoSlice      `gorm:\"column:work_info;type:text;comment:网卡信息\" json:\"work_info\"`\n\t//FanInfo       string       `gorm:\"column:fan_info;type:text;comment:风扇信息\" json:\"fan_info\"`\n\t//PowerInfo     string       `gorm:\"column:power_info;type:text;comment:电源信息\" json:\"power_info\"`\n\tLastUpdateAt time.Time `gorm:\"column:last_update_at;type:timestamp\" json:\"last_update_at\"`\n}\n\ntype (\n\tSysInfoSlice       []SysInfo\n\tWorkInfoSlice      []WorkInfo\n\tBaseboardInfoSlice []BaseboardInfo\n\tCpuInfoSlice       []CpuInfo\n\tDiskInfoSlice      []DiskInfo\n\tGpuInfoSlice       []GpuInfo\n\tMemoryInfoSlice    []MemoryDeviceInfo\n\tNicInfoSlice       []NicInfo\n\tRaidInfoSlice      []RaidInfo\n)\n\ntype (\n\tSysInfo struct {\n\t\tManufacturer      string `json:\"Manufacturer\" gorm:\"column:manufacturer;type:varchar(100)\"`\n\t\tProductName       string `json:\"ProductName\" gorm:\"column:manufacturer;type:varchar(100)\"`\n\t\tVersion           string `json:\"Version\" gorm:\"column:manufacturer;type:varchar(100)\"`\n\t\tSerialNumber      string `json:\"SerialNumber\" gorm:\"column:serialNumber;type:varchar(100)\"`\n\t\tUUID              string `json:\"UUID\" gorm:\"column:manufacturer;type:varchar(100)\"`\n\t\tSystemProductName string `json:\"SystemProductName\" gorm:\"column:manufacturer;type:varchar(100)\"`\n\t}\n\tWorkInfo struct {\n\t\tName         string `json:\"Name\"`\n\t\tHealthStatus string `json:\"HealthStatus\"` // 健康状态\n\t\tProduct      string `json:\"Product\"`      // 厂商\n\t\tVendor       string `json:\"Vendor\"`       // 型号\n\t\tSpeed        string `json:\"Speed\"`        // 速率\n\t\tUnits        string `json:\"Units\"`\n\t\tSize         int    `json:\"Size\"`\n\t\tMac          string `json:\"Mac\"`\n\t}\n\tBaseboardInfo struct {\n\t\tModel        string `json:\"Model\"`\n\t\tSerialNumber string `json:\"SerialNumber\"`\n\t\tManufacturer string `json:\"Manufacturer\"`\n\t}\n\tCpuInfo struct {\n\t\tSocketDesignation string `json:\"SocketDesignation\"`\n\t\tModel             string `json:\"Model\"` // 型号名\n\t\tCoreCount         byte   `json:\"CoreCount\"`\n\t\tThreadCount       byte   `json:\"ThreadCount\"`\n\t\tCurrentSpeed      string `json:\"CurrentSpeed\"` // MHZ\n\t\tMaxSpeed          string `json:\"MaxSpeed\"`     // MHZ\n\t\tL1dCache          string `json:\"L1dCache\"`\n\t\tL1iCache          string `json:\"L1iCache\"`\n\t\tL2Cache           string `json:\"L2Cache\"`\n\t\tL3Cache           string `json:\"L3Cache\"`\n\t}\n\tDiskInfo struct {\n\t\tflag         string `json:\"Flag\"`\n\t\tModel        string `json:\"Model\"`\n\t\tSerialNumber string `json:\"SerialNumber\"`\n\t\tSize         string `json:\"Size\"`\n\t\tDiskName     string `json:\"DiskName\"` //硬盘名称\n\t\tVendor       string `json:\"Vendor\"`   // 厂商\n\t\tDiskType     string `json:\"DiskType\"` // 硬盘类型\n\t\tDiskRate     string `json:\"DiskRate\"` // 使用率\n\t}\n\n\tGpuInfo struct {\n\t\tId    string `json:\"Id\"`\n\t\tModel string `json:\"Model\"`\n\t\tSize  string `json:\"Size\"`\n\t}\n\tMemoryDeviceInfo struct {\n\t\tPartNumber        string `json:\"PartNumber\"`\n\t\tSize              uint16 `json:\"Size\"`\n\t\tTotalWidth        uint16 `json:\"TotalWidth\"`\n\t\tDataWidth         uint16 `json:\"DataWidth\"`\n\t\tFormFactor        string `json:\"FormFactor\"`\n\t\tDeviceSet         byte   `json:\"DeviceSet\"`\n\t\tDeviceLocator     string `json:\"DeviceLocator\"`\n\t\tBankLocator       string `json:\"BankLocator\"`\n\t\tMemoryType        string `json:\"MemoryType\"`\n\t\tTypeDetail        string `json:\"TypeDetail\"`\n\t\tSpeed             uint16 `json:\"Speed\"`\n\t\tManufacturer      string `json:\"Manufacturer\"`\n\t\tSerialNumber      string `json:\"serialNumber\"`\n\t\tAssetTag          string `json:\"AssetTag\"`\n\t\tAttributes        byte   `json:\"Attributes\"`\n\t\tConfiguredVoltage uint16 `json:\"ConfiguredVoltage\"`\n\t}\n\tNicInfo struct {\n\t\tModel string `json:\"Model\"`\n\t\tCount int    `json:\"Count\"`\n\t}\n\tRaidInfo struct {\n\t\tModel string `json:\"Model\"`\n\t\tCount int    `json:\"Count\"`\n\t}\n)\n\nfunc (c SysInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *SysInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c BaseboardInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *BaseboardInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c CpuInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *CpuInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c DiskInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *DiskInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c WorkInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *WorkInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c GpuInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *GpuInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c MemoryInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *MemoryInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c NicInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *NicInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c RaidInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *RaidInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/service/server.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"math\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\tprom_client \"ezone.ksyun.com/ezone/luban/monitor/common/client/prom\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/server\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/utils\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/server/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/server/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/server/model\"\n\t\"github.com/gin-gonic/gin\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n\t\"k8s.io/klog/v2\"\n)\n\ntype PhysicalService struct {\n\tStore dao.ServerStore\n}\n\nfunc NewPhysicalService() *PhysicalService {\n\treturn &PhysicalService{\n\t\tStore: *dao.NewServerStore(),\n\t}\n}\n\nfunc (s *PhysicalService) PhysicalOverviewAlert(ctx context.Context, par dto.PhysicalOverviewMonitorReq) (*dto.PhysicalOverviewAlertRsp, error) {\n\n\talertLevels := []types.OverviewAlert{\n\t\t{Name: \"紧急告警\", Level: \"p0\", Kind: \"error\", Number: 0, Unit: \"个\"},\n\t\t{Name: \"重要告警\", Level: \"p1\", Kind: \"warn\", Number: 0, Unit: \"个\"},\n\t\t{Name: \"次要告警\", Level: \"p2\", Kind: \"minor\", Number: 0, Unit: \"个\"},\n\t\t{Name: \"提醒告警\", Level: \"p3\", Kind: \"info\", Number: 0, Unit: \"个\"},\n\t}\n\n\talerts, err := s.Store.AlarmRpcClient.ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\tPageNo:   -1,\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t\tAz:       par.Az,\n\t\tStatus:   \"firing\",\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListAlerts err\")\n\t}\n\t//概览数据拼装\n\tvar alertSlots []types.BasicOverviewSlot\n\n\tfor _, alert := range alertLevels {\n\t\tvar alertSlotInfo types.BasicOverviewSlot\n\t\talertSlotInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tName:        alert.Level,\n\t\t\tValue:       utils.CountAlertsNum(alerts.Items, \"physicalServer\", alert.Level),\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tUnit:        \"个\",\n\t\t\tKind:        alert.Kind,\n\t\t\tPrognosis:   0,\n\t\t\tDescription: \"\",\n\t\t}\n\t\talertSlots = append(alertSlots, alertSlotInfo)\n\t}\n\n\treturn &dto.PhysicalOverviewAlertRsp{\n\t\tAlerts: alertSlots,\n\t}, nil\n\n}\n\nfunc (s *PhysicalService) PhysicalOverviewMonitor(ctx context.Context, par dto.PhysicalOverviewMonitorReq) (*dto.PhysicalOverviewMonitorRsp, error) {\n\n\tlist, err := s.Store.ServiceRpcClient.PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\tRegion:   par.Region,\n\t\tAz:       par.Az,\n\t\tLabId:    par.LabId,\n\t\tPageNo:   1,\n\t\tPageSize: -1,\n\t})\n\tif err != nil && list.TotalCount == 0 {\n\t\treturn nil, err\n\t}\n\n\tvar (\n\t\tserverUp           int\n\t\tserverDown         int\n\t\tourIpList          []string\n\t\tmonitoringStatus   []types.BasicOverviewSlot\n\t\thardwareMonitoring []types.BasicOverviewSlot\n\t)\n\tfor _, server := range list.PhysicalServerHostList {\n\t\tourIpList = append(ourIpList, server.OutbandIp)\n\t\tif server.MonitoringStatus == \"up\" {\n\t\t\tserverUp += 1\n\t\t} else {\n\t\t\tserverDown += 1\n\t\t}\n\t}\n\n\tstatusList := []string{\"监控中\", \"监控异常\"}\n\tfor _, name := range statusList {\n\t\tvar monitoringStatusInfo types.BasicOverviewSlot\n\t\tvalue := 0\n\t\tif name == \"监控中\" {\n\t\t\tvalue = serverUp\n\t\t} else {\n\t\t\tvalue = serverDown\n\t\t}\n\t\tmonitoringStatusInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:     0,\n\t\t\tName:      name,\n\t\t\tValue:     value,\n\t\t\tUnitType:  \"types.TypeNumber\",\n\t\t\tUnit:      \"个\",\n\t\t\tPrognosis: 0,\n\t\t}\n\t\tmonitoringStatus = append(monitoringStatus, monitoringStatusInfo)\n\t}\n\n\tcpuFaultNum, _ := GetCPUFaultNum(s.Store, ctx, ourIpList)\n\tmemFaultNum, _ := GetMemFaultNum(s.Store, ctx, ourIpList)\n\tdiskFaultNum, _ := GetDiskFaultNum(s.Store, ctx, ourIpList)\n\n\tfaultList := []string{\"CPU故障数量\", \"内存故障数量\", \"硬盘故障数量\"}\n\n\tfor _, name := range faultList {\n\t\tvar hardwareMonitoringInfo types.BasicOverviewSlot\n\t\tvalue := 0\n\t\tswitch name {\n\t\tcase \"CPU故障数量\":\n\t\t\tvalue = cpuFaultNum\n\t\tcase \"内存故障数量\":\n\t\t\tvalue = memFaultNum\n\t\tcase \"硬盘故障数量\":\n\t\t\tvalue = diskFaultNum\n\t\t}\n\t\thardwareMonitoringInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:     0,\n\t\t\tName:      name,\n\t\t\tValue:     value,\n\t\t\tUnitType:  \"types.TypeNumber\",\n\t\t\tUnit:      \"个\",\n\t\t\tPrognosis: 0,\n\t\t}\n\t\thardwareMonitoring = append(hardwareMonitoring, hardwareMonitoringInfo)\n\t}\n\n\treturn &dto.PhysicalOverviewMonitorRsp{\n\t\tMonitoringStatus:   monitoringStatus,\n\t\tHardwareMonitoring: hardwareMonitoring,\n\t}, nil\n\n}\n\nfunc GetCPUFaultNum(s dao.ServerStore, ctx context.Context, ourIpList []string) (num int, err error) {\n\t//获取cpu故障数\n\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.IpmiSensorState]([]*alarmv1alpha.Label{\n\t\t{\n\t\t\tKey:       \"instance\",\n\t\t\tValue:     strings.Join(ourIpList, \"|\"),\n\t\t\tOperation: \"=~\",\n\t\t},\n\t\t{\n\t\t\tKey:       \"name\",\n\t\t\tValue:     \"^CPU.*State|^CPU.*Status\",\n\t\t\tOperation: \"=~\",\n\t\t},\n\t\t{\n\t\t\tKey:       \"type\",\n\t\t\tValue:     \"Processor\",\n\t\t\tOperation: \"=\",\n\t\t},\n\t}))\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tpromQLStr := promQL.Items[0].RealPromql\n\n\tklog.Info(\"cpuPromQLStr \", promQLStr)\n\n\t//查Prometheus\n\tcpu, err := prom_client.VectorQuery(ctx, promQLStr)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tfor _, v := range cpu {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tif float64(v.Value) == 1 {\n\t\t\tnum += 1\n\t\t}\n\t}\n\treturn num, nil\n}\n\nfunc GetFaultNumMap(s dao.ServerStore, ctx context.Context, ourIpList []string, errType string) (map[string]int, error) {\n\t//获取cpu故障数\n\tvar promQLStr string\n\n\tswitch errType {\n\tcase \"cpu\":\n\t\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.IpmiSensorState]([]*alarmv1alpha.Label{\n\t\t\t{\n\t\t\t\tKey:       \"instance\",\n\t\t\t\tValue:     strings.Join(ourIpList, \"|\"),\n\t\t\t\tOperation: \"=~\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tKey:       \"name\",\n\t\t\t\tValue:     \"^CPU.*State|^CPU.*Status\",\n\t\t\t\tOperation: \"=~\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tKey:       \"type\",\n\t\t\t\tValue:     \"Processor\",\n\t\t\t\tOperation: \"=\",\n\t\t\t},\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tpromQLStr = promQL.Items[0].RealPromql\n\tcase \"mem\":\n\t\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.IpmiSensorState]([]*alarmv1alpha.Label{\n\t\t\t{\n\t\t\t\tKey:       \"instance\",\n\t\t\t\tValue:     strings.Join(ourIpList, \"|\"),\n\t\t\t\tOperation: \"=~\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tKey:       \"name\",\n\t\t\t\tValue:     \"Memory Usage\",\n\t\t\t\tOperation: \"!=\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tKey:       \"type\",\n\t\t\t\tValue:     \"Memory\",\n\t\t\t\tOperation: \"=\",\n\t\t\t},\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tpromQLStr = promQL.Items[0].RealPromql\n\tcase \"disk\":\n\t\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.IpmiSensorState]([]*alarmv1alpha.Label{\n\t\t\t{\n\t\t\t\tKey:       \"instance\",\n\t\t\t\tValue:     strings.Join(ourIpList, \"|\"),\n\t\t\t\tOperation: \"=~\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tKey:       \"type\",\n\t\t\t\tValue:     \"Drive Slot\",\n\t\t\t\tOperation: \"=\",\n\t\t\t},\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tpromQLStr = promQL.Items[0].RealPromql\n\t}\n\n\t//查Prometheus\n\tpromRes, err := prom_client.VectorQuery(ctx, promQLStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tres := make(map[string]int)\n\tfor _, v := range promRes {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tinstance := string(v.Metric[\"instance\"])\n\t\tif ins, ok := res[instance]; ok {\n\t\t\tif v.Value == 1 {\n\t\t\t\tres[instance] = ins + 1\n\t\t\t} else {\n\t\t\t\tres[instance] = ins\n\t\t\t}\n\t\t} else {\n\t\t\tres[instance] = int(v.Value)\n\t\t}\n\n\t}\n\treturn res, nil\n}\n\nfunc GetUsageRayeMap(s dao.ServerStore, ctx context.Context, ips []string, errType string) (map[string]float64, error) {\n\n\tvar promQLStr string\n\tswitch errType {\n\tcase \"cpu\":\n\t\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.CpuUsageRate](ips))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tpromQLStr = promQL.Items[0].RealPromql\n\tcase \"mem\":\n\t\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.MemUsageRate](ips))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tpromQLStr = promQL.Items[0].RealPromql\n\tcase \"disk\":\n\t\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskUsageRate](ips))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tpromQLStr = promQL.Items[0].RealPromql\n\n\t}\n\t//查Prometheus\n\tpromRes, err := prom_client.VectorQuery(ctx, promQLStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t//\n\tres := make(map[string]float64)\n\n\tfor _, v := range promRes {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\thostname := string(v.Metric[\"hostname\"])\n\t\t_, ok := res[hostname]\n\t\tif !ok {\n\t\t\tres[hostname] = tools.FormPercent(float64(v.Value))\n\t\t}\n\t}\n\treturn res, nil\n}\n\nfunc GetMemFaultNum(s dao.ServerStore, ctx context.Context, ourIpList []string) (num int, err error) {\n\t//获取mem故障数\n\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.IpmiSensorState]([]*alarmv1alpha.Label{\n\t\t{\n\t\t\tKey:       \"instance\",\n\t\t\tValue:     strings.Join(ourIpList, \"|\"),\n\t\t\tOperation: \"=~\",\n\t\t},\n\t\t{\n\t\t\tKey:       \"name\",\n\t\t\tValue:     \"Memory Usage\",\n\t\t\tOperation: \"!=\",\n\t\t},\n\t\t{\n\t\t\tKey:       \"type\",\n\t\t\tValue:     \"Memory\",\n\t\t\tOperation: \"=\",\n\t\t},\n\t}))\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tpromQLStr := promQL.Items[0].RealPromql\n\n\tklog.Info(\"memPromQLStr \", promQLStr)\n\n\t//查Prometheus\n\tcpu, err := prom_client.VectorQuery(ctx, promQLStr)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tfor _, v := range cpu {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tif float64(v.Value) == 1 {\n\t\t\tnum += 1\n\t\t}\n\t}\n\treturn num, nil\n}\n\nfunc GetDiskFaultNum(s dao.ServerStore, ctx context.Context, ourIpList []string) (num int, err error) {\n\t//获取disk故障数\n\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.IpmiSensorState]([]*alarmv1alpha.Label{\n\t\t{\n\t\t\tKey:       \"instance\",\n\t\t\tValue:     strings.Join(ourIpList, \"|\"),\n\t\t\tOperation: \"=~\",\n\t\t},\n\t\t{\n\t\t\tKey:       \"type\",\n\t\t\tValue:     \"Drive Slot\",\n\t\t\tOperation: \"=\",\n\t\t},\n\t}))\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tpromQLStr := promQL.Items[0].RealPromql\n\n\tklog.Info(\"diskPromQLStr \", promQLStr)\n\n\t//查Prometheus\n\tcpu, err := prom_client.VectorQuery(ctx, promQLStr)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tfor _, v := range cpu {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tif float64(v.Value) == 1 {\n\t\t\tnum += 1\n\t\t}\n\t}\n\treturn num, nil\n}\n\nfunc (s *PhysicalService) PhysicalList(ctx context.Context, par dto.PhysicalListReq) (*dto.PhysicalListRsp, error) {\n\n\t//获取\n\trpcServer, err := s.Store.ServiceRpcClient.PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\tPageNo:           1,\n\t\tPageSize:         -1,\n\t\tRegion:           par.Region,\n\t\tAz:               par.Az,\n\t\tLabId:            par.LabId,\n\t\tQuery:            par.Query,\n\t\tMonitoringStatus: par.MonitoringStatus,\n\t\tNode:             par.NodeType,\n\t\tResourcePoolType: par.ResourcePoolType,\n\t\tResourcePoolName: par.ResourcePoolName,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar (\n\t\thosts      []dto.PhysicalServer\n\t\tserverList []dto.PhysicalServer\n\t\thostname   []string\n\t\tips        []string\n\t\toutBandIp  []string\n\t)\n\tfor _, v := range rpcServer.PhysicalServerHostList {\n\n\t\thost := dto.PhysicalServer{\n\t\t\tHostId:           int(v.HostId),\n\t\t\tHostName:         v.HostName,\n\t\t\tMonitoringStatus: v.MonitoringStatus,\n\t\t\tNode:             v.NodeType,\n\t\t\tResourcePoolName: v.ResourcePoolName,\n\t\t\tResourcePoolType: v.ResourcePoolType,\n\t\t\tRegion:           v.Region,\n\t\t\tAz:               v.Az,\n\t\t\tLab:              v.LabName,\n\t\t\tSn:               v.DeviceSn,\n\t\t\tIp:               v.ManageIp,\n\t\t\tOutBindIp:        v.OutbandIp,\n\t\t\tTag:              v.Tag,\n\t\t}\n\t\thostname = append(hostname, v.HostName)\n\t\tips = append(ips, v.ManageIp+\":9100\")\n\t\toutBandIp = append(outBandIp, v.OutbandIp)\n\t\thosts = append(hosts, host)\n\t}\n\n\t//获取服务器故障数\n\tcpuErrNum, _ := GetFaultNumMap(s.Store, ctx, outBandIp, \"cpu\")\n\tmemErrNum, _ := GetFaultNumMap(s.Store, ctx, outBandIp, \"mem\")\n\tdiskErrNum, _ := GetFaultNumMap(s.Store, ctx, outBandIp, \"disk\")\n\n\t//获取服务器告警数\n\talerts, err := s.Store.AlarmRpcClient.ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\tPageNo:          -1,\n\t\tPageSize:        -1,\n\t\tStatus:          \"firing\",\n\t\tRegion:          par.Region,\n\t\tResourceType:    []string{\"physicalResource\"},\n\t\tResourceSubType: []string{\"physicalServer\"},\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListAlerts err\")\n\t}\n\talertNum := utils.CountAlertsListNum(alerts.Items, \"physicalServer\")\n\n\t//获取服务器cpu mem disk 使用率\n\tcpuLoad, _ := GetUsageRayeMap(s.Store, ctx, ips, \"cpu\")\n\tmemLoad, _ := GetUsageRayeMap(s.Store, ctx, ips, \"mem\")\n\tdiskLoad, _ := GetUsageRayeMap(s.Store, ctx, ips, \"disk\")\n\n\tfor _, h := range hosts {\n\t\tcpuErr := cpuErrNum[h.OutBindIp]\n\t\tmemErr := memErrNum[h.OutBindIp]\n\t\tdiskErr := diskErrNum[h.OutBindIp]\n\n\t\tserverInfo := dto.PhysicalServer{\n\t\t\tHostId:           h.HostId,\n\t\t\tHostName:         h.HostName,\n\t\t\tMonitoringStatus: h.MonitoringStatus,\n\t\t\tNode:             h.Node,\n\t\t\tResourcePoolName: h.ResourcePoolName,\n\t\t\tResourcePoolType: h.ResourcePoolType,\n\t\t\tRegion:           h.Region,\n\t\t\tAz:               h.Az,\n\t\t\tLab:              h.Lab,\n\t\t\tSn:               h.Sn,\n\t\t\tIp:               h.Ip,\n\t\t\tOutBindIp:        h.OutBindIp,\n\t\t\tCpuErrNum:        cpuErr,\n\t\t\tCpuLoad:          cpuLoad[h.HostName],\n\t\t\tMemErrNum:        memErr,\n\t\t\tMemLoad:          memLoad[h.HostName],\n\t\t\tDiskErrNum:       diskErr,\n\t\t\tDiskLoad:         diskLoad[h.HostName],\n\t\t\tAlertNumber:      alertNum[h.HostName],\n\t\t\tTag:              h.Tag,\n\t\t}\n\t\tif par.CpuErrNum == \"zero\" && cpuErr > 0 { //筛选cpu故障数等于0的\n\t\t\tcontinue\n\t\t}\n\t\tif par.MemErrNum == \"zero\" && memErr > 0 { //筛选mem故障数等于0的\n\t\t\tcontinue\n\t\t}\n\t\tif par.DiskErrNum == \"zero\" && diskErr > 0 { //筛选硬盘故障数等于0的\n\t\t\tcontinue\n\t\t}\n\t\tif par.CpuErrNum == \"nozero\" && cpuErr == 0 { //筛选mem故障数大于0的\n\t\t\tcontinue\n\t\t}\n\t\tif par.MemErrNum == \"nozero\" && memErr == 0 { //筛选cpu故障数大于0的\n\t\t\tcontinue\n\t\t}\n\t\tif par.DiskErrNum == \"nozero\" && diskErr == 0 { //筛选硬盘故障数大于0的\n\t\t\tcontinue\n\t\t}\n\t\tserverList = append(serverList, serverInfo)\n\t}\n\n\t//order 排序\n\tif par.OrderCode != \"\" && par.OrderType != \"\" {\n\t\tresults := utils.Bucket{}\n\t\tfor i := 0; i < len(serverList); i++ {\n\t\t\tresults.Slice = append(results.Slice, serverList[i])\n\t\t}\n\t\ttime_by := func(a, b interface{}) bool {\n\t\t\treturn true\n\t\t}\n\t\tswitch par.OrderCode {\n\t\tcase \"CpuLoad\":\n\t\t\tif par.OrderType != \"\" {\n\t\t\t\tswitch par.OrderType {\n\t\t\t\tcase \"ASC\":\n\t\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\t\treturn a.(dto.PhysicalServer).CpuLoad < b.(dto.PhysicalServer).CpuLoad\n\t\t\t\t\t}\n\t\t\t\tcase \"DESC\":\n\t\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\t\treturn a.(dto.PhysicalServer).CpuLoad > b.(dto.PhysicalServer).CpuLoad\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"MemLoad\":\n\t\t\tif par.OrderType != \"\" {\n\t\t\t\tswitch par.OrderType {\n\t\t\t\tcase \"ASC\":\n\t\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\t\treturn a.(dto.PhysicalServer).MemLoad < b.(dto.PhysicalServer).MemLoad\n\t\t\t\t\t}\n\t\t\t\tcase \"DESC\":\n\t\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\t\treturn a.(dto.PhysicalServer).MemLoad > b.(dto.PhysicalServer).MemLoad\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"DiskLoad\":\n\t\t\tif par.OrderType != \"\" {\n\t\t\t\tswitch par.OrderType {\n\t\t\t\tcase \"ASC\":\n\t\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\t\treturn a.(dto.PhysicalServer).DiskLoad < b.(dto.PhysicalServer).DiskLoad\n\t\t\t\t\t}\n\t\t\t\tcase \"DESC\":\n\t\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\t\treturn a.(dto.PhysicalServer).DiskLoad > b.(dto.PhysicalServer).DiskLoad\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresults.By = time_by\n\t\tsort.Sort(results)\n\t\tfor i := 0; i < len(results.Slice); i++ {\n\t\t\tserverList[i] = results.Slice[i].(dto.PhysicalServer)\n\t\t}\n\t}\n\n\t//分页\n\tlow := (par.PageNo - 1) * par.PageSize\n\tif low > len(serverList) {\n\t\tklog.Info(\"PageSize is too large\")\n\t}\n\n\thight := low + par.PageSize\n\tif hight > len(serverList) {\n\t\thight = len(serverList)\n\t}\n\n\tvar results dto.PhysicalListRsp\n\tresults.PageSize = par.PageSize\n\tresults.PageNo = par.PageNo\n\tresults.TotalCount = int64(len(serverList))\n\tresults.PhysicalServerHostList = serverList[low:hight]\n\n\treturn &results, err\n}\n\nfunc (s *PhysicalService) PhysicalOverviewTop(ctx context.Context, par dto.PhysicalOverviewTopReq) (*dto.PhysicalOverviewTopRsp, error) {\n\tres := dto.PhysicalOverviewTopRsp{}\n\n\tlist, err := s.Store.ServiceRpcClient.PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\tRegion:   par.Region,\n\t\tAz:       par.Az,\n\t\tLabId:    par.LabId,\n\t\tPageNo:   1,\n\t\tPageSize: -1,\n\t})\n\tif err != nil {\n\t\treturn &res, nil\n\t}\n\n\tvar ipList []string\n\tvar hostNameList []string\n\tipSnMap := make(map[string]string, len(list.PhysicalServerHostList))\n\thostIpMap := make(map[string][]string, len(list.PhysicalServerHostList))\n\tfor _, v := range list.PhysicalServerHostList {\n\t\tipList = append(ipList, v.ManageIp+\":9100\")\n\t\thostNameList = append(hostNameList, v.HostName)\n\t\tipSnMap[v.ManageIp+\":9100\"] = v.DeviceSn\n\t\thostIpMap[v.HostName] = []string{v.ManageIp, v.DeviceSn}\n\t}\n\n\tips := strings.Join(ipList, \"|\")\n\thostNames := strings.Join(hostNameList, \"|\")\n\tt := tools.FormatTime(float64(par.End/1000 - par.Start/1000))\n\n\tvar tops []types.BasicOverviewSlot\n\n\tfor i := 0; i < len(par.MetricName); i++ {\n\t\tswitch par.MetricName[i] {\n\t\tcase \"CpuRate\":\n\t\t\tpsql := server.GetCpuRateTopByHostName(par.TopK, hostNames, t)\n\t\t\tresult, err := prom_client.VectorQuery(ctx, psql)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"cpuRate\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\tUnit:     \"%\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor _, v := range result {\n\t\t\t\thostName := string(v.Metric[\"hostname\"])\n\t\t\t\tsn := \"\"\n\t\t\t\tip := \"\"\n\t\t\t\tif ipSn, ok := hostIpMap[hostName]; ok {\n\t\t\t\t\tip = ipSn[0] + \":9100\"\n\t\t\t\t\tsn = ipSn[1]\n\t\t\t\t}\n\t\t\t\tvv := types.BasicOverviewSlotValue{\n\t\t\t\t\tName:     hostName,\n\t\t\t\t\tSubName:  sn,\n\t\t\t\t\tCode:     ip,\n\t\t\t\t\tValue:    strconv.FormatFloat(float64(v.Value), 'f', 2, 64),\n\t\t\t\t\tUnit:     \"%\",\n\t\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\t}\n\t\t\t\tval = append(val, vv)\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: val,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\tcase \"MemoryRate\":\n\t\t\tpsql := server.GetMemoryRateTopK(par.TopK, ips, t)\n\t\t\tresult, err := prom_client.VectorQuery(ctx, psql)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"MemoryRate\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\tUnit:     \"%\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor _, v := range result {\n\t\t\t\tip := string(v.Metric[\"instance\"])\n\t\t\t\thostName := string(v.Metric[\"hostname\"])\n\t\t\t\tsn := \"\"\n\t\t\t\tif deviceSn, ok := ipSnMap[ip]; ok {\n\t\t\t\t\tsn = deviceSn\n\t\t\t\t}\n\t\t\t\tvv := types.BasicOverviewSlotValue{\n\t\t\t\t\tName:     hostName,\n\t\t\t\t\tSubName:  sn,\n\t\t\t\t\tCode:     ip,\n\t\t\t\t\tValue:    strconv.FormatFloat(float64(v.Value), 'f', 2, 64),\n\t\t\t\t\tUnit:     \"%\",\n\t\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\t}\n\t\t\t\tval = append(val, vv)\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: val,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\tcase \"NetIn\":\n\t\t\tpsql := server.GetNetworkReceiveRateTopK(par.TopK, ips, t)\n\t\t\tresult, err := prom_client.VectorQuery(ctx, psql)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"NetIn\",\n\t\t\t\tUnitType: types.TypeStorage,\n\t\t\t\tUnit:     \"GB\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor _, v := range result {\n\t\t\t\tip := string(v.Metric[\"instance\"])\n\t\t\t\thostName := string(v.Metric[\"hostname\"])\n\t\t\t\tsn := \"\"\n\t\t\t\tif deviceSn, ok := ipSnMap[ip]; ok {\n\t\t\t\t\tsn = deviceSn\n\t\t\t\t}\n\t\t\t\tvv := types.BasicOverviewSlotValue{\n\t\t\t\t\tName:     hostName,\n\t\t\t\t\tSubName:  sn,\n\t\t\t\t\tCode:     ip,\n\t\t\t\t\tValue:    strconv.FormatFloat(float64(v.Value), 'f', 2, 64),\n\t\t\t\t\tUnitType: types.TypeStorage,\n\t\t\t\t\tUnit:     \"B\",\n\t\t\t\t}\n\t\t\t\tval = append(val, vv)\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: val,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\tcase \"NetOut\":\n\t\t\tpsql := server.GetNetworkTransmitRateTopK(par.TopK, ips, t)\n\t\t\tresult, err := prom_client.VectorQuery(ctx, psql)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"NetOut\",\n\t\t\t\tUnitType: types.TypeStorage,\n\t\t\t\tUnit:     \"B\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor _, v := range result {\n\t\t\t\tip := string(v.Metric[\"instance\"])\n\t\t\t\thostName := string(v.Metric[\"hostname\"])\n\t\t\t\tsn := \"\"\n\t\t\t\tif deviceSn, ok := ipSnMap[ip]; ok {\n\t\t\t\t\tsn = deviceSn\n\t\t\t\t}\n\t\t\t\tvv := types.BasicOverviewSlotValue{\n\t\t\t\t\tName:     hostName,\n\t\t\t\t\tSubName:  sn,\n\t\t\t\t\tCode:     ip,\n\t\t\t\t\tValue:    strconv.FormatFloat(float64(v.Value), 'f', 2, 64),\n\t\t\t\t\tUnitType: types.TypeStorage,\n\t\t\t\t\tUnit:     \"B\",\n\t\t\t\t}\n\t\t\t\tval = append(val, vv)\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: val,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\t}\n\t}\n\n\treturn &dto.PhysicalOverviewTopRsp{\n\t\tTops: tops,\n\t}, nil\n}\n\nfunc (s *PhysicalService) PhysicalDetailsOverview(ctx context.Context, par dto.PhysicalDetailsOverviewReq) (*dto.PhysicalDetailsOverviewRsp, error) {\n\tres := dto.PhysicalDetailsOverviewRsp{}\n\t//获取服务器详情\n\tdetails, err := s.Store.ServiceRpcClient.PhysicalServerDetails(ctx, &resource_serverv1alpha.DescribePhysicalHostRequest{\n\t\tDeviceSn: par.DeviceSn,\n\t})\n\tif err != nil {\n\t\treturn &res, nil\n\t}\n\n\tvar (\n\t\tdetailsOverview []types.BasicOverviewSlot\n\t\tcpuLoad         float64\n\t\tmemLoad         float64\n\t\tdiskLoad        float64\n\t\tnetIn           float64\n\t\tnetOut          float64\n\t)\n\n\t//cpu使用率\n\tcpuSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.CpuUsageRate]([]string{details.ManageIP + \":9100\"}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcpuPromQL := cpuSp.Items[0].RealPromql\n\tcpu, err := prom_client.VectorQuery(ctx, cpuPromQL)\n\tif err != nil {\n\t\tklog.Info(err)\n\t}\n\tfor _, v := range cpu {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tcpuLoad = tools.FormPercent(float64(v.Value))\n\t}\n\tcpuRes := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:     \"CpuUsage\",\n\t\t\tValue:    cpuLoad,\n\t\t\tUnit:     \"%\",\n\t\t\tUnitType: types.TypePercent,\n\t\t},\n\t}\n\n\t//mem使用率\n\tmemSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.MemUsageRate]([]string{details.ManageIP + \":9100\"}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tmemPromQL := memSp.Items[0].RealPromql\n\tfmt.Println(\"memPromQL\", memPromQL)\n\tmem, err := prom_client.VectorQuery(ctx, memPromQL)\n\tif err != nil {\n\t\tklog.Info(err)\n\t}\n\tfor _, v := range mem {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tmemLoad = tools.FormPercent(float64(v.Value))\n\t}\n\tmemRes := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:     \"MemoryUsage\",\n\t\t\tValue:    memLoad,\n\t\t\tUnit:     \"%\",\n\t\t\tUnitType: types.TypePercent,\n\t\t},\n\t}\n\n\t//磁盘使用率\n\tdiskSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskUsageRate]([]string{details.ManageIP + \":9100\"}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdiskPromQL := diskSp.Items[0].RealPromql\n\tfmt.Println(\"diskPromQL\", diskPromQL)\n\tdisk, err := prom_client.VectorQuery(ctx, diskPromQL)\n\tif err != nil {\n\t\tklog.Info(err)\n\t}\n\n\tfor _, v := range disk {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tdiskLoad = tools.FormPercent(float64(v.Value))\n\t}\n\tdiskRes := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:     \"DiskUsage\",\n\t\t\tValue:    diskLoad,\n\t\t\tUnit:     \"%\",\n\t\t\tUnitType: types.TypePercent,\n\t\t},\n\t}\n\n\t//网卡入口流量\n\tnetInSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.NetworkReceive24h]([]string{details.ManageIP + \":9100\"}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tnetIns, err := prom_client.VectorQuery(ctx, netInSp.Items[0].RealPromql)\n\tif err != nil {\n\t\tklog.Info(err)\n\t}\n\tfor _, v := range netIns {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tnetIn = tools.FormPercent(float64(v.Value))\n\t}\n\tnetInRes := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:     \"NetIn\",\n\t\t\tValue:    netIn,\n\t\t\tUnit:     \"B\",\n\t\t\tUnitType: types.TypeStorage,\n\t\t},\n\t}\n\n\t//网卡出口流量\n\tnetOutSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.NetworkReceive24h]([]string{details.ManageIP + \":9100\"}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tnetOuts, err := prom_client.VectorQuery(ctx, netOutSp.Items[0].RealPromql)\n\tif err != nil {\n\t\tklog.Info(err)\n\t}\n\n\tfor _, v := range netOuts {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tnetOut = tools.FormPercent(float64(v.Value))\n\t}\n\tnetOutRes := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:     \"NetOut\",\n\t\t\tValue:    netOut,\n\t\t\tUnit:     \"B\",\n\t\t\tUnitType: types.TypeStorage,\n\t\t},\n\t}\n\t//磁盘剩余容量\n\tdiskAvailSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskAvailEvery]([]string{details.ManageIP + \":9100\"}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresults, err := prom_client.VectorQuery(ctx, diskAvailSp.Items[0].RealPromql)\n\tif err != nil {\n\t\tklog.Info(err)\n\t}\n\tdiskAvailRes := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName: \"Disk\",\n\t\t},\n\t}\n\n\tfor _, v := range results {\n\t\tfstype, ok := v.Metric[\"fstype\"]\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tdevice, ok := v.Metric[\"device\"]\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tvv := types.BasicOverviewSlotValue{\n\t\t\tName:  string(device),\n\t\t\tCode:  string(fstype),\n\t\t\tValue: tools.FormPercent(float64(v.Value)),\n\t\t}\n\t\tdiskAvailRes.Values = append(diskAvailRes.Values, vv)\n\t}\n\n\tdetailsOverview = append(detailsOverview, cpuRes, memRes, diskRes, netInRes, netOutRes, diskAvailRes)\n\n\treturn &dto.PhysicalDetailsOverviewRsp{\n\t\tDetailsOverview: detailsOverview,\n\t}, nil\n\n}\n\nfunc (s *PhysicalService) PhysicalWorkList(ctx *gin.Context, par dto.PhysicalWorkListReq) ([]string, error) {\n\n\t//磁盘使用率\n\tworkSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.NetworkCardList]([]string{par.Ip + \":9100\"}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tworkPromQL := workSp.Items[0].RealPromql\n\tfmt.Println(\"workPromQL\", workPromQL)\n\tres, err := prom_client.VectorQuery(ctx, workPromQL)\n\tif err != nil {\n\t\tklog.Info(err)\n\t}\n\tvar names []string\n\tfor _, v := range res {\n\t\tnames = append(names, string(v.Metric[\"device\"]))\n\t}\n\n\treturn names, nil\n}\n\nvar MetricWorkMap = map[string]struct{}{\n\t//network\n\t\"Receive\":     struct{}{},\n\t\"Transmit\":    struct{}{},\n\t\"ErrDropIn\":   struct{}{},\n\t\"ErrDropOut\":  struct{}{},\n\t\"LoseDropIn\":  struct{}{},\n\t\"LoseDropOut\": struct{}{},\n}\n\nfunc (s *PhysicalService) PhysicalDetailsLine(ctx context.Context, par dto.PhysicalDetailsLineReq) (*dto.PhysicalDetailsOverviewLineRsp, error) {\n\n\tstart := par.Start / 1e3\n\tend := par.End / 1e3\n\tstep := tools.TimeToStepForInt(end - start)\n\tip := par.Ip + \":9100\"\n\n\tvar lines []types.BasicOverviewSlot\n\n\tfor i := 0; i < len(par.MetricName); i++ {\n\t\tif _, ok := MetricWorkMap[par.MetricName[i]]; ok { // 网络监控验证参数\n\t\t\tif len(par.WorkName) <= 0 {\n\t\t\t\treturn nil, fmt.Errorf(\"workName Parameter not passed\")\n\t\t\t}\n\t\t}\n\t\tswitch par.MetricName[i] {\n\t\tcase \"CpuMode\": //cpu负载\n\t\t\tcpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.CpuMode]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\trealPromql := cpuMode.Items[0].RealPromql\n\t\t\tfmt.Println(\"cpuModeSql\", realPromql)\n\t\t\tmatrix, err := prom_client.MatrixQuery(ctx, realPromql, v1.Range{\n\t\t\t\tStart: time.Unix(start, 0),\n\t\t\t\tEnd:   time.Unix(end, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\t\t\tfor _, m := range matrix {\n\t\t\t\tline := types.BasicOverviewSlot{}\n\t\t\t\tvar avg []float64\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tUnit:        \"%\",\n\t\t\t\t\t\tUnitType:    \"\",\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"\",\n\t\t\t\t\t})\n\t\t\t\t\tavg = append(avg, float64(value))\n\t\t\t\t}\n\t\t\t\tcurrent := m.Values[len(m.Values)-1].Value\n\t\t\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\t\t\tIndex:       0,\n\t\t\t\t\tName:        string(m.Metric[\"mode\"]),\n\t\t\t\t\tValue:       current,\n\t\t\t\t\tAvg:         tools.GetAvg(avg),\n\t\t\t\t\tUnitType:    \"\",\n\t\t\t\t\tUnit:        \"%\",\n\t\t\t\t\tKind:        \"\",\n\t\t\t\t\tPrognosis:   0, //预测值，values的下标，0则无预测值\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t}\n\t\t\t\tlines = append(lines, line)\n\t\t\t}\n\n\t\tcase \"CpuAvgMode\": //cpu平均负载\n\t\t\tcpuAvgMode1, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.CpuNodeLoad1]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\trealPromql := cpuAvgMode1.Items[0].RealPromql\n\t\t\tline, _ := GetBasicOverviewSlot(ctx, realPromql, \"node_load\", start, end, step, true, false, false)\n\t\t\tlines = append(lines, line)\n\n\t\t\tcpuAvgMode5, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.CpuNodeLoad5]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\trealPromql5 := cpuAvgMode5.Items[0].RealPromql\n\t\t\tline5, _ := GetBasicOverviewSlot(ctx, realPromql5, \"node_load\", start, end, step, true, false, false)\n\t\t\tlines = append(lines, line5)\n\n\t\t\tcpuAvgMode15, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.CpuNodeLoad15]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\trealPromql15 := cpuAvgMode15.Items[0].RealPromql\n\t\t\tline15, _ := GetBasicOverviewSlot(ctx, realPromql15, \"node_load\", start, end, step, true, false, false)\n\t\t\tlines = append(lines, line15)\n\n\t\tcase \"MemoryCapacity\": //\n\t\t\t//free\n\t\t\tfree, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.NodeMemoryFree]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tfreeRealPromql := free.Items[0].RealPromql\n\t\t\tfreeLine, _ := GetBasicOverviewSlot(ctx, freeRealPromql, \"Free\", start, end, step, false, false, false)\n\t\t\tlines = append(lines, freeLine)\n\n\t\t\t//total\n\t\t\ttotal, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.NodeMemoryTotal]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ttotalRealPromql := total.Items[0].RealPromql\n\t\t\ttotalLine, _ := GetBasicOverviewSlot(ctx, totalRealPromql, \"Total\", start, end, step, false, false, false)\n\t\t\tlines = append(lines, totalLine)\n\n\t\t\t//available\n\t\t\tavailable, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.NodeMemoryAvailable]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tavailableRealPromql := available.Items[0].RealPromql\n\t\t\tavailableLine, _ := GetBasicOverviewSlot(ctx, availableRealPromql, \"Available\", start, end, step, false, false, false)\n\t\t\tlines = append(lines, availableLine)\n\n\t\tcase \"NetworkInOut\": //网络流量(流入/流入)\n\t\t\t//网络流量流入\n\t\t\treceive, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.NetworkReceiveBytes]([]*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     ip,\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t}, {\n\t\t\t\t\tKey:       \"device\",\n\t\t\t\t\tValue:     par.WorkName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treceivePromql := receive.Items[0].RealPromql\n\t\t\tfmt.Println(\"receivePromql\", receivePromql)\n\t\t\treceiveLine, _ := GetBasicOverviewSlot(ctx, receivePromql, \"network_receive_bytes\", start, end, step, false, true, true)\n\t\t\tlines = append(lines, receiveLine)\n\t\t\t//网络流量流出\n\t\t\ttransmit, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.NetworkTransmitBytes]([]*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     ip,\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t}, {\n\t\t\t\t\tKey:       \"device\",\n\t\t\t\t\tValue:     par.WorkName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ttransmitPromql := transmit.Items[0].RealPromql\n\t\t\tfmt.Println(\"transmitPromql\", transmitPromql)\n\t\t\ttransmitLine, _ := GetBasicOverviewSlot(ctx, transmitPromql, \"network_transmit_bytes\", start, end, step, false, true, true)\n\t\t\tlines = append(lines, transmitLine)\n\n\t\tcase \"ErrDropInOut\": //网络误包(流入/流出)\n\t\t\t//网络丢包流入\n\t\t\terrIn, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.NetworkReceiveErrs]([]*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     ip,\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t}, {\n\t\t\t\t\tKey:       \"device\",\n\t\t\t\t\tValue:     par.WorkName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\terrInPromql := errIn.Items[0].RealPromql\n\t\t\tfmt.Println(\"errInPromql\", errInPromql)\n\t\t\terrInLine, _ := GetBasicOverviewSlot(ctx, errInPromql, \"network_receive_errs\", start, end, step, false, true, true)\n\t\t\tlines = append(lines, errInLine)\n\n\t\t\t//网络丢包流出\n\t\t\terrOut, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.NetworkTransmitErrs]([]*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     ip,\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t}, {\n\t\t\t\t\tKey:       \"device\",\n\t\t\t\t\tValue:     par.WorkName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\terrOutPromql := errOut.Items[0].RealPromql\n\t\t\tfmt.Println(\"errOutPromql\", errOutPromql)\n\t\t\ttransmitLine, _ := GetBasicOverviewSlot(ctx, errOutPromql, \"network_transmit_errs\", start, end, step, false, true, true)\n\t\t\tlines = append(lines, transmitLine)\n\n\t\tcase \"LoseDropInOut\":\n\t\t\t//网络丢包流入\n\t\t\tdropIn, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.NetworkReceiveDrop]([]*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     ip,\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t}, {\n\t\t\t\t\tKey:       \"device\",\n\t\t\t\t\tValue:     par.WorkName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tdropInPromql := dropIn.Items[0].RealPromql\n\t\t\tfmt.Println(\"dropInPromql\", dropInPromql)\n\t\t\tdropInLine, _ := GetBasicOverviewSlot(ctx, dropInPromql, \"network_receive_drop\", start, end, step, false, true, true)\n\t\t\tlines = append(lines, dropInLine)\n\n\t\t\t//网络丢包流出\n\t\t\tdropOut, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.NetworkTransmitDrop]([]*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     ip,\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t}, {\n\t\t\t\t\tKey:       \"device\",\n\t\t\t\t\tValue:     par.WorkName,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tdropOutPromql := dropOut.Items[0].RealPromql\n\t\t\tfmt.Println(\"dropOutPromql\", dropOutPromql)\n\t\t\ttransmitLine, _ := GetBasicOverviewSlot(ctx, dropOutPromql, \"network_transmit_drop\", start, end, step, false, true, true)\n\t\t\tlines = append(lines, transmitLine)\n\n\t\tcase \"DiskAvailBytes\": //磁盘剩余容量\n\t\t\tdiskAvailSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskAvailEvery]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tdiskAvailPromql := diskAvailSp.Items[0].RealPromql\n\t\t\ttransmitLine, _ := GetBasicOverviewSlot(ctx, diskAvailPromql, \"server_disk_avail_every\", start, end, step, false, false, false)\n\t\t\tlines = append(lines, transmitLine)\n\n\t\tcase \"DiskReadWrite\": //磁盘读写带宽\n\t\t\tvar readOther []float64\n\t\t\tvar writeOther []float64\n\t\t\t//磁盘读带宽\n\t\t\tread, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskReadBytes]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treadPromql := read.Items[0].RealPromql\n\t\t\tfmt.Println(\"readPromql\", readPromql)\n\t\t\treadMatrix, err := prom_client.MatrixQuery(ctx, readPromql, v1.Range{\n\t\t\t\tStart: time.Unix(start, 0),\n\t\t\t\tEnd:   time.Unix(end, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\t\t\tfor _, m := range readMatrix {\n\t\t\t\treadLine := types.BasicOverviewSlot{}\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\treadLine.Values = append(readLine.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"\",\n\t\t\t\t\t\tUnit:        \"b/s\",\n\t\t\t\t\t\tUnitType:    types.TypeNumber,\n\t\t\t\t\t})\n\t\t\t\t\treadOther = append(readOther, float64(value))\n\t\t\t\t}\n\t\t\t\tcurrent := m.Values[len(m.Values)-1].Value\n\t\t\t\treadLine.Info = types.BasicOverviewSlotInfo{\n\t\t\t\t\tIndex:     0,\n\t\t\t\t\tName:      \"Read:\" + string(m.Metric[\"device\"]),\n\t\t\t\t\tMin:       tools.GetMin(writeOther),\n\t\t\t\t\tMax:       tools.GetMin(writeOther),\n\t\t\t\t\tValue:     current,\n\t\t\t\t\tPrognosis: 0, //预测值，values的下标，0则无预测值\n\t\t\t\t\tUnit:      \"b/s\",\n\t\t\t\t\tUnitType:  types.TypeNumber,\n\t\t\t\t}\n\t\t\t\tlines = append(lines, readLine)\n\t\t\t}\n\t\t\t//磁盘写带宽\n\t\t\twrite, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskReadBytes]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\twritePromql := write.Items[0].RealPromql\n\t\t\tfmt.Println(\"writePromql\", writePromql)\n\t\t\twriteMatrix, err := prom_client.MatrixQuery(ctx, writePromql, v1.Range{\n\t\t\t\tStart: time.Unix(start, 0),\n\t\t\t\tEnd:   time.Unix(end, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\t\t\tfor _, m := range writeMatrix {\n\t\t\t\twriteLine := types.BasicOverviewSlot{}\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\twriteLine.Values = append(writeLine.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"\",\n\t\t\t\t\t\tUnit:        \"b/s\",\n\t\t\t\t\t\tUnitType:    types.TypeNumber,\n\t\t\t\t\t})\n\t\t\t\t\twriteOther = append(writeOther, float64(value))\n\t\t\t\t}\n\t\t\t\tcurrent := m.Values[len(m.Values)-1].Value\n\t\t\t\twriteLine.Info = types.BasicOverviewSlotInfo{\n\t\t\t\t\tIndex:     0,\n\t\t\t\t\tName:      \"Write:\" + string(m.Metric[\"device\"]),\n\t\t\t\t\tMin:       tools.GetMin(writeOther),\n\t\t\t\t\tMax:       tools.GetMin(writeOther),\n\t\t\t\t\tValue:     current,\n\t\t\t\t\tPrognosis: 0, //预测值，values的下标，0则无预测值\n\t\t\t\t\tUnit:      \"b/s\",\n\t\t\t\t\tUnitType:  types.TypeNumber,\n\t\t\t\t}\n\t\t\t\tlines = append(lines, writeLine)\n\t\t\t}\n\n\t\tcase \"DiskReadWriteIo\": // 磁盘io\n\t\t\tvar readOther []float64\n\t\t\tvar writeOther []float64\n\t\t\t//磁盘读io\n\t\t\tread, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskReadIo]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treadPromql := read.Items[0].RealPromql\n\t\t\tfmt.Println(\"readPromql\", readPromql)\n\t\t\treadMatrix, err := prom_client.MatrixQuery(ctx, readPromql, v1.Range{\n\t\t\t\tStart: time.Unix(start, 0),\n\t\t\t\tEnd:   time.Unix(end, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\n\t\t\tfor _, m := range readMatrix {\n\t\t\t\treadLine := types.BasicOverviewSlot{}\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\treadLine.Values = append(readLine.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"\",\n\t\t\t\t\t\tUnit:        \"次秒s\",\n\t\t\t\t\t\tUnitType:    types.TypeNumber,\n\t\t\t\t\t})\n\t\t\t\t\treadOther = append(readOther, float64(value))\n\t\t\t\t}\n\t\t\t\tcurrent := m.Values[len(m.Values)-1].Value\n\t\t\t\treadLine.Info = types.BasicOverviewSlotInfo{\n\t\t\t\t\tIndex:     0,\n\t\t\t\t\tName:      \"Read:\" + string(m.Metric[\"device\"]),\n\t\t\t\t\tMin:       tools.GetMin(readOther),\n\t\t\t\t\tMax:       tools.GetMax(readOther),\n\t\t\t\t\tValue:     current,\n\t\t\t\t\tPrognosis: 0, //预测值，values的下标，0则无预测值\n\t\t\t\t\tUnit:      \"次秒s\",\n\t\t\t\t\tUnitType:  types.TypeNumber,\n\t\t\t\t}\n\t\t\t\tlines = append(lines, readLine)\n\t\t\t}\n\t\t\t//磁盘写io\n\t\t\twrite, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.DiskWriteIo]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\twritePromql := write.Items[0].RealPromql\n\t\t\tfmt.Println(\"writePromql\", writePromql)\n\t\t\twriteMatrix, err := prom_client.MatrixQuery(ctx, writePromql, v1.Range{\n\t\t\t\tStart: time.Unix(start, 0),\n\t\t\t\tEnd:   time.Unix(end, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\t\t\tfor _, m := range writeMatrix {\n\t\t\t\twriteLine := types.BasicOverviewSlot{}\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\twriteLine.Values = append(writeLine.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"\",\n\t\t\t\t\t\tUnit:        \"次秒s\",\n\t\t\t\t\t\tUnitType:    types.TypeNumber,\n\t\t\t\t\t})\n\t\t\t\t\twriteOther = append(writeOther, float64(value))\n\t\t\t\t}\n\t\t\t\tcurrent := m.Values[len(m.Values)-1].Value\n\t\t\t\twriteLine.Info = types.BasicOverviewSlotInfo{\n\t\t\t\t\tIndex:     0,\n\t\t\t\t\tName:      \"Write:\" + string(m.Metric[\"device\"]),\n\t\t\t\t\tMin:       tools.GetMin(writeOther),\n\t\t\t\t\tMax:       tools.GetMin(writeOther),\n\t\t\t\t\tValue:     current,\n\t\t\t\t\tPrognosis: 0, //预测值，values的下标，0则无预测值\n\t\t\t\t\tUnit:      \"次秒s\",\n\t\t\t\t\tUnitType:  types.TypeNumber,\n\t\t\t\t}\n\t\t\t\tlines = append(lines, writeLine)\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn &dto.PhysicalDetailsOverviewLineRsp{\n\t\tLines: lines,\n\t}, nil\n\n}\n\nfunc GetBasicOverviewSlot(ctx context.Context, realPromql, infoName string, start, end int64, step int, isAvg, isMax, isMin bool) (res types.BasicOverviewSlot, err error) {\n\n\tmatrix, err := prom_client.MatrixQuery(ctx, realPromql, v1.Range{\n\t\tStart: time.Unix(start, 0),\n\t\tEnd:   time.Unix(end, 0),\n\t\tStep:  time.Duration(step) * time.Second,\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t}\n\n\tfor _, m := range matrix {\n\t\tvar (\n\t\t\tmetricName string\n\t\t\tunit       string\n\t\t\tunitType   string\n\t\t\tother      []float64\n\t\t)\n\n\t\tswitch infoName {\n\t\tcase \"node_load\": //cup平均负载\n\t\t\tmetricName = string(m.Metric[\"__name__\"])\n\t\t\tunit = \"%\"\n\t\t\tunitType = \"\"\n\t\tcase \"Free\": //\n\t\t\tmetricName = \"Free\"\n\t\t\tunit = \"B\"\n\t\t\tunitType = types.ParseUnitTypeByUnit(unit)\n\t\tcase \"Total\":\n\t\t\tmetricName = \"Total\"\n\t\t\tunit = \"B\"\n\t\t\tunitType = types.ParseUnitTypeByUnit(unit)\n\t\tcase \"Available\":\n\t\t\tmetricName = \"Available\"\n\t\t\tunit = \"B\"\n\t\t\tunitType = types.ParseUnitTypeByUnit(unit)\n\t\tcase \"network_receive_bytes\":\n\t\t\tmetricName = \"In:\" + string(m.Metric[\"device\"])\n\t\t\tunit = \"bps\"\n\t\t\tunitType = types.ParseUnitTypeByUnit(unit)\n\t\tcase \"network_transmit_bytes\":\n\t\t\tmetricName = \"Out:\" + string(m.Metric[\"device\"])\n\t\t\tunit = \"bps\"\n\t\t\tunitType = types.ParseUnitTypeByUnit(unit)\n\t\tcase \"network_receive_errs\":\n\t\t\tmetricName = \"Err/Drop In:\" + string(m.Metric[\"device\"])\n\t\t\tunit = \"p/s\"\n\t\t\tunitType = types.TypeNumber\n\t\tcase \"network_transmit_errs\":\n\t\t\tmetricName = \"Err/Drop Out:\" + string(m.Metric[\"device\"])\n\t\t\tunit = \"p/s\"\n\t\t\tunitType = types.TypeNumber\n\t\tcase \"network_receive_drop\":\n\t\t\tmetricName = \"Lose/Drop In:\" + string(m.Metric[\"device\"])\n\t\t\tunit = \"p/s\"\n\t\t\tunitType = types.TypeNumber\n\t\tcase \"network_transmit_drop\":\n\t\t\tmetricName = \"Lose/Drop Out:\" + string(m.Metric[\"device\"])\n\t\t\tunit = \"p/s\"\n\t\t\tunitType = types.TypeNumber\n\t\tcase \"server_disk_avail_every\":\n\t\t\tmetricName = string(m.Metric[\"mountpoint\"])\n\t\t\tunit = \"B\"\n\t\t\tunitType = types.ParseUnitTypeByUnit(unit)\n\t\t}\n\n\t\tfor _, p := range m.Values {\n\t\t\ttimeStamp := p.Timestamp\n\t\t\tvalue := p.Value\n\t\t\tres.Values = append(res.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:     timeStamp.String(),\n\t\t\t\tValue:    value,\n\t\t\t\tUnit:     unit,\n\t\t\t\tUnitType: unitType,\n\t\t\t})\n\t\t\tother = append(other, float64(value))\n\t\t}\n\n\t\tcurrent := m.Values[len(m.Values)-1].Value\n\t\tres.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tName:        metricName,\n\t\t\tValue:       current,\n\t\t\tUnit:        unit,\n\t\t\tUnitType:    unitType,\n\t\t\tKind:        \"\",\n\t\t\tPrognosis:   0, //预测值，values的下标，0则无预测值\n\t\t\tDescription: \"\",\n\t\t}\n\t\tif isAvg == true {\n\t\t\tres.Info.Avg = tools.GetAvg(other)\n\t\t}\n\t\tif isMax == true {\n\t\t\tres.Info.Max = tools.GetMax(other)\n\t\t}\n\t\tif isMin == true {\n\t\t\tres.Info.Min = tools.GetMin(other)\n\t\t}\n\t}\n\treturn res, nil\n}\n\nfunc (s *PhysicalService) PhysicalHardware(ctx context.Context, par dto.PhysicalHardwareReq) (res *dto.PhysicalHardwareRsp, err error) {\n\t//获取服务器详情\n\tdetails, err := s.Store.ServiceRpcClient.PhysicalServerDetails(ctx, &resource_serverv1alpha.DescribePhysicalHostRequest{\n\t\tDeviceSn: par.DeviceSn,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"details %+v\", details)\n\t//获取硬件数据\n\thardware, err := s.Store.AssetPhysicalServerHardwareDao.GetHardware(ctx, par.DeviceSn)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\toutBandIp := []string{details.OutbandIP}\n\tvar (\n\t\tipmiRunStatus []types.BasicOverviewSlot\n\t\tinTemp        []types.BasicOverviewSlot\n\t\toutTemp       []types.BasicOverviewSlot\n\t\tcpuState      []types.BasicOverviewSlot\n\t\tmemState      []types.BasicOverviewSlot\n\t\tdiskState     []types.BasicOverviewSlot\n\t\tpowerState    []types.BasicOverviewSlot\n\t\tfanState      []types.BasicOverviewSlot\n\t\tboardList     []dto.MainBoard\n\t\tcpulist       dto.CpuDetail\n\t\tmemList       dto.MemDetail\n\t\tdiskList      dto.DiskDetail\n\t\tpowerList     []dto.Power\n\t\tfanList       []dto.Fan\n\t\tworkList      []dto.Work\n\t)\n\n\tipmiStatus, err := GetHardware(s.Store, ctx, outBandIp, server.IpmiUp, \"带外连通状态\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tipmiRunStatus = append(ipmiRunStatus, ipmiStatus)\n\n\tinTemps, err := GetHardware(s.Store, ctx, outBandIp, server.InTemp, \"进风口温度\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tinTemp = append(inTemp, inTemps)\n\n\toutTemps, err := GetHardware(s.Store, ctx, outBandIp, server.OutTemp, \"出风口温度\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\toutTemp = append(outTemp, outTemps)\n\n\tipmiCpuStatus, err := GetHardwareCpuHealthStatus(s.Store, ctx, outBandIp, len(hardware.CpuInfo))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcpuState = append(cpuState, ipmiCpuStatus)\n\n\tipmiMemStatus, err := GetHardwareMemHealthStatus(s.Store, ctx, outBandIp, hardware.MemoryInfo)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tmemState = append(memState, ipmiMemStatus)\n\n\tipmiDiskStatus, err := GetHardwareDiskHealthStatus(len(hardware.CpuInfo))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdiskState = append(diskState, ipmiDiskStatus)\n\n\tipmiPowerStatus, err := GetHardwarePowerFanHealthStatus(s.Store, ctx, outBandIp, server.IpmiSensorStatePower, \"电源健康状态\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tpowerState = append(powerState, ipmiPowerStatus)\n\n\tipmiFanStatus, err := GetHardwarePowerFanHealthStatus(s.Store, ctx, outBandIp, server.IpmiSensorStateFan, \"风扇健康状态\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfanState = append(fanState, ipmiFanStatus)\n\n\t// 主板\n\tfor _, v := range hardware.BaseboardInfo {\n\t\tmainBoard := dto.MainBoard{Name: v.Model, State: 0, ProducFactory: v.Manufacturer, Sn: v.SerialNumber}\n\t\tboardList = append(boardList, mainBoard)\n\t}\n\n\t//cpu列表\n\tfor _, v := range hardware.CpuInfo {\n\t\tcpulist.Cores += int(v.CoreCount)\n\t\tcpulist.Sum++\n\t\tcpulist.CpuList = append(cpulist.CpuList, dto.Cpu{\n\t\t\tName:       v.SocketDesignation,\n\t\t\tState:      0,\n\t\t\tUsedRate:   0,\n\t\t\tModel:      v.Model,\n\t\t\tClockSpeed: v.CurrentSpeed,\n\t\t\tMaxClock:   v.MaxSpeed,\n\t\t\tCores:      v.CoreCount,\n\t\t\tThreads:    v.ThreadCount,\n\t\t\tL1Cache:    v.L1iCache + v.L1dCache,\n\t\t\tL2Cache:    v.L2Cache,\n\t\t\tL3Cache:    \"v.L3Cache\",\n\t\t})\n\t}\n\n\t//内存列表\n\tvar memCapTotal int\n\tfor _, v := range hardware.MemoryInfo {\n\t\tmemCapTotal += int(v.Size)\n\t\tmemList.Sum++\n\t\tmemList.MemList = append(memList.MemList, dto.Memory{\n\t\t\tPosition:      v.DeviceLocator,\n\t\t\tModel:         v.PartNumber,\n\t\t\tWidth:         int(v.TotalWidth),\n\t\t\tMaxClock:      int(v.Speed),\n\t\t\tCapacity:      tools.FormatBytes(int(v.Size)),\n\t\t\tTech:          v.FormFactor,\n\t\t\tSn:            v.SerialNumber,\n\t\t\tProducFactory: v.Manufacturer})\n\t}\n\tmemList.Capacity = tools.FormatBytes(memCapTotal)\n\n\t//硬盘列表\n\tvar diskCapTotal int64\n\tfor _, v := range hardware.DiskInfo {\n\t\tvSize := tools.TypeToRealSize(v.Size)\n\t\tdiskCapTotal += vSize\n\t\tdiskList.Sum++\n\t\tvar diskType string\n\t\tif v.DiskType == \"0\" {\n\t\t\tdiskType = \"sdd\"\n\t\t} else if v.DiskType == \"\" {\n\t\t\tdiskType = \"hdd\"\n\t\t}\n\t\tvv := dto.Disk{\n\t\t\tName:          v.DiskName,\n\t\t\tProducFactory: v.Vendor,\n\t\t\tDiskType:      diskType,\n\t\t\tUsedRate:      v.DiskRate,\n\t\t\tModel:         v.Model,\n\t\t\tSn:            v.SerialNumber,\n\t\t\tCapacity:      tools.FormatBytes(int(vSize)),\n\t\t}\n\t\tdiskList.DiskList = append(diskList.DiskList, vv)\n\t}\n\tdiskList.Capacity = tools.FormatBytes(int(diskCapTotal))\n\n\t//work列表\n\tfor _, v := range hardware.WorkInfo {\n\t\tspeed := tools.FormCMDBStorageM(v.Size)\n\t\tworkList = append(workList, dto.Work{\n\t\t\tName:         v.Name,\n\t\t\tHealthStatus: v.HealthStatus,\n\t\t\tProduct:      v.Product,\n\t\t\tVendor:       v.Vendor,\n\t\t\tSpeed:        speed})\n\t}\n\n\t//电源\n\tipmiPower, _ := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.IpmiSensorStatePower](outBandIp))\n\tipmiPowerPromRes, err := prom_client.VectorQuery(ctx, ipmiPower.Items[0].RealPromql)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, v := range ipmiPowerPromRes {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tpowerList = append(powerList, dto.Power{Id: string(v.Metric[\"id\"]), State: float64(v.Value)})\n\t}\n\n\t//风扇\n\tipmiFan, _ := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.IpmiFanSpeedRpm](outBandIp))\n\tipmiFanPromRes, err := prom_client.VectorQuery(ctx, ipmiFan.Items[0].RealPromql)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor _, v := range ipmiFanPromRes {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tfanList = append(fanList, dto.Fan{Name: string(v.Metric[\"name\"]), Speed: float64(v.Value)})\n\t}\n\n\treturn &dto.PhysicalHardwareRsp{\n\t\tIpmiStatus:    ipmiRunStatus,\n\t\tInTemp:        inTemp,\n\t\tOutTemp:       outTemp,\n\t\tCpuState:      cpuState,\n\t\tMemState:      memState,\n\t\tDiskState:     diskState,\n\t\tPowerState:    powerState,\n\t\tFanState:      fanState,\n\t\tMainBoardList: boardList,\n\t\tCpuList:       cpulist,\n\t\tMemList:       memList,\n\t\tDiskList:      diskList,\n\t\tWorkList:      workList,\n\t\tPowerList:     powerList,\n\t\tFanList:       fanList,\n\t}, nil\n}\n\ntype HardwareState struct {\n\tState string `json:\"state\" description:\"状态\"`\n\tName  string `json:\"name\" description:\"名称\"`\n}\n\nvar StateSlice = []HardwareState{\n\t{\n\t\tState: \"0\",\n\t\tName:  \"正常\",\n\t},\n\t{\n\t\tState: \"1\",\n\t\tName:  \"告警\",\n\t},\n\t{\n\t\tState: \"2\",\n\t\tName:  \"故障\",\n\t},\n\t{\n\t\tState: \"3\",\n\t\tName:  \"未知\",\n\t},\n}\n\nfunc GetHardware(s dao.ServerStore, ctx context.Context, ourIpList []string, template, name string) (types.BasicOverviewSlot, error) {\n\tvar res types.BasicOverviewSlot\n\tipmiStatus, err := s.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[template](ourIpList))\n\tif err != nil {\n\t\treturn res, err\n\t}\n\tpromQLStr := ipmiStatus.Items[0].RealPromql\n\tfmt.Println(\"promQLStr\", promQLStr)\n\tpromRes, err := prom_client.VectorQuery(ctx, promQLStr)\n\tif err != nil {\n\t\treturn res, err\n\t}\n\tif len(promRes) != 0 {\n\t\tif !math.IsNaN(float64(promRes[0].Value)) {\n\t\t\tres.Info = types.BasicOverviewSlotInfo{\n\t\t\t\tName:  name,\n\t\t\t\tValue: float64(promRes[0].Value),\n\t\t\t}\n\t\t}\n\t} else {\n\t\tres.Info = types.BasicOverviewSlotInfo{\n\t\t\tName:  name,\n\t\t\tValue: 0,\n\t\t}\n\t}\n\treturn res, nil\n}\n\nfunc GetHardwareCpuHealthStatus(s dao.ServerStore, ctx context.Context, ourIpList []string, cpuNum int) (types.BasicOverviewSlot, error) {\n\n\tvar cpuStateList []float64\n\tslot := types.BasicOverviewSlot{}\n\tslot.Info = types.BasicOverviewSlotInfo{\n\t\tName: \"CPU健康状态\",\n\t}\n\tipmiStatus, err := s.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.IpmiSensorStateCpu](ourIpList))\n\tif err != nil {\n\t\treturn slot, err\n\t}\n\tpromQLStr := ipmiStatus.Items[0].RealPromql\n\tfmt.Println(\"promQLStr\", promQLStr)\n\tpromRes, err := prom_client.VectorQuery(ctx, promQLStr)\n\tif err != nil {\n\t\treturn slot, err\n\t}\n\tfmt.Println(\"promRes\", promRes)\n\tfor _, v := range promRes {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 3 //未知\n\t\t}\n\t\tcpuStateList = append(cpuStateList, float64(v.Value))\n\t}\n\tvar stateMapCpu = map[float64]int{}\n\tif len(cpuStateList) > 0 {\n\t\tfor _, status := range cpuStateList {\n\t\t\tif v, ok := stateMapCpu[status]; ok {\n\t\t\t\tstateMapCpu[status] = v + 1\n\t\t\t} else {\n\t\t\t\tstateMapCpu[status] = 1\n\t\t\t}\n\t\t}\n\t}\n\tfor _, v := range StateSlice {\n\t\tstate, _ := strconv.ParseFloat(v.State, 64)\n\t\tvalue, ok := stateMapCpu[state]\n\t\tif ok {\n\t\t\tslot.Values = append(slot.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:  v.Name,\n\t\t\t\tValue: value,\n\t\t\t})\n\t\t} else { // 未获取到数据\n\t\t\tfillValue := 0\n\t\t\tif v.Name == \"正常\" {\n\t\t\t\tfillValue = cpuNum\n\t\t\t}\n\t\t\tslot.Values = append(slot.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:  v.Name,\n\t\t\t\tCode:  \"false\",\n\t\t\t\tValue: fillValue,\n\t\t\t})\n\t\t}\n\t}\n\n\treturn slot, nil\n}\n\nfunc GetHardwareMemHealthStatus(s dao.ServerStore, ctx context.Context, ourIpList []string, memList []model.MemoryDeviceInfo) (types.BasicOverviewSlot, error) {\n\n\tvar memStateList []float64\n\tslot := types.BasicOverviewSlot{}\n\tslot.Info = types.BasicOverviewSlotInfo{\n\t\tName: \"内存健康状态\",\n\t}\n\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.IpmiSensorStateMem](ourIpList))\n\tif err != nil {\n\t\treturn slot, err\n\t}\n\tpromQLStr := promQL.Items[0].RealPromql\n\tpromRes, _ := prom_client.VectorQuery(ctx, promQLStr)\n\n\tfor _, mem := range memList {\n\t\tfor _, prom := range promRes { // 匹配数据\n\t\t\tif math.IsNaN(float64(prom.Value)) {\n\t\t\t\tprom.Value = 3 //未知\n\t\t\t}\n\t\t\tname := string(prom.Metric[\"name\"])\n\t\t\tif name == mem.DeviceLocator {\n\t\t\t\tmemStateList = append(memStateList, float64(prom.Value))\n\t\t\t}\n\t\t}\n\t}\n\n\tvar stateMapMem = map[float64]int{}\n\tif len(memStateList) > 0 {\n\t\tfor _, status := range memStateList {\n\t\t\tif v, ok := stateMapMem[status]; ok {\n\t\t\t\tstateMapMem[status] = v + 1\n\t\t\t} else {\n\t\t\t\tstateMapMem[status] = 1\n\t\t\t}\n\t\t}\n\t}\n\n\tfor _, v := range StateSlice {\n\t\tstate, _ := strconv.ParseFloat(v.State, 64)\n\t\tvalue, ok := stateMapMem[state]\n\t\tif ok {\n\t\t\tslot.Values = append(slot.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:  v.Name,\n\t\t\t\tValue: value,\n\t\t\t})\n\t\t} else { // 未获取到数据\n\t\t\tfillValue := 0\n\t\t\tif v.Name == \"正常\" {\n\t\t\t\tfillValue = len(memList)\n\t\t\t}\n\t\t\tslot.Values = append(slot.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:  v.Name,\n\t\t\t\tCode:  \"false\",\n\t\t\t\tValue: fillValue,\n\t\t\t})\n\t\t}\n\t}\n\treturn slot, nil\n}\n\nfunc GetHardwareDiskHealthStatus(diskNum int) (types.BasicOverviewSlot, error) {\n\tslot := types.BasicOverviewSlot{}\n\tslot.Info = types.BasicOverviewSlotInfo{\n\t\tName: \"硬盘健康状态\",\n\t}\n\n\tfor _, v := range StateSlice {\n\t\tfillValue := 0\n\t\tif v.Name == \"正常\" {\n\t\t\tfillValue = diskNum\n\t\t}\n\t\tslot.Values = append(slot.Values, types.BasicOverviewSlotValue{\n\t\t\tName:  v.Name,\n\t\t\tCode:  \"false\",\n\t\t\tValue: fillValue,\n\t\t})\n\t}\n\treturn slot, nil\n}\n\nfunc GetHardwarePowerFanHealthStatus(s dao.ServerStore, ctx context.Context, ourIpList []string, template, name string) (types.BasicOverviewSlot, error) {\n\tvar stateList []float64\n\tslot := types.BasicOverviewSlot{}\n\tslot.Info = types.BasicOverviewSlotInfo{\n\t\tName: name,\n\t}\n\tipmiStatus, err := s.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[template](ourIpList))\n\tif err != nil {\n\t\treturn slot, err\n\t}\n\tpromQLStr := ipmiStatus.Items[0].RealPromql\n\tfmt.Println(\"promQLStr\", promQLStr)\n\tpromRes, err := prom_client.VectorQuery(ctx, promQLStr)\n\n\tif err != nil {\n\t\treturn slot, err\n\t}\n\tfor _, v := range promRes {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 3 //未知\n\t\t}\n\t\tstateList = append(stateList, float64(v.Value))\n\t}\n\tvar stateMap = map[float64]int{}\n\tif len(stateList) > 0 {\n\t\tfor _, status := range stateList {\n\t\t\tif v, ok := stateMap[status]; ok {\n\t\t\t\tstateMap[status] = v + 1\n\t\t\t} else {\n\t\t\t\tstateMap[status] = 1\n\t\t\t}\n\t\t}\n\t}\n\tfor _, v := range StateSlice {\n\t\tstate, _ := strconv.ParseFloat(v.State, 64)\n\t\tvalue, ok := stateMap[state]\n\t\tif ok {\n\t\t\tslot.Values = append(slot.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:  v.Name,\n\t\t\t\tValue: value,\n\t\t\t})\n\t\t} else { // 未获取到数据\n\t\t\tslot.Values = append(slot.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:  v.Name,\n\t\t\t\tCode:  \"false\",\n\t\t\t\tValue: 0,\n\t\t\t})\n\t\t}\n\t}\n\treturn slot, nil\n}\n\nfunc (s *PhysicalService) GetMonitoringStatus(ctx context.Context, par dto.GetMonitoringStatusReq) (*dto.GetMonitoringStatusRsp, error) {\n\t// 监控状态\n\tvar ips string\n\tif par.ResourceType == \"Server\" {\n\t\tips = par.Ip + \":9100\"\n\t} else {\n\t\tips = par.Ip\n\t}\n\tupSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.Status]([]string{ips}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tup, err := prom_client.VectorQuery(ctx, upSp.Items[0].RealPromql)\n\tvar flag string\n\tfor _, v := range up {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tif float64(v.Value) == 1 {\n\t\t\tflag = \"up\"\n\t\t} else {\n\t\t\tflag = \"down\"\n\t\t}\n\t}\n\tres := dto.GetMonitoringStatusRsp{\n\t\tIp:           par.Ip,\n\t\tResourceType: par.ResourceType,\n\t\tRunStatus:    flag,\n\t}\n\n\treturn &res, nil\n\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/rpc/server.go\n```golang\npackage rpc\n\nimport (\n\t\"context\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/server/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/server/dto\"\n\t\"github.com/jinzhu/copier\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\nfunc (n *serverRpcServer) PhysicalList(ctx context.Context, req *pb.PhysicalListReq) (*pb.PhysicalListRsp, error) {\n\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagRequestIn, map[string]interface{}{\"params\": req})\n\tvar par dto.PhysicalListReq\n\tif err := copier.Copy(&par, req); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"copy err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tres, err := n.physicalSvc.PhysicalList(ctx, par)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"call service err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tresp := &pb.PhysicalListRsp{}\n\tcopier.Copy(&resp, res)\n\treturn resp, nil\n}\n\nfunc (n *serverRpcServer) PhysicalHardware(ctx context.Context, req *pb.PhysicalHardwareReq) (*pb.PhysicalHardwareRsp, error) {\n\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagRequestIn, map[string]interface{}{\"params\": req})\n\tvar par dto.PhysicalHardwareReq\n\tif err := copier.Copy(&par, req); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"copy err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tres, err := n.physicalSvc.PhysicalHardware(ctx, par)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"call service err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tresp := &pb.PhysicalHardwareRsp{}\n\tif err := copier.CopyWithOption(&resp, res, copier.Option{IgnoreEmpty: true}); err != nil { // 忽略nil\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"copy err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\treturn resp, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/rpc/rpcserver.go\n```golang\npackage rpc\n\nimport (\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/server/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/server/service\"\n)\n\ntype serverRpcServer struct {\n\tphysicalSvc *service.PhysicalService\n\tpb.UnimplementedPhysicalServiceServer\n}\n\nfunc NewServerRpcServer() *serverRpcServer {\n\treturn &serverRpcServer{\n\t\tphysicalSvc: service.NewPhysicalService(),\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/server/rpc/server_test.go\n```golang\npackage rpc\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\tmonitor_server1alpha \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/server/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/server/service\"\n)\n\nfunc Test_serverRpcServer_PhysicalList(t *testing.T) {\n\ttype fields struct {\n\t\tphysicalSvc                        *service.PhysicalService\n\t\tUnimplementedPhysicalServiceServer monitor_server1alpha.UnimplementedPhysicalServiceServer\n\t}\n\ttype args struct {\n\t\tctx context.Context\n\t\treq *monitor_server1alpha.PhysicalListReq\n\t}\n\ttests := []struct {\n\t\tname    string\n\t\tfields  fields\n\t\targs    args\n\t\twant    *monitor_server1alpha.PhysicalListRsp\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname: \"Test PhysicalList\",\n\t\t\tfields: fields{\n\t\t\t\tphysicalSvc: service.NewPhysicalService(),\n\t\t\t},\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\treq: &monitor_server1alpha.PhysicalListReq{\n\t\t\t\t\tPageNo:   1,\n\t\t\t\t\tPageSize: 1000,\n\t\t\t\t\tQuery:    map[string]string{\"ManageIP\": \"10.175.129.1\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &serverRpcServer{\n\t\t\t\tphysicalSvc:                        tt.fields.physicalSvc,\n\t\t\t\tUnimplementedPhysicalServiceServer: tt.fields.UnimplementedPhysicalServiceServer,\n\t\t\t}\n\t\t\tgot, err := n.PhysicalList(tt.args.ctx, tt.args.req)\n\t\t\tif (err != nil) != tt.wantErr {\n\t\t\t\tt.Errorf(\"PhysicalList() error = %v, wantErr %v\", err, tt.wantErr)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tt.Log(got)\n\t\t})\n\t}\n}\n\nfunc Test_serverRpcServer_PhysicalHardware(t *testing.T) {\n\ttype fields struct {\n\t\tphysicalSvc                        *service.PhysicalService\n\t\tUnimplementedPhysicalServiceServer monitor_server1alpha.UnimplementedPhysicalServiceServer\n\t}\n\ttype args struct {\n\t\tctx context.Context\n\t\treq *monitor_server1alpha.PhysicalHardwareReq\n\t}\n\ttests := []struct {\n\t\tname    string\n\t\tfields  fields\n\t\targs    args\n\t\twant    *monitor_server1alpha.PhysicalHardwareRsp\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname: \"Test PhysicalHardware\",\n\t\t\tfields: fields{\n\t\t\t\tphysicalSvc: service.NewPhysicalService(),\n\t\t\t},\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\treq: &monitor_server1alpha.PhysicalHardwareReq{\n\t\t\t\t\tDeviceSn: \"9800165603762656\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &serverRpcServer{\n\t\t\t\tphysicalSvc:                        tt.fields.physicalSvc,\n\t\t\t\tUnimplementedPhysicalServiceServer: tt.fields.UnimplementedPhysicalServiceServer,\n\t\t\t}\n\t\t\tgot, err := n.PhysicalHardware(tt.args.ctx, tt.args.req)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"PhysicalHardware() error = %v, wantErr %v\", err, tt.wantErr)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tt.Log(got)\n\t\t})\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/dto/response.go\n```golang\npackage dto\n\nimport (\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n)\n\n// ComputePoolOverviewAlertRsp 计算资源池概览告警响应\ntype ComputePoolOverviewAlertRsp struct {\n\tAlerts []types.BasicOverviewSlot `json:\"Alerts\"`\n}\n\n// ComputePoolOverviewMonitorRsp 计算资源池概览监控响应\ntype ComputePoolOverviewMonitorRsp struct {\n\tMonitors []types.BasicOverviewSlot `json:\"Monitors\"`\n}\n\n// ComputePoolOverviewLineRsp 计算资源池概览线图响应\ntype ComputePoolOverviewLineRsp struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\n// ComputePoolListRsp 计算资源池列表响应\ntype ComputePoolListRsp struct {\n\tTotalCount int                   `json:\"TotalCount\"`\n\tPageNo     int                   `json:\"PageNo\"`\n\tPageSize   int                   `json:\"PageSize\"`\n\tDataList   []*ComputePoolMonitor `json:\"DataList\"`\n}\n\ntype ComputePoolDetailLineRsp struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\ntype ComputePoolMonitor struct {\n\tId              string    `json:\"Id\"`\n\tName            string    `json:\"Name\"`\n\tRegion          string    `json:\"Region\"`\n\tAz              string    `json:\"Az\"`\n\tCpuTotal        int       `json:\"CpuTotal\"`\n\tCpuRemain       int       `json:\"CpuRemain\"`\n\tCpuRate         float64   `json:\"CpuRate\"`\n\tCpuUsedTotal    int       `json:\"CpuUsedTotal\"`\n\tMemoryTotal     float64   `json:\"MemoryTotal\"`\n\tMemoryRemain    float64   `json:\"MemoryRemain\"`\n\tMemoryRate      float64   `json:\"MemoryRate\"`\n\tMemoryUsedTotal float64   `json:\"MemoryUsedTotal\"`\n\tDiskRate        float64   `json:\"DiskRate\"`\n\tHostCount       int       `json:\"HostCount\"`\n\tVmCount         int       `json:\"VmCount\"`\n\tAlertCount      int       `json:\"AlertCount\"`\n\tCreateTime      time.Time `json:\"CreateTime\"`\n\tPType           string    `json:\"PType\"`\n}\n\n// VmOverviewMonitorRsp 云主机概览监控响应\ntype VmOverviewMonitorRsp struct {\n\tTotalCount int64                     `json:\"TotalCount\"`\n\tBusiness   []types.BasicOverviewSlot `json:\"Business\"`\n\tPlatform   []types.BasicOverviewSlot `json:\"Platform\"`\n}\n\n// VmOverviewTopRsp 云主机概览TopK响应\ntype VmOverviewTopRsp struct {\n\tTops []types.BasicOverviewSlot `json:\"Tops\"`\n}\n\n// VmDetailMetricsRsp 云主机详情指标响应\ntype VmDetailMetricsRsp struct {\n\tMetrics []types.BasicOverviewSlot `json:\"Metrics\"`\n}\n\n// VmDetailMetricLinesRsp 云主机详情指标线响应\ntype VmDetailMetricLinesRsp struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/dto/request.go\n```golang\npackage dto\n\n// CommonListReq 列表基础请求\ntype CommonListReq struct {\n\tPageNo    int    `json:\"PageNo\"`\n\tPageSize  int    `json:\"PageSize\" binding:\"lte=1000\"`\n\tRegion    string `json:\"Region\"`\n\tOrderCode string `json:\"OrderCode\"`\n\tOrderType string `json:\"OrderType\"`\n\tQuery     Query  `json:\"Query\"`\n}\n\ntype Query map[string]string\n\n// ComputePoolOverviewAlertReq  计算资源池概览告警请求\ntype ComputePoolOverviewAlertReq struct {\n\tRegion string `json:\"Region\"`\n\tAz     string `json:\"Az\"`\n}\n\n// ComputePoolOverviewMonitorReq 计算资源池概览监控请求\ntype ComputePoolOverviewMonitorReq struct {\n\tRegion string `json:\"Region\"`\n\tAz     string `json:\"Az\"`\n}\n\n// ComputePoolOverviewLineReq 计算资源池概览线图请求\ntype ComputePoolOverviewLineReq struct {\n\tRegion        string `json:\"Region\"`\n\tAz            string `json:\"Az\"`\n\tMetricName    string `json:\"MetricName\"`\n\tStart         int64  `json:\"Start\"`\n\tEnd           int64  `json:\"End\"`\n\tHasPrediction bool   `json:\"HasPrediction\"`\n}\n\n// ComputePoolListReq 计算资源池监控列表请求\ntype ComputePoolListReq struct {\n\tPageNo    int      `json:\"PageNo\"`\n\tPageSize  int      `json:\"PageSize\" binding:\"lte=1000\"`\n\tRegion    string   `json:\"Region\"`\n\tOrderCode string   `json:\"OrderCode\"`\n\tOrderType string   `json:\"OrderType\"`\n\tQuery     Query    `json:\"Query\"`\n\tName      string   `json:\"Name\"`\n\tAz        []string `json:\"Az\"`\n}\n\ntype ComputePoolDetailLineReq struct {\n\tStart      int64  `json:\"Start\"`\n\tEnd        int64  `json:\"End\"`\n\tRegion     string `json:\"Region\"`\n\tName       string `json:\"Name\"`\n\tMetricName string `json:\"MetricName\"`\n}\n\n// VmOverviewMonitorReq 云主机概览监控请求\ntype VmOverviewMonitorReq struct {\n\tRegion string `json:\"Region\"`\n\tAz     string `json:\"Az\"`\n}\n\n// VmOverviewTopReq 云主机概览TopK请求\ntype VmOverviewTopReq struct {\n\tRegion string   `json:\"Region\"`\n\tAz     string   `json:\"Az\"`\n\tName   []string `json:\"Name\"`\n\tTopK   int      `json:\"TopK\"`\n\tStart  int64    `json:\"Start\"`\n\tEnd    int64    `json:\"End\"`\n}\n\n// VmDetailMetricsReq 云主机详情指标请求\ntype VmDetailMetricsReq struct {\n\tId         string   `json:\"Id\"`\n\tMetricName []string `json:\"MetricName\"`\n}\n\n// VmDetailMetricLinesReq 云主机详情指标线请求\ntype VmDetailMetricLinesReq struct {\n\tId         string   `json:\"Id\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n\tMetricName []string `json:\"MetricName\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/dao/metric_top.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/gormSerializer\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/network/model\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/schema\"\n)\n\ntype MetricTopDao struct {\n\tdb *gorm.DB\n}\n\ntype QueryParams struct {\n\tRegion string\n\tAz     string\n\tCode   string\n}\n\nfunc NewMetricTopDao() *MetricTopDao {\n\tschema.RegisterSerializer(\"json_str\", gormSerializer.JSONSerializer{})\n\treturn &MetricTopDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\nfunc (m *MetricTopDao) GetOneByCode(q QueryParams) (model.MonitorTop, error) {\n\tvar data model.MonitorTop\n\tif err := m.db.Where(\"region = ? AND az = ? AND code = ?\", q.Region, q.Az, q.Code).First(&data).Error; err != nil {\n\t\treturn data, err\n\t}\n\treturn data, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/dao/store.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tresource_computev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_compute/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n)\n\ntype Store interface {\n\t// DAO 服务\n\tMetric() *MetricDao\n\tMetricTop() *MetricTopDao\n\n\t// RPC 服务\n\tAlarmRpcClient() alarmv1alpha.AlarmServiceClient\n\tComputePoolRpcClient() resource_computev1alpha.ComputePoolServiceClient\n\tVmRpcClient() resource_computev1alpha.VmServiceClient\n\tServerRpcClient() resource_serverv1alpha.ResourceServiceClient\n}\n\ntype computeStore struct {\n}\n\nfunc NewComputeStore() *computeStore {\n\treturn &computeStore{}\n}\n\nfunc (n *computeStore) Metric() *MetricDao {\n\treturn NewMetricDao()\n}\n\nfunc (n *computeStore) MetricTop() *MetricTopDao {\n\treturn NewMetricTopDao()\n}\n\nfunc (n *computeStore) AlarmRpcClient() alarmv1alpha.AlarmServiceClient {\n\talarmAddr := lib.GetStringConf(\"base.grpc.alarm\")\n\talarmConn, err := grpcx.NewGrpcClientConn(alarmAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect alarm grpc server error, %s\": err.Error()})\n\t}\n\treturn alarmv1alpha.NewAlarmServiceClient(alarmConn)\n}\n\nfunc (n *computeStore) ComputePoolRpcClient() resource_computev1alpha.ComputePoolServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn resource_computev1alpha.NewComputePoolServiceClient(resourceConn)\n}\n\nfunc (n *computeStore) VmRpcClient() resource_computev1alpha.VmServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn resource_computev1alpha.NewVmServiceClient(resourceConn)\n}\n\nfunc (n *computeStore) ServerRpcClient() resource_serverv1alpha.ResourceServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn resource_serverv1alpha.NewResourceServiceClient(resourceConn)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/dao/metric.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/model\"\n\t\"gorm.io/gorm\"\n)\n\ntype MetricDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewMetricDao() *MetricDao {\n\treturn &MetricDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\nfunc (m *MetricDao) GetOneByCode(code string) (*model.MonitorTsdbMetrics, error) {\n\tcontent := model.MonitorTsdbMetrics{}\n\terr := m.db.Where(\"code = ?\", code).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &content, nil\n}\n\n// get list by codes\nfunc (m *MetricDao) GetListByCodes(codes []string) ([]model.MonitorTsdbMetrics, error) {\n\tvar content []model.MonitorTsdbMetrics\n\terr := m.db.Where(\"code in (?)\", codes).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn content, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/dao/mock.go\n```golang\npackage dao\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\n\tcomputePoolv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_compute/v1alpha/gen\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n)\n\ntype MockComputeStore struct{}\n\nfunc findProjectRoot(startDir string) (string, error) {\n\t_, err := os.Stat(filepath.Join(startDir, \"go.mod\"))\n\tif err == nil {\n\t\treturn startDir, nil\n\t}\n\t// 获取上级目录\n\tparentDir := filepath.Dir(startDir)\n\tif startDir == parentDir {\n\t\treturn \"\", fmt.Errorf(\"no go.mod found\")\n\t}\n\treturn findProjectRoot(parentDir)\n}\n\nfunc NewMockComputeStore() *MockComputeStore {\n\tdir, _ := os.Getwd()\n\troot, _ := findProjectRoot(dir)\n\tif err := lib.InitModuleYaml(root+\"/conf/\", []string{\"base\", \"mysql\", \"redis\"}); err != nil {\n\t\tlog.Println(err)\n\t}\n\treturn &MockComputeStore{}\n}\n\nfunc (n *MockComputeStore) Metric() *MetricDao {\n\treturn NewMetricDao()\n}\n\nfunc (n *MockComputeStore) MetricTop() *MetricTopDao {\n\treturn NewMetricTopDao()\n}\n\nfunc (n *MockComputeStore) AlarmRpcClient() alarmv1alpha.AlarmServiceClient {\n\talarmAddr := lib.GetStringConf(\"base.grpc.alarm\")\n\talarmConn, err := grpcx.NewGrpcClientConn(alarmAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect alarm grpc server error, %s\": err.Error()})\n\t}\n\treturn alarmv1alpha.NewAlarmServiceClient(alarmConn)\n}\n\nfunc (n *MockComputeStore) ComputePoolRpcClient() computePoolv1alpha.ComputePoolServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn computePoolv1alpha.NewComputePoolServiceClient(resourceConn)\n}\n\nfunc (n *MockComputeStore) VmRpcClient() computePoolv1alpha.VmServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn computePoolv1alpha.NewVmServiceClient(resourceConn)\n}\n\nfunc (n *MockComputeStore) ServerRpcClient() resource_serverv1alpha.ResourceServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn resource_serverv1alpha.NewResourceServiceClient(resourceConn)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/utils/tools.go\n```golang\npackage utils\n\nfunc TimeToStepForInt(fileSize int64) (size int) {\n\t//处理的单位是秒\n\tif fileSize >= 0 {\n\t\tif fileSize <= (3600.0 * 3.0) {\n\t\t\treturn 60 //1m\n\t\t} else if fileSize <= (3600.0 * 24.0 * 7) {\n\t\t\treturn 3600 //1h\n\t\t} else {\n\t\t\treturn 86400 //1d\n\t\t}\n\t}\n\treturn 0\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/utils/serializer/register.go\n```golang\npackage serializer\n\nimport (\n\t\"gorm.io/gorm/schema\"\n)\n\nfunc RegisterSerializer() {\n\tschema.RegisterSerializer(\"json_str\", JSONSerializer{})\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/utils/serializer/json.go\n```golang\npackage serializer\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"reflect\"\n\n\t\"gorm.io/gorm/schema\"\n)\n\n// JSONSerializer json序列化器\ntype JSONSerializer struct {\n}\n\n// 实现 Scan 方法\nfunc (JSONSerializer) Scan(ctx context.Context, field *schema.Field, dst reflect.Value, dbValue interface{}) (err error) {\n\tfieldValue := reflect.New(field.FieldType)\n\n\tif dbValue != nil {\n\t\tvar bytes []byte\n\t\tswitch v := dbValue.(type) {\n\t\tcase []byte:\n\t\t\tbytes = v\n\t\tcase string:\n\t\t\tbytes = []byte(v)\n\t\tdefault:\n\t\t\treturn fmt.Errorf(\"failed to unmarshal JSONB value: %#v\", dbValue)\n\t\t}\n\n\t\terr = json.Unmarshal(bytes, fieldValue.Interface())\n\t}\n\n\tfield.ReflectValueOf(ctx, dst).Set(fieldValue.Elem())\n\treturn\n}\n\n// 实现 Value 方法\nfunc (JSONSerializer) Value(ctx context.Context, field *schema.Field, dst reflect.Value, fieldValue interface{}) (interface{}, error) {\n\treturn json.Marshal(fieldValue)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/utils/convert/convert.go\n```golang\npackage convert\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc Decimal(value float64) float64 {\n\tvalue, _ = strconv.ParseFloat(fmt.Sprintf(\"%.2f\", value), 64)\n\treturn value\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/controller/vm.go\n```golang\npackage controller\n\nimport (\n\t\"errors\"\n\t\"net/http\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/constant\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype VmController struct {\n\tsvc service.VmService\n}\n\nfunc NewVmController() *VmController {\n\treturn &VmController{\n\t\tsvc: service.NewVmService(),\n\t}\n}\n\n// OverviewMonitor godoc\n// @Summary      Vm Monitor Overview\n// @Description  Compute Product Vm Monitor Overview\n// @Tags         vm\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.VmOverviewMonitorReq true \"Vm Overview Monitor Request\"\n// @Success      200  {object}  dto.VmOverviewMonitorRsp\n// @Router       /compute/product/vm/overview_monitor [POST]\nfunc (n *VmController) OverviewMonitor(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.VmOverviewMonitorReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewMonitor(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云主机监控概览信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// OverviewTop godoc\n// @Summary      Vm TopK Overview\n// @Description  Compute Product Vm topK Overview\n// @Tags         vm\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.VmOverviewTopReq true \"Vm Overview TopK Request\"\n// @Success      200  {object}  dto.VmOverviewTopRsp\n// @Router       /compute/product/vm/overview_top [POST]\nfunc (n *VmController) OverviewTop(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.VmOverviewTopReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewTop(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tif errors.Is(err, constant.GetTopDataErrorWithRegion) {\n\t\t\tresponse.Success(c, res)\n\t\t}\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云主机Top概览信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailMetrics godoc\n// @Summary      Vm Detail Metrics\n// @Description  Compute Product Vm detail Metrics\n// @Tags         vm\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.VmDetailMetricsReq true \"Vm Detail Metrics Request\"\n// @Success      200  {object}  dto.VmDetailMetricsRsp\n// @Router       /compute/product/vm/detail_metrics [POST]\nfunc (n *VmController) DetailMetrics(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.VmDetailMetricsReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.DetailMetrics(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云主机详情指标信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailMetricLines godoc\n// @Summary      Vm Detail MetricLines\n// @Description  Compute Product Vm detail MetricLines\n// @Tags         vm\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.VmDetailMetricLinesReq true \"Vm Detail Metrics Request\"\n// @Success      200  {object}  dto.VmDetailMetricLinesRsp\n// @Router       /compute/product/vm/detail_metric_lines [POST]\nfunc (n *VmController) DetailMetricLines(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.VmDetailMetricLinesReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.DetailMetricLines(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云主机详情指标线信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/controller/compute_pool.go\n```golang\npackage controller\n\nimport (\n\t\"net/http\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype ComputePoolController struct {\n\tsvc service.ComputePoolService\n}\n\nfunc NewComputePoolController() *ComputePoolController {\n\treturn &ComputePoolController{\n\t\tsvc: service.NewComputePoolService(),\n\t}\n}\n\n// OverviewAlert godoc\n// @Summary      ComputePool Alert Overview\n// @Description  Get ComputePool Alert Overview\n// @Tags         computePool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ComputePoolOverviewAlertReq true \"ComputePool Overview Alert Request\"\n// @Success      200  {object}  dto.ComputePoolOverviewAlertRsp\n// @Router       /compute/compute_pool/overview_alert [POST]\nfunc (n *ComputePoolController) OverviewAlert(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ComputePoolOverviewAlertReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewAlert(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览告警信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// OverviewMonitor godoc\n// @Summary      ComputePool Monitor Overview\n// @Description  Get ComputePool Monitor Overview\n// @Tags         computePool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ComputePoolOverviewMonitorReq true \"ComputePool Overview Monitor Request\"\n// @Success      200  {object}  dto.ComputePoolOverviewMonitorRsp\n// @Router       /compute/compute_pool/overview_monitor [POST]\nfunc (n *ComputePoolController) OverviewMonitor(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ComputePoolOverviewMonitorReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewMonitor(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览监控信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// OverviewLine godoc\n// @Summary      ComputePool Monitor OverviewLine\n// @Description  Get ComputePool Monitor OverviewLine\n// @Tags         computePool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ComputePoolOverviewLineReq true \"ComputePool Overview Line Request\"\n// @Success      200  {object}  dto.ComputePoolOverviewLineRsp\n// @Router       /compute/compute_pool/overview_line [POST]\nfunc (n *ComputePoolController) OverviewLine(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ComputePoolOverviewLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.OverviewLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取概览监控线信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// List godoc\n// @Summary      ComputePool Monitor List\n// @Description  Get ComputePool Monitor List\n// @Tags         computePool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ComputePoolListReq true \"ComputePool List Request\"\n// @Success      200  {object}  dto.ComputePoolListRsp\n// @Router       /compute/compute_pool/list [POST]\nfunc (n *ComputePoolController) List(c *gin.Context) {\n\t// 绑定参数\n\tvar params dto.ComputePoolListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.List(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取计算资源池列表信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailLine godoc\n// @Summary      ComputePool Monitor DetailLine\n// @Description  Get ComputePool Monitor DetailLine\n// @Tags         computePool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ComputePoolDetailLineReq true \"ComputePool Detail Line Request\"\n// @Success      200  {object}  dto.ComputePoolDetailLineRsp\n// @Router       /compute/compute_pool/detail_line [POST]\nfunc (n *ComputePoolController) DetailLine(c *gin.Context) {\n\tvar params dto.ComputePoolDetailLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := n.svc.DetailLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取计算资源池列表信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/constant/constant.go\n```golang\npackage constant\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/vm\"\n\t\"github.com/pkg/errors\"\n)\n\nvar (\n\tVmStatusMap = map[string]string{\n\t\t\"shutoff\":     \"关闭\",\n\t\t\"active\":      \"运行中\",\n\t\t\"error\":       \"失败\",\n\t\t\"build\":       \"创建中\",\n\t\t\"hard_reboot\": \"强制重启\",\n\t\t\"deleting\":    \"删除中\",\n\t\t\"suspended\":   \"挂起\",\n\t}\n)\n\nvar (\n\tVmMetricTopMap = map[string]string{\n\t\tvm.CpuLoad:    \"cpu使用率\",\n\t\tvm.MemoryLoad: \"内存使用率\",\n\t\tvm.DiskLoad:   \"磁盘使用率\",\n\t\tvm.NetIn:      \"网卡流入流量\",\n\t\tvm.NetOut:     \"网卡流出流量\",\n\t}\n)\n\nvar (\n\tVmMetricMap = map[string]string{\n\t\tvm.CpuModeSystem:   \"cpu.system\",\n\t\tvm.CpuModeUser:     \"cpu.user\",\n\t\tvm.CpuModeSoftIrq:  \"cpu.soft_irq\",\n\t\tvm.CpuModeIrq:      \"cpu.irq\",\n\t\tvm.CpuModeIdle:     \"cpu.idle\",\n\t\tvm.CpuModeIOWait:   \"cpu.io_wait\",\n\t\tvm.CpuModeNice:     \"cpu.nice\",\n\t\tvm.CpuModeSteal:    \"cpu.steal\",\n\t\tvm.MemorySizeTotal: \"mem.memTotal\",\n\t\tvm.MemorySizeFree:  \"mem.memFree\",\n\t\tvm.NetReceive:      \"net.receive\",\n\t\tvm.NetTransmit:     \"net.transmit\",\n\t\tvm.NetPacketIn:     \"net.packetIn\",\n\t\tvm.NetPacketOut:    \"net.packetOut\",\n\t\tvm.DiskUsedRate:    \"disk.used_rate\",\n\t\tvm.DiskReadBps:     \"disk.vda.read\",\n\t\tvm.DiskWriteBps:    \"disk.vda.write\",\n\t\tvm.DiskReadOps:     \"disk.vdb.read\",\n\t\tvm.DiskWriteOps:    \"disk.vdb.write\",\n\t}\n)\n\nvar (\n\tGetTopDataErrorWithRegion = errors.New(\"获取top数据失败，因为区域信息错误\")\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/model/monitor_tsdb_metrics.go\n```golang\npackage model\n\nimport (\n\t\"time\"\n)\n\ntype MonitorTsdbMetrics struct {\n\tID           int       `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`\n\tProductLine  string    `gorm:\"column:product_line;NOT NULL\"`  // 产品线\n\tCode         string    `gorm:\"column:code;NOT NULL\"`          // 唯一标识\n\tName         string    `gorm:\"column:name;NOT NULL\"`          // 中文名\n\tMetricPrefix string    `gorm:\"column:metric_prefix;NOT NULL\"` // metric前缀\n\tUnit         string    `gorm:\"column:unit;NOT NULL;default:''\"`\n\tCreatedAt    time.Time `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"`\n\tUpdatedAt    time.Time `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"`\n\tDeletedAt    time.Time `gorm:\"column:deleted_at\"`\n}\n\nfunc (m *MonitorTsdbMetrics) TableName() string {\n\treturn \"monitor_tsdb_metrics\"\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/model/monitor_top.go\n```golang\npackage model\n\nimport (\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n)\n\n// region + az + code 唯一\ntype MonitorTop struct {\n\tID                 int        `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`        // 主键\n\tProductLine        string     `gorm:\"column:product_line;NOT NULL\"`                // 产品线\n\tRegion             string     `gorm:\"column:region;NOT NULL\"`                      // 区域\n\tAz                 string     `gorm:\"column:az;NOT NULL\"`                          // 可用区\n\tCode               string     `gorm:\"column:code;NOT NULL\"`                        // top项的唯一标识\n\tName               string     `gorm:\"column:name;NOT NULL\"`                        // 中文名\n\tHalfHour           []TopValue `gorm:\"column:half_hour;serializer:json_str\"`        // 0.5h top10数据\n\tHalfHourUpdateAt   time.Time  `gorm:\"column:half_hour_update_at\"`                  // 0.5h更新时间\n\tOneHour            []TopValue `gorm:\"column:one_hour;serializer:json_str\"`         // 1h top10数据\n\tOneHourUpdateAt    time.Time  `gorm:\"column:one_hour_update_at\"`                   // 1h更新时间\n\tThreeHours         []TopValue `gorm:\"column:three_hours;serializer:json_str\"`      // 3h top10数据\n\tThreeHoursUpdateAt time.Time  `gorm:\"column:three_hours_update_at\"`                // 3h更新时间\n\tOneDay             []TopValue `gorm:\"column:one_day;serializer:json_str\"`          // 1d top10数据\n\tOneDayUpdateAt     time.Time  `gorm:\"column:one_day_update_at\"`                    // 1d更新时间\n\tSevenDays          []TopValue `gorm:\"column:seven_days;serializer:json_str\"`       // 7d top10数据\n\tSevenDaysUpdateAt  time.Time  `gorm:\"column:seven_days_update_at\"`                 // 7d更新时间\n\tThirtyDays         []TopValue `gorm:\"column:thirty_days;serializer:json_str\"`      // 30d top10数据\n\tThirtyDaysUpdateAt time.Time  `gorm:\"column:thirty_days_update_at\"`                // 30d更新时间\n\tCreatedAt          time.Time  `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"` // 创建时间\n\tUpdatedAt          time.Time  `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"` // 更新时间\n\tDeletedAt          time.Time  `gorm:\"column:deleted_at\"`                           // 删除时间\n}\n\ntype TopValue struct {\n\tId    string  //实例唯一id\n\tName  string  //名称\n\tValue float64 //值\n}\n\nfunc (m *MonitorTop) TableName() string {\n\treturn \"monitor_top\"\n}\n\nfunc (m *MonitorTop) ParseIntervalData(start, end int64) []TopValue {\n\tvar intervalData []TopValue\n\tintervalStr := opentsdb.ParseTimeInterval(start, end)\n\tswitch intervalStr {\n\tcase \"0.5h\":\n\t\tintervalData = m.HalfHour\n\tcase \"1h\":\n\t\tintervalData = m.OneHour\n\tcase \"3h\":\n\t\tintervalData = m.ThreeHours\n\tcase \"1d\":\n\t\tintervalData = m.OneDay\n\tcase \"7d\":\n\t\tintervalData = m.SevenDays\n\tcase \"30d\":\n\t\tintervalData = m.ThirtyDays\n\t}\n\treturn intervalData\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/model/compute_pool.go\n```golang\npackage model\n\ntype AggragateMonitor struct {\n\tId                  int     `json:\"id\"`\n\tName                string  `json:\"name\"`\n\tRegion              string  `json:\"region\"`\n\tAz                  string  `json:\"az\"`\n\tVcpuTotal           float64 `json:\"vcpuTotal\"`\n\tVcpuAvaiLable       float64 `json:\"vcpuAvaiLable\"`\n\tVcpuUtilizationRate float64 `json:\"vcpuUtilizationRate\"`\n\tVcpuUsedTotal       float64 `json:\"vcpuUsedTotal\"`\n\tMemTotal            float64 `json:\"memTotal\"`\n\tMemAvaiLable        float64 `json:\"memAvaiLable\"`\n\tMemUtilizationRate  float64 `json:\"memUtilizationRate\"`\n\tMemUsedTotal        float64 `json:\"memUsedTotal\"`\n\tDiskUtilizationRate float64 `json:\"diskUtilizationRate\"`\n\tHostCount           int     `json:\"hostCount\"`\n\tVmCount             int     `json:\"vmCount\"`\n\tAlertCount          int     `json:\"alertCount\"`\n\tCreateTime          int64   `json:\"createTime\"` //秒级时间戳\n}\n\n// 临时用 后面玉冰姐写好了服务器接口 直接删掉\ntype Host struct {\n\tId               string `json:\"id\"`\n\tName             string `json:\"name\"`\n\tStatus           string `json:\"status\"`\n\tResourcePoolType string `json:\"resourcePoolType\"`\n\tResourcePool     string `json:\"resourcePool\"`\n\tService          string `json:\"service\"`\n\tRegion           string `json:\"region\"`\n\tAz               string `json:\"az\"`\n\tRoom             string `json:\"room\"`\n\tRack             string `json:\"rack\"`\n\t//RackPosition     string `json:\"rackPosition\"`\n\tSN string `json:\"sn\"`\n\tIP string `json:\"ip\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/service/compute_pool_test.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"testing\"\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dto\"\n\t\"go.uber.org/mock/gomock\"\n)\n\nfunc Test_computePoolService_OverviewAlert(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\ttype args struct {\n\t\tctx context.Context\n\t\tpar dto.ComputePoolOverviewAlertReq\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"全部区域\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.ComputePoolOverviewAlertReq{\n\t\t\t\t\tRegion: \"\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"单region az\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.ComputePoolOverviewAlertReq{\n\t\t\t\t\tRegion: \"cn-shanghai-2\",\n\t\t\t\t\tAz:     \"cn-shanghai-2a\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &computePoolService{\n\t\t\t\tStore: dao.NewComputeStore(),\n\t\t\t}\n\t\t\tgot, err := n.OverviewAlert(tt.args.ctx, tt.args.par)\n\n\t\t\tt.Logf(\"Test Case: %s, Got: %v, Error: %v\", tt.name, got, err)\n\t\t})\n\t}\n}\n\nfunc Test_computePoolService_OverviewMonitor(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\ttype args struct {\n\t\tctx context.Context\n\t\tpar dto.ComputePoolOverviewMonitorReq\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"全部区域\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.ComputePoolOverviewMonitorReq{\n\t\t\t\t\tRegion: \"\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"单region az\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.ComputePoolOverviewMonitorReq{\n\t\t\t\t\tRegion: \"cn-shanghai-2\",\n\t\t\t\t\tAz:     \"cn-shanghai-2a\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &computePoolService{\n\t\t\t\tStore: dao.NewMockComputeStore(),\n\t\t\t}\n\t\t\tgot, err := n.OverviewMonitor(tt.args.ctx, tt.args.par)\n\t\t\tt.Logf(\"Test Case: %s, Got: %v, Error: %v\", tt.name, got, err)\n\t\t})\n\t}\n}\n\n// 待后续修改\nfunc Test_computePoolService_OverviewLine(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\ttype args struct {\n\t\tctx context.Context\n\t\tpar dto.ComputePoolOverviewLineReq\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"单region az\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.ComputePoolOverviewLineReq{\n\t\t\t\t\tRegion: \"cn-shanghai-2\",\n\t\t\t\t\tAz:     \"cn-shanghai-2a\",\n\t\t\t\t\t// \"vcpu_stock\", \"memory_stock\", \"memory_rate\", \"disk_rate\"\n\t\t\t\t\t// vcpu_stock, memory_stock, memory_rate, disk_rate\n\t\t\t\t\tMetricName: \"cpu_usage_rate\",\n\t\t\t\t\tStart:      time.Now().Unix(),\n\t\t\t\t\tEnd:        time.Now().Add(3 * time.Second).Unix(),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &computePoolService{\n\t\t\t\tStore: dao.NewMockComputeStore(),\n\t\t\t}\n\t\t\tgot, err := n.OverviewLine(tt.args.ctx, tt.args.par)\n\t\t\tjsonResult, err := json.Marshal(got)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"Failed to marshal result to JSON: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tt.Logf(\"OverviewLine result = %v\", string(jsonResult))\n\t\t})\n\t}\n}\n\nfunc Test_computePoolService_List(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\ttype args struct {\n\t\tctx context.Context\n\t\tpar dto.ComputePoolListReq\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"单region az\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.ComputePoolListReq{\n\t\t\t\t\tRegion: \"cn-shanghai-2\",\n\t\t\t\t\tAz:     []string{\"cn-shanghai-2a\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &computePoolService{\n\t\t\t\tStore: dao.NewMockComputeStore(),\n\t\t\t}\n\t\t\tgot, err := n.List(tt.args.ctx, tt.args.par)\n\t\t\tjsonResult, err := json.Marshal(got)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"Failed to marshal result to JSON: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tt.Logf(\"ListComputePool result = %v\", string(jsonResult))\n\t\t})\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/service/vm.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_compute/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb/pkg\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/vm\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/constant\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dto\"\n\t\"github.com/pkg/errors\"\n)\n\ntype VmService interface {\n\tOverviewMonitor(ctx context.Context, par dto.VmOverviewMonitorReq) (*dto.VmOverviewMonitorRsp, error)\n\tOverviewTop(ctx context.Context, par dto.VmOverviewTopReq) (*dto.VmOverviewTopRsp, error)\n\tDetailMetrics(ctx context.Context, par dto.VmDetailMetricsReq) (*dto.VmDetailMetricsRsp, error)\n\tDetailMetricLines(ctx context.Context, par dto.VmDetailMetricLinesReq) (*dto.VmDetailMetricLinesRsp, error)\n}\n\ntype vmService struct {\n\tStore dao.Store\n}\n\nfunc NewVmService() VmService {\n\treturn &vmService{\n\t\tStore: dao.NewComputeStore(),\n\t}\n}\n\nfunc (n *vmService) OverviewMonitor(ctx context.Context, par dto.VmOverviewMonitorReq) (*dto.VmOverviewMonitorRsp, error) {\n\t// grpc vm list\n\tvar (\n\t\trpcRes *pb.ListVmResult\n\t\terr    error\n\t)\n\tif par.Az != \"\" {\n\t\trpcRes, err = n.Store.VmRpcClient().ListVm(ctx, &pb.ListVmReq{Region: par.Region, Az: []string{par.Az}, PageSize: -1})\n\t} else {\n\t\trpcRes, err = n.Store.VmRpcClient().ListVm(ctx, &pb.ListVmReq{Region: par.Region, PageSize: -1})\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\trsp := &dto.VmOverviewMonitorRsp{}\n\tproductSources := []string{consts.Platform, consts.Business}\n\tfor _, ps := range productSources {\n\t\t// 记录云主机状态\n\t\tvmStatusCount := map[string]int{}\n\t\tsourceCount := 0\n\t\tfor _, vm := range rpcRes.DataList {\n\t\t\tif vm.Source == ps {\n\t\t\t\tsourceCount += 1\n\t\t\t\tif vm.Status != \"\" {\n\t\t\t\t\tvmStatusCount[vm.Status] += 1\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\t// 结果记录\n\t\tmonitor := types.BasicOverviewSlot{\n\t\t\t// 云主机总量\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tName:     ps,\n\t\t\t\tValue:    sourceCount,\n\t\t\t\tUnitType: \"number\",\n\t\t\t\tUnit:     \"个\",\n\t\t\t},\n\t\t}\n\t\t// 云主机状态\n\t\tfor status, count := range vmStatusCount {\n\t\t\tmonitor.Values = append(monitor.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:     constant.VmStatusMap[status],\n\t\t\t\tCode:     status,\n\t\t\t\tValue:    count,\n\t\t\t\tUnit:     \"个\",\n\t\t\t\tUnitType: \"number\",\n\t\t\t},\n\t\t\t)\n\t\t}\n\n\t\t// 返回值\n\t\tif ps == consts.Platform {\n\t\t\trsp.Platform = []types.BasicOverviewSlot{monitor}\n\t\t} else {\n\t\t\trsp.Business = []types.BasicOverviewSlot{monitor}\n\t\t}\n\t}\n\trsp.TotalCount = rpcRes.TotalCount\n\treturn rsp, nil\n}\n\nfunc (n *vmService) OverviewTop(ctx context.Context, par dto.VmOverviewTopReq) (*dto.VmOverviewTopRsp, error) {\n\ttops := []types.BasicOverviewSlot{}\n\tfor _, name := range par.Name {\n\t\ttsdbMetric, err := n.Store.Metric().GetOneByCode(name)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessagef(err, \"get tsdb metric %s err\", name)\n\t\t}\n\t\ttopData, err := n.Store.MetricTop().GetOneByCode(dao.QueryParams{\n\t\t\tRegion: par.Region,\n\t\t\tAz:     par.Az,\n\t\t\tCode:   name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, constant.GetTopDataErrorWithRegion\n\t\t}\n\t\tintervalData := topData.ParseIntervalData(par.Start, par.End)\n\t\t//topK\n\t\tif par.TopK > 10 || par.TopK > len(intervalData) {\n\t\t\treturn nil, fmt.Errorf(\"topK is too large\")\n\t\t}\n\t\tintervalData = intervalData[:par.TopK]\n\n\t\tvalues := []types.BasicOverviewSlotValue{}\n\t\tfor _, v := range intervalData {\n\t\t\tvalues = append(values, types.BasicOverviewSlotValue{\n\t\t\t\tName:     v.Name,\n\t\t\t\tCode:     v.Id,\n\t\t\t\tValue:    v.Value,\n\t\t\t\tUnit:     tsdbMetric.Unit,\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t})\n\t\t}\n\n\t\tslot := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        constant.VmMetricTopMap[name],\n\t\t\t\tValue:       0,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t\tValues: values,\n\t\t}\n\t\ttops = append(tops, slot)\n\t}\n\n\treturn &dto.VmOverviewTopRsp{\n\t\tTops: tops,\n\t}, nil\n}\n\nfunc (n *vmService) DetailMetrics(ctx context.Context, par dto.VmDetailMetricsReq) (*dto.VmDetailMetricsRsp, error) {\n\tvmDetail, err := n.Store.VmRpcClient().DescribeVm(ctx, &pb.DescribeVmReq{Id: par.Id})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// 通过 opentsdb queryLast 查询单点数据\n\tmetrics := make([]types.BasicOverviewSlot, 0)\n\tfor _, metric := range par.MetricName {\n\t\tsubQueries := make([]pkg.SubQuery, 0)\n\t\ttsdbMetric, err := n.Store.Metric().GetOneByCode(metric)\n\t\tmetricValue := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tName:     metric,\n\t\t\t\tUnit:     tsdbMetric.Unit,\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t},\n\t\t}\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\tmetrics = append(metrics, metricValue)\n\t\t\tcontinue\n\t\t}\n\t\tvmQuery := vm.ParseTsdbQuery(tsdbMetric.Code, tsdbMetric.MetricPrefix, par.Id)\n\t\tqueryParam := pkg.QueryParam{\n\t\t\tStart: time.Now().Add(-24 * time.Hour).Unix(),\n\t\t\tEnd:   time.Now().Unix(),\n\t\t}\n\t\tswitch metric {\n\t\t// 24h 处理 其余正常queryLast查询 查单点\n\t\tcase vm.NetIn, vm.NetOut:\n\t\t\tsubQueries = append(subQueries, pkg.SubQuery{\n\t\t\t\tAggregator: \"sum\",\n\t\t\t\tMetric:     vmQuery.Metric,\n\t\t\t\tTags:       vmQuery.Tags,\n\t\t\t\tDownsample: opentsdb.TimeToDownsample(time.Now().Unix() - time.Now().Add(-24*time.Hour).Unix()),\n\t\t\t})\n\t\t\tqueryParam.Queries = subQueries\n\t\t\tqueryResp, err := opentsdb.Query(ctx, vmDetail.Region, queryParam)\n\t\t\tif err != nil {\n\t\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar values []float64\n\t\t\tif len(queryResp.QueryRespCnts) > 0 {\n\t\t\t\tdataPoints := queryResp.QueryRespCnts[0].GetDataPoints()\n\t\t\t\tfor _, v := range dataPoints {\n\t\t\t\t\tvalues = append(values, v.Value.(float64))\n\t\t\t\t}\n\t\t\t}\n\t\t\tmetricValue = types.BasicOverviewSlot{\n\t\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\t\tName:     metric,\n\t\t\t\t\tValue:    tools.GetAvg(values),\n\t\t\t\t\tUnit:     tsdbMetric.Unit,\n\t\t\t\t\tUnitType: types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\t\tKind:     types.KindInfo,\n\t\t\t\t},\n\t\t\t}\n\t\tcase vm.CpuLoad, vm.MemoryLoad, vm.DiskLoad:\n\t\t\tqueryParam := pkg.QueryParam{\n\t\t\t\tStart: time.Now().Add(-1 * time.Hour).Unix(),\n\t\t\t\tEnd:   time.Now().Unix(),\n\t\t\t}\n\t\t\tsubQueries = append(subQueries, pkg.SubQuery{\n\t\t\t\tAggregator: \"sum\",\n\t\t\t\tMetric:     vmQuery.Metric,\n\t\t\t\tTags:       vmQuery.Tags,\n\t\t\t\tDownsample: opentsdb.TimeToDownsample(time.Now().Unix() - time.Now().Add(-1*time.Hour).Unix()),\n\t\t\t})\n\t\t\tqueryParam.Queries = subQueries\n\t\t\tqueryResp, err := opentsdb.Query(ctx, vmDetail.Region, queryParam)\n\t\t\tif err != nil {\n\t\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar values []float64\n\t\t\tif len(queryResp.QueryRespCnts) > 0 {\n\t\t\t\tdataPoints := queryResp.QueryRespCnts[0].GetDataPoints()\n\t\t\t\tfor _, v := range dataPoints {\n\t\t\t\t\tvalues = append(values, v.Value.(float64))\n\t\t\t\t}\n\t\t\t}\n\t\t\tmetricValue = types.BasicOverviewSlot{\n\t\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\t\tName:     metric,\n\t\t\t\t\tValue:    tools.GetAvg(values),\n\t\t\t\t\tUnit:     tsdbMetric.Unit,\n\t\t\t\t\tUnitType: types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\t\tKind:     types.KindInfo,\n\t\t\t\t},\n\t\t\t}\n\t\t\tif tsdbMetric.Unit == \"%\" {\n\t\t\t\tmetricValue.Info.UnitType = \"\"\n\t\t\t}\n\t\tcase vm.DiskFree:\n\t\t\tqueryParam := pkg.QueryParam{\n\t\t\t\tStart: time.Now().Add(-1 * time.Hour).Unix(),\n\t\t\t\tEnd:   time.Now().Unix(),\n\t\t\t}\n\t\t\tsubQueries = append(subQueries, pkg.SubQuery{\n\t\t\t\tAggregator: \"sum\",\n\t\t\t\tMetric:     vmQuery.Metric,\n\t\t\t\tTags:       vmQuery.Tags,\n\t\t\t\tDownsample: opentsdb.TimeToDownsample(time.Now().Unix() - time.Now().Add(-1*time.Hour).Unix()),\n\t\t\t})\n\t\t\tqueryParam.Queries = subQueries\n\t\t\tqueryResp, err := opentsdb.Query(ctx, vmDetail.Region, queryParam)\n\t\t\tif err != nil {\n\t\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar values []float64\n\t\t\tif len(queryResp.QueryRespCnts) > 0 {\n\t\t\t\tdataPoints := queryResp.QueryRespCnts[0].GetDataPoints()\n\t\t\t\tfor _, v := range dataPoints {\n\t\t\t\t\tvalues = append(values, v.Value.(float64))\n\t\t\t\t}\n\t\t\t}\n\t\t\tmetricValue.Values = make([]types.BasicOverviewSlotValue, 1)\n\t\t\tmetricValue.Values = append(metricValue.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName: \"/\",\n\t\t\t\tCode: \"ext4\",\n\t\t\t})\n\t\t\tif len(queryResp.QueryRespCnts) > 0 {\n\t\t\t\tmetricValue.Values[0].Value = tools.GetAvg(values)\n\t\t\t}\n\t\t}\n\n\t\tmetrics = append(metrics, metricValue)\n\t}\n\treturn &dto.VmDetailMetricsRsp{\n\t\tMetrics: metrics,\n\t}, nil\n}\n\nfunc (n *vmService) DetailMetricLines(ctx context.Context, par dto.VmDetailMetricLinesReq) (*dto.VmDetailMetricLinesRsp, error) {\n\tvmDetail, err := n.Store.VmRpcClient().DescribeVm(ctx, &pb.DescribeVmReq{Id: par.Id})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tregion := vmDetail.Region\n\tqueryParam := pkg.QueryParam{\n\t\tStart: par.Start,\n\t\tEnd:   par.End,\n\t}\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tfor _, metric := range par.MetricName {\n\t\tsubQueries := make([]pkg.SubQuery, 0)\n\t\ttsdbMetric, err := n.Store.Metric().GetOneByCode(metric)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\tcontinue\n\t\t}\n\t\t// 组装 Tag\n\t\tswitch metric {\n\t\tcase vm.DiskUsedRate:\n\t\t\tmetricDir := vmDetail.MetricDir\n\t\t\tif len(metricDir) == 0 {\n\t\t\t\tmetricDir = append(metricDir, \"/\")\n\t\t\t}\n\t\t\tfor _, dir := range metricDir {\n\t\t\t\ttags := map[string]string{\n\t\t\t\t\t\"host\": vmDetail.Id,\n\t\t\t\t\t\"p1\":   dir,\n\t\t\t\t\t\"p2\":   \"pused\",\n\t\t\t\t}\n\t\t\t\tsubQueries = append(subQueries, pkg.SubQuery{\n\t\t\t\t\tAggregator: \"sum\",\n\t\t\t\t\tMetric:     \"vfs.fs.size\" + \".\" + par.Id,\n\t\t\t\t\tTags:       tags,\n\t\t\t\t\tDownsample: opentsdb.TimeToDownsample(par.End - par.Start),\n\t\t\t\t})\n\t\t\t}\n\t\tdefault:\n\t\t\tvmQuery := vm.ParseTsdbQuery(tsdbMetric.Code, tsdbMetric.MetricPrefix, par.Id)\n\t\t\tsubQueries = append(subQueries, pkg.SubQuery{\n\t\t\t\tAggregator: \"sum\",\n\t\t\t\tMetric:     vmQuery.Metric,\n\t\t\t\tTags:       vmQuery.Tags,\n\t\t\t\tDownsample: opentsdb.TimeToDownsample(par.End - par.Start),\n\t\t\t})\n\t\t}\n\n\t\t// 处理查询结果\n\t\tqueryParam.Queries = subQueries\n\t\tqueryResp, err := opentsdb.Query(ctx, region, queryParam)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\tcontinue\n\t\t}\n\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tName:     constant.VmMetricMap[metric],\n\t\t\t\tUnit:     tsdbMetric.Unit,\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t},\n\t\t}\n\t\tif len(queryResp.QueryRespCnts) > 0 {\n\t\t\tdataPoints := queryResp.QueryRespCnts[0].GetDataPoints()\n\t\t\tvar values []float64\n\t\t\tfor index, v := range dataPoints {\n\t\t\t\tvalue := types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        fmt.Sprintf(\"%d\", tools.UnixToUnixMilli(v.Timestamp)),\n\t\t\t\t\tCode:        metric,\n\t\t\t\t\tValue:       v.Value,\n\t\t\t\t\tUnit:        tsdbMetric.Unit,\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(tsdbMetric.Unit),\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tDescription: v.Metric,\n\t\t\t\t}\n\t\t\t\tif tsdbMetric.Unit == \"%\" {\n\t\t\t\t\tline.Info.UnitType = \"\"\n\t\t\t\t\tvalue.UnitType = \"\"\n\t\t\t\t}\n\t\t\t\tline.Values = append(line.Values, value)\n\t\t\t\tvalues = append(values, v.Value.(float64))\n\t\t\t\tif index == len(dataPoints)-1 {\n\t\t\t\t\tline.Info.Value = v.Value\n\t\t\t\t}\n\t\t\t}\n\t\t\tline.Info.Avg = tools.GetAvg(values)\n\t\t\tline.Info.Max = tools.GetMax(values)\n\t\t\tline.Info.Min = tools.GetMin(values)\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\treturn &dto.VmDetailMetricLinesRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/service/compute_pool.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sort\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/utils\"\n\tcomputeutils \"ezone.ksyun.com/ezone/luban/monitor/modules/compute/utils\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tresource_computev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_compute/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\tprom_client \"ezone.ksyun.com/ezone/luban/monitor/common/client/prom\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/compute\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/server\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/utils/convert\"\n\t\"github.com/pkg/errors\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n)\n\nvar (\n\talertLevels = []string{\"p0\", \"p1\", \"p2\", \"p3\"}\n\talertKinds  = map[string]string{\n\t\t\"p0\": types.KindError,\n\t\t\"p1\": types.KindWarn,\n\t\t\"p2\": types.KindMinor,\n\t\t\"p3\": types.KindInfo,\n\t}\n)\n\ntype ComputePoolService interface {\n\tOverviewAlert(ctx context.Context, par dto.ComputePoolOverviewAlertReq) (*dto.ComputePoolOverviewAlertRsp, error)\n\tOverviewMonitor(ctx context.Context, par dto.ComputePoolOverviewMonitorReq) (*dto.ComputePoolOverviewMonitorRsp, error)\n\tOverviewLine(ctx context.Context, par dto.ComputePoolOverviewLineReq) (*dto.ComputePoolOverviewLineRsp, error)\n\tList(ctx context.Context, par dto.ComputePoolListReq) (*dto.ComputePoolListRsp, error)\n\tDetailLine(ctx context.Context, par dto.ComputePoolDetailLineReq) (*dto.ComputePoolDetailLineRsp, error)\n}\n\ntype computePoolService struct {\n\tStore dao.Store\n}\n\nfunc NewComputePoolService() ComputePoolService {\n\treturn &computePoolService{\n\t\tStore: dao.NewComputeStore(),\n\t}\n}\n\nfunc NewMockComputePoolService() ComputePoolService {\n\treturn &computePoolService{Store: dao.NewMockComputeStore()}\n}\n\nfunc (n *computePoolService) OverviewAlert(ctx context.Context, par dto.ComputePoolOverviewAlertReq) (*dto.ComputePoolOverviewAlertRsp, error) {\n\tvar az []string\n\tif par.Az != \"\" {\n\t\taz = []string{par.Az}\n\t}\n\talerts, err := n.Store.AlarmRpcClient().ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\tPageNo:   -1,\n\t\tPageSize: -1,\n\t\tStatus:   \"firing\",\n\t\tRegion:   par.Region,\n\t\tAz:       az,\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListAlerts err\")\n\t}\n\t// 概览数据\n\talertSlots := []types.BasicOverviewSlot{}\n\tfor _, level := range alertLevels {\n\t\talertSlot := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        level,\n\t\t\t\tValue:       utils.CountAlertsNum(alerts.Items, \"kec\", level),\n\t\t\t\tUnitType:    types.TypeNumber,\n\t\t\t\tUnit:        \"个\",\n\t\t\t\tKind:        alertKinds[level],\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t}\n\t\talertSlots = append(alertSlots, alertSlot)\n\t}\n\treturn &dto.ComputePoolOverviewAlertRsp{\n\t\tAlerts: alertSlots,\n\t}, nil\n}\n\nfunc (n *computePoolService) OverviewMonitor(ctx context.Context, par dto.ComputePoolOverviewMonitorReq) (*dto.ComputePoolOverviewMonitorRsp, error) {\n\t// computePool grpc\n\tcomputePoolRpcRes, err := n.Store.ComputePoolRpcClient().ListComputePool(ctx, &resource_computev1alpha.ListComputePoolReq{\n\t\tRegion: par.Region,\n\t\tAz:     []string{par.Az},\n\t})\n\tif par.Az == \"\" {\n\t\tcomputePoolRpcRes, err = n.Store.ComputePoolRpcClient().ListComputePool(ctx, &resource_computev1alpha.ListComputePoolReq{\n\t\t\tRegion: par.Region,\n\t\t})\n\t}\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagHTTPFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\n\t// 服务器监控信息\n\tupCount, downCount, err := n.fetchServerStatus(ctx, computePoolRpcRes)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagHTTPFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\n\tmonitors := []types.BasicOverviewSlot{}\n\tmonitorUp := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:        \"up\",\n\t\t\tValue:       upCount,\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tUnit:        \"个\",\n\t\t\tKind:        types.KindSuccess,\n\t\t\tDescription: \"服务器监控状态-监控中\",\n\t\t},\n\t}\n\tmonitorDown := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:        \"down\",\n\t\t\tValue:       downCount,\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tUnit:        \"个\",\n\t\t\tKind:        types.KindError,\n\t\t\tDescription: \"服务器监控状态-监控异常\",\n\t\t},\n\t}\n\tmonitors = append(monitors, monitorUp, monitorDown)\n\treturn &dto.ComputePoolOverviewMonitorRsp{\n\t\tMonitors: monitors,\n\t}, nil\n}\n\nfunc (n *computePoolService) fetchServerStatus(ctx context.Context, rpcRes *resource_computev1alpha.ListComputePoolResult) (upCount int, downCount int, err error) {\n\taggregates := rpcRes.DataList\n\tipList := []string{}\n\tpromIpList := []string{}\n\tfor _, aggregate := range aggregates {\n\t\t// 每个资源池下的 服务器\n\t\tListPhysicalServerRes, err := n.Store.ServerRpcClient().PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\t\tPageSize:         -1,\n\t\t\tRegion:           aggregate.Region,\n\t\t\tResourcePoolName: aggregate.Name,\n\t\t\tResourcePoolType: []string{\"kec\"},\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagHTTPFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t\tcontinue\n\t\t}\n\t\tfor _, physicalServer := range ListPhysicalServerRes.PhysicalServerHostList {\n\t\t\tipList = append(ipList, physicalServer.ManageIp)\n\t\t\tpromIpList = append(promIpList, physicalServer.ManageIp+\":9100\")\n\t\t}\n\t}\n\trsp, err := n.Store.AlarmRpcClient().ListPromQLs(ctx, server.TemplateMap[server.Status](promIpList))\n\tif err != nil {\n\t\treturn 0, 0, err\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\n\t// prometheus\n\tup, err := prom_client.VectorQuery(ctx, promQL)\n\tif err != nil {\n\t\treturn 0, 0, err\n\t}\n\tserverMonitorUpStatusMap := prom_client.ParseServerMonitoringStatus(up)\n\tfor _, ip := range ipList {\n\t\tif serverMonitorUpStatusMap[ip] == \"up\" {\n\t\t\tupCount += 1\n\t\t} else {\n\t\t\tdownCount += 1\n\t\t}\n\t}\n\treturn upCount, downCount, nil\n}\n\nfunc (n *computePoolService) OverviewLine(ctx context.Context, par dto.ComputePoolOverviewLineReq) (*dto.ComputePoolOverviewLineRsp, error) {\n\t// computePool grpc\n\tcomputePoolRpcRes, err := n.Store.ComputePoolRpcClient().ListComputePool(ctx, &resource_computev1alpha.ListComputePoolReq{\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t\tAz:       []string{par.Az},\n\t})\n\tif par.Az == \"\" {\n\t\tcomputePoolRpcRes, err = n.Store.ComputePoolRpcClient().ListComputePool(ctx, &resource_computev1alpha.ListComputePoolReq{\n\t\t\tPageSize: -1,\n\t\t\tRegion:   par.Region,\n\t\t})\n\t}\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagHTTPFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\tlines := make([]types.BasicOverviewSlot, 0)\n\t// 带预测值\n\tpredictionMetrics := []string{compute.VCpuStock, compute.MemoryStock}\n\tfor _, computePool := range computePoolRpcRes.DataList {\n\t\trsp, err := n.Store.AlarmRpcClient().ListPromQLs(ctx, compute.TemplateMap[par.MetricName](computePool.Region, computePool.Az, computePool.Name))\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t}\n\t\tpromQL := rsp.Items[0].RealPromql\n\t\tunit := rsp.Items[0].Unit\n\t\tmatrix, err := prom_client.MatrixQuery(ctx, promQL, v1.Range{\n\t\t\tStart: time.UnixMilli(par.Start),\n\t\t\tEnd:   time.UnixMilli(par.End),\n\t\t\tStep:  prom_client.TimeToStep(par.End - par.Start),\n\t\t})\n\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\t}\n\t\t// 封装结果\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        computePool.Name,\n\t\t\t\tValue:       0,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\tUnit:        unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0, //预测值，values的下标，0则无预测值\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t}\n\t\tfor _, m := range matrix {\n\t\t\tfor _, p := range m.Values {\n\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\tvalue := p.Value\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\tCode:        par.MetricName,\n\t\t\t\t\tValue:       value,\n\t\t\t\t\tUnit:        unit,\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tvar predictSql string\n\t\tstart, end := par.Start/1e3, par.End/1e3\n\t\tstep := computeutils.TimeToStepForInt(end - start)\n\t\tpredictStart, predictEnd := end, end+(end-start)\n\t\t// 添加预测分析\n\t\tif par.HasPrediction && tools.Contains(predictionMetrics, par.MetricName) != -1 {\n\t\t\tline.Info.Prognosis = len(line.Values)\n\t\t\trangeDuration := strconv.FormatInt(3*(end-start), 10)\n\t\t\tpredictDuration := strconv.FormatInt(end-start, 10)\n\t\t\tswitch par.MetricName {\n\t\t\tcase compute.VCpuStock:\n\t\t\t\tpredictSql = compute.GetPredictVCpuStock(computePool.Name, \"kec\", rangeDuration+\"s\", predictDuration)\n\t\t\tcase compute.MemoryStock:\n\t\t\t\tpredictSql = compute.GetPredictMemoryStock(computePool.Name, \"kec\", rangeDuration+\"s\", predictDuration)\n\t\t\t}\n\t\t\tpredictMatrix, err := prom_client.MatrixQuery(ctx, predictSql, v1.Range{\n\t\t\t\tStart: time.Unix(predictStart, 0),\n\t\t\t\tEnd:   time.Unix(predictEnd, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus predictMatrix: %v\\n\", err)\n\t\t\t}\n\t\t\tfor _, m := range predictMatrix {\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tUnit:        unit,\n\t\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"预测数据\",\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\treturn &dto.ComputePoolOverviewLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\nfunc (n *computePoolService) List(ctx context.Context, par dto.ComputePoolListReq) (*dto.ComputePoolListRsp, error) {\n\t// computePool grpc\n\tcomputePoolRpcRes, err := n.Store.ComputePoolRpcClient().ListComputePool(ctx, &resource_computev1alpha.ListComputePoolReq{\n\t\tRegion:   par.Region,\n\t\tAz:       par.Az,\n\t\tPageNo:   int32(par.PageNo),\n\t\tPageSize: int32(par.PageSize),\n\t\tQuery:    par.Query,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagHTTPFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\tcomputePoolList := computePoolRpcRes.DataList\n\tres := &dto.ComputePoolListRsp{\n\t\tTotalCount: int(computePoolRpcRes.TotalCount),\n\t\tPageNo:     int(computePoolRpcRes.PageNo),\n\t\tPageSize:   int(computePoolRpcRes.PageSize),\n\t\tDataList:   make([]*dto.ComputePoolMonitor, 0),\n\t}\n\tfor _, computePool := range computePoolList {\n\t\tserverList, err := n.Store.ServerRpcClient().PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\t\tPageSize:         -1,\n\t\t\tRegion:           computePool.Region,\n\t\t\tResourcePoolName: computePool.Name,\n\t\t\tResourcePoolType: []string{\"kec\"},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call ServerRpcClient.PhysicalServerList err\")\n\t\t}\n\t\tcpuTotal, err := n.ComputePoolServerVector(ctx, serverList, server.CpuTotal)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call computePoolVector err\")\n\t\t}\n\t\tcpuRate, err := n.ComputePoolVector(ctx, computePool.Region, computePool.Az, computePool.Name, compute.CpuRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call computePoolVector err\")\n\t\t}\n\t\tmemoryTotal, err := n.ComputePoolServerVector(ctx, serverList, server.MemTotal)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call computePoolVector err\")\n\t\t}\n\t\tmemoryTotal = memoryTotal / 1024 / 1024 / 1024\n\t\tmemoryRate, err := n.ComputePoolVector(ctx, computePool.Region, computePool.Az, computePool.Name, compute.MemoryRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call computePoolVector err\")\n\t\t}\n\t\tdiskRate, err := n.ComputePoolVector(ctx, computePool.Region, computePool.Az, computePool.Name, compute.DiskRate)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call computePoolVector err\")\n\t\t}\n\t\t// 告警数量\n\t\talertRpcRes, err := n.Store.AlarmRpcClient().ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\t\tRegion:          computePool.Region,\n\t\t\tAz:              []string{computePool.Az},\n\t\t\tLevel:           alertLevels,\n\t\t\tResourceType:    []string{\"resourcePool\"},\n\t\t\tResourceSubType: []string{\"kec\"},\n\t\t\tSearchKey:       \"resource\",\n\t\t\tSearchValue:     computePool.Name,\n\t\t\tStatus:          \"firing\",\n\t\t})\n\t\talertCount := alertRpcRes.Total\n\t\tres.DataList = append(res.DataList, &dto.ComputePoolMonitor{\n\t\t\tId:              computePool.Id,\n\t\t\tName:            computePool.Name,\n\t\t\tRegion:          computePool.Region,\n\t\t\tAz:              computePool.Az,\n\t\t\tCpuTotal:        int(cpuTotal),\n\t\t\tCpuRemain:       int(cpuTotal) - int(cpuTotal*cpuRate),\n\t\t\tCpuRate:         convert.Decimal(cpuRate) * 100,\n\t\t\tCpuUsedTotal:    int(cpuTotal * cpuRate),\n\t\t\tMemoryTotal:     convert.Decimal(memoryTotal),\n\t\t\tMemoryRemain:    convert.Decimal(memoryTotal - memoryTotal*memoryRate),\n\t\t\tMemoryRate:      convert.Decimal(memoryRate) * 100,\n\t\t\tMemoryUsedTotal: convert.Decimal(memoryTotal * memoryRate),\n\t\t\tDiskRate:        convert.Decimal(diskRate) * 100, // 磁盘使用率\n\t\t\tHostCount:       int(computePool.HostCount),\n\t\t\tVmCount:         int(computePool.VmCount),\n\t\t\tAlertCount:      int(alertCount),\n\t\t\tCreateTime:      computePool.CreatedAt.AsTime(),\n\t\t\tPType:           computePool.PType,\n\t\t})\n\t}\n\t// 排序最终结果\n\tswitch par.OrderCode {\n\tcase \"CpuRate\":\n\t\tsort.Slice(res.DataList, func(i, j int) bool {\n\t\t\tif par.OrderType == \"ASC\" {\n\t\t\t\treturn res.DataList[i].CpuRate < res.DataList[j].CpuRate\n\t\t\t} else {\n\t\t\t\treturn res.DataList[i].CpuRate > res.DataList[j].CpuRate\n\t\t\t}\n\t\t})\n\tcase \"MemoryRate\":\n\t\tsort.Slice(res.DataList, func(i, j int) bool {\n\t\t\tif par.OrderType == \"ASC\" {\n\t\t\t\treturn res.DataList[i].MemoryRate < res.DataList[j].MemoryRate\n\t\t\t} else {\n\t\t\t\treturn res.DataList[i].MemoryRate > res.DataList[j].MemoryRate\n\t\t\t}\n\t\t})\n\tcase \"DiskRate\":\n\t\tsort.Slice(res.DataList, func(i, j int) bool {\n\t\t\tif par.OrderType == \"ASC\" {\n\t\t\t\treturn res.DataList[i].DiskRate < res.DataList[j].DiskRate\n\t\t\t} else {\n\t\t\t\treturn res.DataList[i].DiskRate > res.DataList[j].DiskRate\n\t\t\t}\n\t\t})\n\t}\n\t// 排序规则 diskRate\n\treturn res, nil\n}\n\nfunc (n *computePoolService) ComputePoolServerVector(ctx context.Context, serverList *resource_serverv1alpha.ListPhysicalHostResponse, metricName string) (float64, error) {\n\tpromIpList := []string{}\n\tfor _, s := range serverList.PhysicalServerHostList {\n\t\tpromIpList = append(promIpList, s.ManageIp+\":9100\")\n\t}\n\n\t//查alarm获取promql\n\tpromQlReq := server.TemplateMap[metricName](promIpList)\n\trsp, err := n.Store.AlarmRpcClient().ListPromQLs(ctx, promQlReq)\n\tif err != nil {\n\t\treturn 0, errors.WithMessagef(err, \"rpc call ListPromQLs err, req: %+v\", promQlReq)\n\t}\n\tif rsp == nil || len(rsp.Items) < 1 {\n\t\treturn 0, err\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\tfmt.Println(\"real promQL: \", promQL)\n\n\t//查Prometheus\n\tmatrix, err := prom_client.VectorQuery(ctx, promQL)\n\tif err != nil {\n\t\treturn 0, errors.WithMessage(err, \"prom_client VectorQuery err\")\n\t}\n\tvar res float64\n\tif len(matrix) > 0 {\n\t\tfor _, v := range matrix {\n\t\t\tres += float64(v.Value)\n\t\t}\n\t\tres = res / float64(len(matrix))\n\t}\n\treturn res, nil\n}\n\nfunc (n *computePoolService) ComputePoolVector(ctx context.Context, region, az, computePoolName, metricName string) (float64, error) {\n\t//查alarm获取promql\n\tpromQlReq := compute.TemplateMap[metricName](region, az, computePoolName)\n\trsp, err := n.Store.AlarmRpcClient().ListPromQLs(ctx, promQlReq)\n\tif err != nil {\n\t\treturn 0, errors.WithMessagef(err, \"rpc call ListPromQLs err, req: %+v\", promQlReq)\n\t}\n\tif rsp == nil || len(rsp.Items) < 1 {\n\t\treturn 0, err\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\tfmt.Println(\"real promQL: \", promQL)\n\n\t//查Prometheus\n\tmatrix, err := prom_client.VectorQuery(ctx, promQL)\n\tif err != nil {\n\t\treturn 0, errors.WithMessage(err, \"prom_client VectorQuery err\")\n\t}\n\tvar res float64\n\tif len(matrix) > 0 {\n\t\tfor _, v := range matrix {\n\t\t\tres += float64(v.Value)\n\t\t}\n\t\tres = res / float64(len(matrix))\n\t}\n\tres, _ = strconv.ParseFloat(fmt.Sprintf(\"%.2f\", res), 64)\n\treturn res, nil\n}\n\nfunc (n *computePoolService) DetailLine(ctx context.Context, par dto.ComputePoolDetailLineReq) (*dto.ComputePoolDetailLineRsp, error) {\n\t// 对应资源池服务器列表\n\tserverList, err := n.Store.ServerRpcClient().PhysicalServerList(ctx, &resource_serverv1alpha.PhysicalHostListRequest{\n\t\tPageSize:         -1,\n\t\tRegion:           par.Region,\n\t\tResourcePoolName: par.Name,\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call ServerRpcClient.PhysicalServerList err\")\n\t}\n\n\tlines := []types.BasicOverviewSlot{}\n\tfor _, physicalServer := range serverList.PhysicalServerHostList {\n\t\t//查alarm获取promql\n\t\tpromIpList := []string{physicalServer.ManageIp + \":9100\"}\n\t\tpromReq := server.TemplateMap[par.MetricName](promIpList)\n\t\trsp, err := n.Store.AlarmRpcClient().ListPromQLs(ctx, promReq)\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListPromQLs err\")\n\t\t}\n\t\tif rsp == nil || len(rsp.Items) < 1 {\n\t\t\treturn nil, errors.New(\"rpc call AlarmRpcClient.ListPromQLs rsp err\")\n\t\t}\n\t\tpromQL := rsp.Items[0].RealPromql\n\t\tunit := rsp.Items[0].Unit\n\n\t\t//查Prometheus\n\t\tmatrix, err := prom_client.MatrixQuery(ctx, promQL, v1.Range{\n\t\t\tStart: time.UnixMilli(par.Start),\n\t\t\tEnd:   time.UnixMilli(par.End),\n\t\t\tStep:  prom_client.TimeToStep(par.End - par.Start),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, errors.WithMessage(err, \"prom_client MatrixQuery err\")\n\t\t}\n\n\t\t//封装结果数据\n\t\tline := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:       0,\n\t\t\t\tName:        physicalServer.HostName,\n\t\t\t\tValue:       0,\n\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\tUnit:        unit,\n\t\t\t\tKind:        types.KindInfo,\n\t\t\t\tPrognosis:   0,\n\t\t\t\tDescription: \"\",\n\t\t\t},\n\t\t}\n\t\tfor _, m := range matrix {\n\t\t\tfor _, p := range m.Values {\n\t\t\t\ttimeStamp := tools.UnixToUnixMilli(p.Timestamp.Unix())\n\t\t\t\tvalue := p.Value\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        strconv.Itoa(int(timeStamp)),\n\t\t\t\t\tCode:        par.MetricName,\n\t\t\t\t\tValue:       value,\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(unit),\n\t\t\t\t\tUnit:        unit,\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\n\treturn &dto.ComputePoolDetailLineRsp{\n\t\tLines: lines,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/service/vm_test.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"testing\"\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dto\"\n\t\"go.uber.org/mock/gomock\"\n)\n\nfunc Test_vmService_OverviewMonitor(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\ttype args struct {\n\t\tctx context.Context\n\t\tpar dto.VmOverviewMonitorReq\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"全部区域\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.VmOverviewMonitorReq{\n\t\t\t\t\tRegion: \"\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"单region az\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.VmOverviewMonitorReq{\n\t\t\t\t\tRegion: \"cn-shanghai-2\",\n\t\t\t\t\tAz:     \"cn-shanghai-2a\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &vmService{\n\t\t\t\tStore: dao.NewMockComputeStore(),\n\t\t\t}\n\t\t\tgot, err := n.OverviewMonitor(tt.args.ctx, tt.args.par)\n\n\t\t\tjsonResult, err := json.Marshal(got)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"Failed to marshal result to JSON: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tt.Logf(\"OverviewMonitor result = %v\", string(jsonResult))\n\t\t})\n\t}\n}\n\nfunc Test_vmService_OverviewTop(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\ttype args struct {\n\t\tctx context.Context\n\t\tpar dto.VmOverviewTopReq\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"全部区域\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.VmOverviewTopReq{\n\t\t\t\t\tRegion: \"\",\n\t\t\t\t\tAz:     \"\",\n\t\t\t\t\tName:   []string{\"vm_disk_load\"},\n\t\t\t\t\tStart:  time.Now().Add(-time.Hour).UnixMilli(),\n\t\t\t\t\tEnd:    time.Now().UnixMilli(),\n\t\t\t\t\tTopK:   5,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"单region az\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.VmOverviewTopReq{\n\t\t\t\t\tRegion: \"cn-shanghai-2\",\n\t\t\t\t\tAz:     \"cn-shanghai-2a\",\n\t\t\t\t\tName:   []string{\"vm_net_in\"},\n\t\t\t\t\tStart:  time.Now().Add(-time.Hour).UnixMilli(),\n\t\t\t\t\tEnd:    time.Now().UnixMilli(),\n\t\t\t\t\tTopK:   5,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &vmService{\n\t\t\t\tStore: dao.NewMockComputeStore(),\n\t\t\t}\n\t\t\tgot, err := n.OverviewTop(tt.args.ctx, tt.args.par)\n\n\t\t\tjsonResult, err := json.Marshal(got)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"Failed to marshal result to JSON: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tt.Logf(\"OverviewTop result = %v\", string(jsonResult))\n\t\t})\n\t}\n}\n\nfunc Test_vmService_DetailMetrics(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\ttype args struct {\n\t\tctx context.Context\n\t\tpar dto.VmDetailMetricsReq\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"test01\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.VmDetailMetricsReq{\n\t\t\t\t\tId:         \"171c7bba-f23e-42cb-a446-29f757cf3c81\",\n\t\t\t\t\tMetricName: []string{\"vm_cpu_load\", \"vm_memory_load\", \"vm_disk_load\", \"vm_disk_free\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &vmService{\n\t\t\t\tStore: dao.NewMockComputeStore(),\n\t\t\t}\n\t\t\tgot, err := n.DetailMetrics(tt.args.ctx, tt.args.par)\n\n\t\t\tjsonResult, err := json.Marshal(got)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"Failed to marshal result to JSON: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tt.Logf(\"DetailMetics result = %v\", string(jsonResult))\n\t\t})\n\t}\n}\n\nfunc Test_vmService_DetailMetricLines(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\ttype args struct {\n\t\tctx context.Context\n\t\tpar dto.VmDetailMetricLinesReq\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"test01\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: dto.VmDetailMetricLinesReq{\n\t\t\t\t\tId:    \"32f3bf85-497e-45d4-98dd-480f7a3c598b\",\n\t\t\t\t\tStart: time.Now().Add(-time.Hour).UnixMilli(),\n\t\t\t\t\tEnd:   time.Now().UnixMilli(),\n\t\t\t\t\tMetricName: []string{\n\t\t\t\t\t\t\"vm_disk_used_rate\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t/* ----- 目前所需参数 -------\n\t\t\t\tCPU平均负载\n\t\t\t\tvm_cpu_mode_system \t\t\t可以\n\t\t\t\tvm_cpu_mode_user \t\t\t可以\n\t\t\t\tvm_cpu_mode_soft_irq \t\t通的\t云监控没数据\n\t\t\t\tvm_cpu_mode_irq  irq \t\t看着没对应tag\n\t\t\t\tvm_cpu_mode_io_wait \t\tiowait 没对应tag\n\t\t\t\tvm_cpu_mode_idle \t\t\t通的\t云监控没数据\n\t\t\t\tvm_cpu_mode_nice nice \t\tnice 没对应tag\n\t\t\t\tvm_cpu_mode_steal \t\t\t通的 云监控没对应数据\n\n\t\t\t\t内存容量\n\t\t\t\tvm_memory_size_total \t\t可以\n\t\t\t\tvm_memory_size_free \t\t通的 云监控没数据\n\n\t\t\t\t网卡出入流量(eth0)\n\t\t\t\tvm_net_transmit \t\t    目前来看可以\n\t\t\t\tvm_net_receive\n\n\t\t\t\t网卡出入包(eth0)\n\t\t\t\tvm_net_packet_in \t\t\t通的 云监控没数据\n\t\t\t\tvm_net_packet_out \t\t\t可以\n\n\t\t\t\t磁盘使用率\n\t\t\t\tvm_disk_used_rate \t\t\t通的 云监控无数据\n\n\t\t\t\t磁盘读写带宽\n\t\t\t\tvm_disk_read_bps\t\t\tvdd & vda 问题处理 暂时不清晰原代码所写逻辑 先按vda算\n\t\t\t\tvm_disk_write_bps\n\n\t\t\t\t磁盘IO\n\t\t\t\tdisk_read_ops  \t\t\t\t通的 云监控没数据\tvda\n\t\t\t\tdisk_write_ops \t\t\t\t通的 云监控没数据\n\t\t\t\t*/\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &vmService{\n\t\t\t\tStore: dao.NewMockComputeStore(),\n\t\t\t}\n\t\t\tgot, err := n.DetailMetricLines(tt.args.ctx, tt.args.par)\n\n\t\t\tjsonResult, err := json.Marshal(got)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"Failed to marshal result to JSON: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tt.Logf(\"DetailMetricLines result = %v\", string(jsonResult))\n\t\t})\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/rpc/rpcserver.go\n```golang\npackage rpc\n\nimport (\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/compute/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/service\"\n)\n\ntype ComputeRpcServer struct {\n\tcomputePoolSvc service.ComputePoolService\n\tpb.UnimplementedComputePoolServiceServer\n}\n\nfunc NewComputeRpcServer() *ComputeRpcServer {\n\treturn &ComputeRpcServer{\n\t\tcomputePoolSvc: service.NewComputePoolService(),\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/rpc/compute_pool_test.go\n```golang\npackage rpc\n\nimport (\n\t\"context\"\n\t\"reflect\"\n\t\"testing\"\n\n\tmonitor_computev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/compute/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/service\"\n)\n\nfunc TestComputeRpcServer_ComputePoolList(t *testing.T) {\n\ttype fields struct {\n\t\tcomputePoolSvc                        service.ComputePoolService\n\t\tUnimplementedComputePoolServiceServer monitor_computev1alpha.UnimplementedComputePoolServiceServer\n\t}\n\ttype args struct {\n\t\tctx context.Context\n\t\treq *monitor_computev1alpha.ComputePoolListReq\n\t}\n\ttests := []struct {\n\t\tname    string\n\t\tfields  fields\n\t\targs    args\n\t\twant    *monitor_computev1alpha.ComputePoolListRsp\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname: \"TestComputePoolList\",\n\t\t\tfields: fields{\n\t\t\t\tcomputePoolSvc: service.NewMockComputePoolService(),\n\t\t\t},\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\treq: &monitor_computev1alpha.ComputePoolListReq{\n\t\t\t\t\tRegion: \"cn-shanghai-2\",\n\t\t\t\t\tQuery:  make(map[string]string, 1),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tn := &ComputeRpcServer{\n\t\t\t\tcomputePoolSvc:                        tt.fields.computePoolSvc,\n\t\t\t\tUnimplementedComputePoolServiceServer: tt.fields.UnimplementedComputePoolServiceServer,\n\t\t\t}\n\t\t\tgot, err := n.ComputePoolList(tt.args.ctx, tt.args.req)\n\t\t\tif (err != nil) != tt.wantErr {\n\t\t\t\tt.Errorf(\"ComputePoolList() error = %v, wantErr %v\", err, tt.wantErr)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif !reflect.DeepEqual(got, tt.want) {\n\t\t\t\tt.Errorf(\"ComputePoolList() got = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/compute/rpc/compute_pool.go\n```golang\npackage rpc\n\nimport (\n\t\"context\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/compute/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/compute/dto\"\n\t\"github.com/jinzhu/copier\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\nfunc (n *ComputeRpcServer) ComputePoolList(ctx context.Context, req *pb.ComputePoolListReq) (*pb.ComputePoolListRsp, error) {\n\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagRequestIn, map[string]interface{}{\"params\": req})\n\tvar par dto.ComputePoolListReq\n\tcopier.Copy(&par, req)\n\tres, err := n.computePoolSvc.List(ctx, par)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"list err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tresp := &pb.ComputePoolListRsp{}\n\tcopier.Copy(&resp, res)\n\treturn resp, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/switch/dto/response.go\n```golang\npackage dto\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n)\n\ntype SwitchOverviewAlertRsp struct {\n\tAlerts []types.BasicOverviewSlot `json:\"Alerts\"`\n}\n\ntype SwitchOverviewMonitorRsp struct {\n\tMonitoringStatus   []types.BasicOverviewSlot `json:\"MonitoringStatus\"`\n\tInterfaceStatus    []types.BasicOverviewSlot `json:\"InterfaceStatus\"`\n\tHardwareMonitoring []types.BasicOverviewSlot `json:\"HardwareMonitoring\"`\n}\n\ntype SwitchCPU struct {\n\tName        string  `json:\"Name\"`\n\tHealth      int     `json:\"Health\"` //1:健康；2：告警；3：故障；0：未知\n\tUtilization float64 `json:\"Utilization\"`\n\tTemperature int     `json:\"Temperature\"`\n\tCPUType     string  `json:\"CpuType\"`\n\tMainHertz   float64 `json:\"MainHertz\"`\n\tMaxHertz    float64 `json:\"MaxHertz\"`\n\tCacheLv     int     `json:\"CacheLv\"` //1：1级；2：2级；3：3级\n}\n\ntype SwitchMemory struct {\n\tName        string  `json:\"name\"`\n\tHealth      int     `json:\"health\"` //1:健康；2：告警；3：故障；0：未知\n\tUtilization float64 `json:\"utilization\"`\n\tExist       bool    `json:\"exist\"` //false:不在位；true：在位\n\tLocation    string  `json:\"location\"`\n\tTunnel      string  `json:\"tunnel\"`\n\tSlotNum     string  `json:\"slotNum\"`\n\tMemType     string  `json:\"memType\"`\n\tRanks       string  `json:\"ranks\"`\n\tBitWide     int     `json:\"bitWide\"`\n\tMaxHertz    float64 `json:\"maxHertz\"`\n\tCapacity    int     `json:\"capacity\"`\n\tTechnology  string  `json:\"technology\"`\n\tMfgName     string  `json:\"mfgName\"`\n\tSerialNum   string  `json:\"serialNum\"`\n\tPartNum     string  `json:\"partNum\"`\n}\n\ntype SwitchOverviewTopRsp struct {\n\tTops []types.BasicOverviewSlot\n}\n\ntype SwitchListRsp struct {\n\tTotalCount int64\n\tPageNo     int\n\tPageSize   int\n\tSwitchList []SwitchList `json:\"SwitchList\"`\n}\n\ntype SwitchList struct {\n\tId          int32   `json:\"Id\"`\n\tName        string  `json:\"Name\"`\n\tRunStatus   string  `json:\"RunStatus\"`\n\tSnmpStatus  string  `json:\"SnmpStatus\"`\n\tRegion      string  `json:\"Region\"`\n\tAz          string  `json:\"Az\"`\n\tLab         string  `json:\"Lab\"`\n\tSn          string  `json:\"Sn\"`\n\tIp          string  `json:\"Ip\"`\n\tOutBindIp   string  `json:\"OutBindIp\"`\n\tErrPortNum  int32   `json:\"ErrPortNum\"`\n\tCpuErrNum   int     `json:\"CpuErrNum\"`\n\tCpuLoad     float64 `json:\"CpuLoad\"`\n\tMemErrNum   int     `json:\"MemErrNum\"`\n\tMemLoad     float64 `json:\"MemLoad\"`\n\tDiskErrNum  int     `json:\"DiskErrNum\"`\n\tDiskLoad    float64 `json:\"DiskLoad\"`\n\tPower       string  `json:\"Power\"`\n\tAlertNumber int     `json:\"AlertNumber\"`\n\tTag         string  `json:\"Tag\"`\n}\n\ntype SwitchDetailsOverviewRsp struct {\n\tDetailsOverview []types.BasicOverviewSlot `json:\"DetailsOverview\"`\n\tInterfaceStatus []types.BasicOverviewSlot `json:\"InterfaceStatus\"`\n}\n\ntype SwitchDetailsOverviewLineRsp struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\ntype SwitchHardwareRsp struct {\n\tInTemp        []types.BasicOverviewSlot `json:\"InTemp\"`\n\tOutTemp       []types.BasicOverviewSlot `json:\"OutTemp\"`\n\tPortStatus    []types.BasicOverviewSlot `json:\"PortStatus\"`\n\tCpuState      []types.BasicOverviewSlot `json:\"CpuState\"`\n\tMemState      []types.BasicOverviewSlot `json:\"MemState\"`\n\tPowerState    []types.BasicOverviewSlot `json:\"PowerState\"`\n\tFanState      []types.BasicOverviewSlot `json:\"FanState\"`\n\tMainBoardList []MainBoard               `json:\"MainBoardList\" description:\"主板\"`\n\tCpuList       CpuDetail                 `json:\"CpuList\" description:\"cpu\"`\n\tMemList       MemDetail                 `json:\"MemList\" description:\"内存\"`\n\tPowerList     []Power                   `json:\"PowerList\" description:\"电源\"`\n\tFanList       []Fan                     `json:\"FanList\" description:\"风扇\"`\n}\n\ntype SwitchInterfaceListRsp struct {\n\tTotalCount int64\n\tPageNo     int\n\tPageSize   int\n\tSwitchList []SwitchInterfaceList `json:\"SwitchInterfaceList\"`\n}\n\ntype SwitchInterfaceList struct {\n\tId                int     `json:\"-\" gorm:\"column:Id\"`\n\tSn                string  `json:\"Sn\"`\n\tIfName            string  `json:\"IfName\"`\n\tIfIndex           int     `json:\"IfIndex\"`\n\tIfIp              string  `json:\"IfIp\"`\n\tIfMac             string  `json:\"IfMac\"`\n\tIfSpeed           int     `json:\"IfSpeed\"`\n\tOrtherEndDevice   string  `json:\"OrtherEndDevice\"`\n\tOrtherEndDeviceId int     `json:\"OrtherEndDeviceId\"`\n\tOrtherEndIf       string  `json:\"OrtherEndIf\"`\n\tOrtherEndDescr    string  `json:\"OrtherEndDescr\"`\n\tOrtherEndType     string  `json:\"OrtherEndType\" `\n\tAdminState        int     `json:\"AdminState\"`\n\tOperState         int     `json:\"OperState\"`\n\tPortState         int     `json:\"PortState\"`\n\tLastUpdateAt      string  `json:\"LastUpdateAt\"`\n\tInErrRate         float64 `json:\"InErrRate\" description:\"接收错包率\"`\n\tOutErrRate        float64 `json:\"OutErrRate\" description:\"发送错包率\"`\n\tInDropRate        float64 `json:\"InDropRate\" description:\"接收丢包率\"`\n\tOutDropRate       float64 `json:\"OutDropRate\" description:\"发送丢包率\"`\n\tInBandRate        float64 `json:\"InBandRate\" description:\"接收带宽利用率\"`\n\tOutBandRate       float64 `json:\"OutBandRate\" description:\"发送带宽利用率\"`\n}\n\ntype MainBoard struct {\n\tName          string `json:\"Name\" description:\"名称\"`\n\tState         int    `json:\"State\" description:\"健康状态\"`\n\tSn            string `json:\"Sn\" description:\"序列号\"`\n\tProductNum    string `json:\"ProductNum\" description:\"产品部件号\"`\n\tProductTime   int64  `json:\"ProductTime\" description:\"产品生产日期\"`\n\tProducFactory string `json:\"ProductFactory\" description:\"生产厂家\"`\n}\n\ntype CpuDetail struct {\n\tSum     int   `json:\"Sum\" description:\"cpu总数\"`\n\tCores   int   `json:\"Cores\" description:\"cpu核心数\"`\n\tCpuList []Cpu `json:\"CpuList\" description:\"cpu列表\"`\n}\ntype Cpu struct {\n\tName        string  `json:\"Name\" description:\"名称\"`\n\tState       int     `json:\"State\" description:\"健康状态\"`\n\tUsedRate    float64 `json:\"UsedRate\" description:\"使用率\"`\n\tTemperature int     `json:\"Temperature\" description:\"温度\"`\n\tModel       string  `json:\"Model\" description:\"型号\"`\n\tClockSpeed  string  `json:\"ClockSpeed\" description:\"主频\"`\n\tMaxClock    string  `json:\"MaxClock\" description:\"最大主频\"`\n\tCores       byte    `json:\"Cores\" description:\"核心数\"`\n\tThreads     byte    `json:\"Threads\" description:\"线程数\"`\n\tL1Cache     string  `json:\"L1Cache\" description:\"L1缓存\"`\n\tL2Cache     string  `json:\"L2Cache\" description:\"L2缓存\"`\n\tL3Cache     string  `json:\"L3Cache\" description:\"L3缓存\"`\n}\n\ntype MemDetail struct {\n\tSum      int      `json:\"Sum\" description:\"总数\"`\n\tCapacity string   `json:\"Capacity\" description:\"总容量\"`\n\tMemList  []Memory `json:\"MemList\" description:\"内存列表\"`\n}\n\ntype Memory struct {\n\tName          string  `json:\"Name\" description:\"名称\"`\n\tState         int     `json:\"State\" description:\"健康状态\"`\n\tUsedRate      float64 `json:\"UsedRate\" description:\"使用率\"`\n\tIn            string  `json:\"In\" description:\"在位信息\"`\n\tPosition      string  `json:\"Position\" description:\"位置\"`\n\tChannl        string  `json:\"Channl\" description:\"通道\"`\n\tSlot          string  `json:\"Slot\" description:\"插槽\"`\n\tModel         string  `json:\"Model\" description:\"型号\"`\n\tRanks         string  `json:\"ranks\" description:\"ranks\"`\n\tWidth         int     `json:\"Width\" description:\"位宽\"`\n\tMaxClock      int     `json:\"MaxClock\" description:\"最大主频\"`\n\tCapacity      int     `json:\"Capacity\" description:\"容量\"`\n\tTech          string  `json:\"Tech\" description:\"技术\"`\n\tSn            string  `json:\"Sn\" description:\"序列号\"`\n\tProductNum    string  `json:\"ProductNum\" description:\"产品部件号\"`\n\tProducFactory string  `json:\"ProducFactory\" description:\"生产厂家\"`\n}\n\ntype DiskDetail struct {\n\tSum      int    `json:\"sum\" description:\"总数\"`\n\tCapacity string `json:\"capacity\" description:\"总容量\"`\n\tDiskList []Disk `json:\"DiskList\" description:\"硬盘列表\"`\n}\n\ntype Disk struct {\n\tName          string  `json:\"Name\" description:\"名称\"`\n\tState         float64 `json:\"State\" description:\"健康状态\"`\n\tUpDown        string  `json:\"UpDown\" description:\"启用状态\"`\n\tUsedRate      string  `json:\"UsedRate\" description:\"使用率\"`\n\tIn            string  `json:\"In\" description:\"在位信息\"`\n\tCapacity      string  `json:\"Capacity\" description:\"容量\"`\n\tDomain        string  `json:\"Domain\" description:\"硬盘域\"`\n\tModel         string  `json:\"Model\" description:\"型号\"`\n\tDiskType      string  `json:\"DiskType\" description:\"类型\"`\n\tTemperature   string  `json:\"Temperature\" description:\"温度\"`\n\tSpeed         float64 `json:\"Speed\" description:\"转速\"`\n\tProducFactory string  `json:\"ProductFactory\" description:\"生产厂家\"`\n\tSn            string  `json:\"Sn\" description:\"序列号\"`\n}\n\ntype Power struct {\n\tId              string `json:\"Id\" description:\"序号\"`\n\tState           int    `json:\"State\" description:\"健康状态\"`\n\tIn              string `json:\"In\" description:\"在位信息\"`\n\tTemperature     int    `json:\"temperature\" description:\"温度\"`\n\tRatedPower      string `json:\"RatePower\" description:\"额定功率\"`\n\tInputPower      string `json:\"InputPower\" description:\"输入功率\"`\n\tPowerInputModel string `json:\"PowerInputModel\" description:\"电源输入模式\"`\n\tModel           string `json:\"Model\" description:\"型号\"`\n\tFireWare        string `json:\"FireWare\" description:\"固件\"`\n\tSn              string `json:\"Sn\" description:\"序列号\"`\n\tProductNum      string `json:\"ProductNum\" description:\"产品部件号\"`\n\tProducFactory   string `json:\"ProductFactory\" description:\"生产厂家\"`\n}\n\ntype Fan struct {\n\tName       string  `json:\"Name\" description:\"名称\"`\n\tState      int     `json:\"state\" description:\"健康状态 1:健康；2：告警；3：故障；0：未知\"`\n\tIn         string  `json:\"In\" description:\"在位信息\"`\n\tSpeed      int     `json:\"Speed\" description:\"转速\"`\n\tSpeedRate  float64 `json:\"SpeedRate\" description:\"速率比\"`\n\tRedundancy string  `json:\"Redundancy\" description:\"冗余\"`\n}\n\ntype Work struct {\n\tName         string `json:\"Name\"`\n\tHealthStatus string `json:\"HealthStatus\"` // 健康状态\n\tProduct      string `json:\"Product\"`      // 厂商\n\tVendor       string `json:\"Vendor\"`       // 型号\n\tSpeed        string `json:\"Speed\"`        // 速率\n\tUnits        string `json:\"Units\"`\n\tSize         int    `json:\"Size\"`\n\tMac          string `json:\"Mac\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/switch/dto/request.go\n```golang\npackage dto\n\ntype SwitchOverviewMonitorReq struct {\n\tRegion string   `json:\"Region\"`\n\tAz     []string `json:\"Az\"`\n\tLabId  int      `json:\"LabId\"`\n}\n\ntype SwitchOverviewTopReq struct {\n\tRegion     string   `json:\"Region\"`\n\tAz         []string `json:\"Az\"`\n\tMetricName []string `json:\"MetricName\"`\n\tTopK       string   `json:\"TopK\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n}\n\ntype SwitchListReq struct {\n\tPageNo     int      `json:\"PageNo\"`\n\tPageSize   int      `json:\"PageSize\"`\n\tRegion     string   `json:\"Region\"`\n\tAz         []string `json:\"Az\"`\n\tLab        []string `json:\"Lab\"`\n\tRunStatus  []string `json:\"RunStatus\"`  //监控状态\n\tSnmpStatus []string `json:\"SnmpStatus\"` //snmp监控状态\n\tCpuErrNum  string   `json:\"CpuErrNum\"`\n\tMemErrNum  string   `json:\"MemErrNum\"`\n\tQuery      Query    `json:\"Query\"`\n\tOrderCode  string   `json:\"OrderCode\" form:\"OrderCode\"`\n\tOrderType  string   `json:\"OrderType\" form:\"OrderType\" binding:\"omitempty,oneof=ASC DESC\"`\n}\n\ntype Query map[string]string\n\ntype SwitchDetailsOverviewReq struct {\n\tId int32 `json:\"Id\" binding:\"required\"`\n}\n\ntype SwitchDetailsLineReq struct {\n\tId         int32    `json:\"Id\" binding:\"required\"`\n\tMetricName []string `json:\"MetricName\" binding:\"required\"`\n\tStart      int64    `json:\"Start\" binding:\"required\"`\n\tEnd        int64    `json:\"End\" binding:\"required\"`\n}\n\ntype SwitchHardwareReq struct {\n\tSn string\n}\n\ntype SwitchInterfaceLineReq struct {\n\tId         int32    `json:\"Id\" binding:\"required\"`\n\tIndex      string   `json:\"Index\" binding:\"required\"`\n\tMetricName []string `json:\"MetricName\" binding:\"required\"`\n\tStart      int64    `json:\"Start\" binding:\"required\"`\n\tEnd        int64    `json:\"End\" binding:\"required\"`\n}\n\ntype SwitchInterfaceListReq struct {\n\tId        int     `json:\"Id\" binding:\"required\"`\n\tPageNo    int     `json:\"PageNo\"`\n\tPageSize  int     `json:\"PageSize\" binding:\"lte=1000\"`\n\tRegion    string  `json:\"Region\"`\n\tOrderCode string  `json:\"OrderCode\"`\n\tOrderType string  `json:\"OrderType\" binding:\"omitempty,oneof=ASC DESC asc desc\"`\n\tQuery     Query   `json:\"Query\"`\n\tPortState []int32 `json:\"PortState\" binding:\"dive,oneof= 1 2 3\"`\n}\n\ntype SwitchInterfaceSingleLineReq struct {\n\tIp         int32    `json:\"Ip\" binding:\"required\"`\n\tMetricName []string `json:\"MetricName\" binding:\"required\"`\n\tStart      int64    `json:\"Start\" binding:\"required\"`\n\tEnd        int64    `json:\"End\" binding:\"required\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/switch/dao/asset_switch.go\n```golang\npackage dao\n\nimport (\n\t\"context\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/switch/model\"\n\t\"gorm.io/gorm\"\n)\n\ntype AssetSwitchDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewAssetSwitchDao() *AssetSwitchDao {\n\treturn &AssetSwitchDao{\n\t\tdb: lib.GORMMapPool[\"business\"].Debug(),\n\t}\n}\n\nfunc (s *AssetSwitchDao) GetSwitchHardware(ctx context.Context, sn string) (*[]model.AssetSwitchHardware, error) {\n\tvar hardware []model.AssetSwitchHardware\n\tdb := s.db.Debug().Model(&model.AssetSwitchHardware{})\n\n\tif sn != \"\" {\n\t\tdb.Where(\"sn=?\", sn)\n\t}\n\terr := db.Scan(&hardware).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &hardware, err\n}\n\nfunc (s *AssetSwitchDao) GetSwitchHardwareInfo(ctx context.Context, sn string) (*model.AssetSwitchHardware, error) {\n\tvar hardware model.AssetSwitchHardware\n\terr := s.db.Model(&model.AssetSwitchHardware{}).Where(\"sn=?\", sn).Scan(&hardware).Error\n\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &hardware, err\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/switch/dao/overview.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tswitchpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_switch/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n)\n\ntype SwitchStore struct {\n\t//rpc\n\tSwitchRpcClient switchpb.ResourceSwitchClient\n\tAlarmRpcClient  alarmv1alpha.AlarmServiceClient\n\n\t//dao\n\tAssetSwitchDao *AssetSwitchDao\n}\n\nfunc NewSwitchStore() *SwitchStore {\n\t//resource\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\n\t//alarm\n\talarmAddr := lib.GetStringConf(\"base.grpc.alarm\")\n\talarmConn, err := grpcx.NewGrpcClientConn(alarmAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect alarm grpc server error, %s\": err.Error()})\n\t}\n\n\treturn &SwitchStore{\n\t\tSwitchRpcClient: switchpb.NewResourceSwitchClient(resourceConn),\n\t\tAlarmRpcClient:  alarmv1alpha.NewAlarmServiceClient(alarmConn),\n\t\tAssetSwitchDao:  NewAssetSwitchDao(),\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/switch/controller/switch.go\n```golang\npackage controller\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/switch/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/switch/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype SwitchController struct {\n\tsvc *service.SwitchService\n}\n\nfunc NewSwitchController() *SwitchController {\n\treturn &SwitchController{\n\t\tsvc: service.NewSwitchService(),\n\t}\n}\n\nfunc (s *SwitchController) SwitchOverviewAlert(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.SwitchOverviewMonitorReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.SwitchOverviewAlert(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取交换机概览监控告警失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *SwitchController) SwitchOverviewMonitor(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.SwitchOverviewMonitorReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.SwitchOverviewMonitor(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取交换机概览监控状态失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *SwitchController) SwitchOverviewTop(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.SwitchOverviewTopReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.SwitchOverviewTop(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取交换机概览Top失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *SwitchController) SwitchList(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.SwitchListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.SwitchList(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取交换机列表失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *SwitchController) SwitchDetailsOverview(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.SwitchDetailsOverviewReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.SwitchDetailsOverview(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取交换机概览失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *SwitchController) SwitchDetailsLine(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.SwitchDetailsLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.SwitchDetailsLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取交换机详情概览失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *SwitchController) SwitchHardware(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.SwitchHardwareReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.SwitchHardware(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取交换机硬件失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *SwitchController) SwitchInterfaceLine(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.SwitchInterfaceLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.SwitchInterfaceLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取交换接口折线图失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\nfunc (s *SwitchController) SwitchInterfaceList(c *gin.Context) {\n\t// 参数绑定\n\tvar params dto.SwitchInterfaceListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := s.svc.SwitchInterfaceList(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取交换机接口列表失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/switch/constant/constant.go\n```golang\npackage constant\n\nconst ()\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/switch/model/asset_switch_hardware.go\n```golang\npackage model\n\nimport (\n\t\"database/sql\"\n\t\"database/sql/driver\"\n\t\"encoding/json\"\n)\n\n// AssetSwitchHardware 交换机硬件\ntype AssetSwitchHardware struct {\n\tId            int                `gorm:\"column:id;type:int(11);primary_key;AUTO_INCREMENT;comment:ID\" json:\"id\"`\n\tSn            string             `gorm:\"column:sn;type:varchar(64);comment:设备sn号;NOT NULL\" json:\"sn\"`\n\tAirInlet      int                `gorm:\"column:air_inlet;type:int(11);comment:空气进口温度\" json:\"air_inlet\"`\n\tAirOutlet     int                `gorm:\"column:air_outlet;type:int(11);comment:空气出口温度\" json:\"air_outlet\"`\n\tBaseboardInfo BaseboardInfoSlice `gorm:\"column:baseboard_info;type:text;comment:主板信息\" json:\"baseboard_info\"`\n\tCpuInfo       CpuInfoSlice       `gorm:\"column:cpu_info;type:text;comment:cpu信息\" json:\"cpu_info\"`\n\tMemoryInfo    MemoryInfoSlice    `gorm:\"column:memory_info;type:text;comment:内存信息\" json:\"memory_info\"`\n\tPowerInfo     PowerInfoSlice     `gorm:\"column:power_info;type:text;comment:电源\" json:\"power_info\"`\n\tFanInfo       FanInfoSlice       `gorm:\"column:fan_info;type:text;comment:风扇信息\" json:\"fan_info\"`\n\tLastUpdateAt  sql.NullTime       `gorm:\"column:last_update_at;type:timestamp\" json:\"last_update_at\"`\n}\n\ntype (\n\tBaseboardInfoSlice []BaseboardInfo\n\tCpuInfoSlice       []CpuInfo\n\tMemoryInfoSlice    []MemoryInfo\n\tPowerInfoSlice     []PowerInfo\n\tFanInfoSlice       []FanInfo\n)\n\ntype BaseboardInfo struct {\n\tName             string `json:\"name\"`\n\tHealth           int    `json:\"health\"`\n\tManufacturedDate int64  `json:\"manufacturedDate\"`\n\tMfgName          string `json:\"mfgName\"`\n\tSerialNum        string `json:\"serialNum\"`\n\tPartNum          string `json:\"partNum\"`\n}\n\ntype CpuInfo struct {\n\tName        string  `json:\"name\"`\n\tHealth      int     `json:\"health\"`\n\tUtilization float64 `json:\"utilization\"`\n\tTemperature int     `json:\"temperature\"`\n\tCPUType     string  `json:\"cpuType\"`\n\tMainHertz   int     `json:\"mainHertz\"`\n\tMaxHertz    int     `json:\"maxHertz\"`\n\tCacheLv     int     `json:\"cacheLv\"`\n}\n\ntype MemoryInfo struct {\n\tName        string  `json:\"name\"`\n\tHealth      int     `json:\"health\"`\n\tUtilization float64 `json:\"utilization\"`\n\tExist       bool    `json:\"exist\"`\n\tLocation    string  `json:\"location\"`\n\tTunnel      string  `json:\"tunnel\"`\n\tSlotNum     string  `json:\"slotNum\"`\n\tMemType     string  `json:\"memType\"`\n\tRanks       string  `json:\"ranks\"`\n\tBitWide     int     `json:\"bitWide\"`\n\tMaxHertz    int     `json:\"maxHertz\"`\n\tCapacity    int     `json:\"capacity\"`\n\tTechnology  string  `json:\"technology\"`\n\tMfgName     string  `json:\"mfgName\"`\n\tSerialNum   string  `json:\"serialNum\"`\n\tPartNum     string  `json:\"partNum\"`\n}\n\ntype PowerInfo struct {\n\tName            string `json:\"name\"`\n\tHealth          int    `json:\"health\"`\n\tExist           bool   `json:\"exist\"`\n\tTemperature     int    `json:\"temperature\"`\n\tRatedPower      int    `json:\"ratedPower\"`\n\tInPower         int    `json:\"inPower\"`\n\tInModel         string `json:\"inModel\"`\n\tPowerType       string `json:\"powerType\"`\n\tFirmwareVersion string `json:\"firmwareVersion\"`\n\tMfgName         string `json:\"mfgName\"`\n\tSerialNum       string `json:\"serialNum\"`\n\tPartNum         string `json:\"partNum\"`\n}\n\ntype FanInfo struct {\n\tName       string  `json:\"name\"`\n\tHealth     int     `json:\"health\"`\n\tExist      bool    `json:\"exist\"`\n\tSpeed      int     `json:\"speed\"`\n\tSpeedRatio float64 `json:\"speedRatio\"`\n\tRedundant  bool    `json:\"redundant\"`\n}\n\nfunc (c BaseboardInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *BaseboardInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c CpuInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *CpuInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c MemoryInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *MemoryInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c PowerInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *PowerInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\nfunc (c FanInfoSlice) Value() (driver.Value, error) {\n\tb, err := json.Marshal(c)\n\treturn string(b), err\n}\n\nfunc (c *FanInfoSlice) Scan(input interface{}) error {\n\treturn json.Unmarshal(input.([]byte), c)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/switch/service/switch.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"math\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tswitch_rpc \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_switch/v1alpha/gen\"\n\tprom_client \"ezone.ksyun.com/ezone/luban/monitor/common/client/prom\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/server\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/utils\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/switch/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/switch/dto\"\n\t\"github.com/pkg/errors\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n\t\"k8s.io/klog/v2\"\n)\n\ntype SwitchService struct {\n\tStore dao.SwitchStore\n}\n\nfunc NewSwitchService() *SwitchService {\n\treturn &SwitchService{\n\t\tStore: *dao.NewSwitchStore(),\n\t}\n}\n\nfunc (s *SwitchService) SwitchOverviewAlert(ctx context.Context, par dto.SwitchOverviewMonitorReq) (*dto.SwitchOverviewAlertRsp, error) {\n\n\talertLevels := []types.OverviewAlert{\n\t\t{Name: \"紧急告警\", Level: \"p0\", Kind: \"error\", Number: 0, Unit: \"个\"},\n\t\t{Name: \"重要告警\", Level: \"p1\", Kind: \"warn\", Number: 0, Unit: \"个\"},\n\t\t{Name: \"次要告警\", Level: \"p2\", Kind: \"minor\", Number: 0, Unit: \"个\"},\n\t\t{Name: \"提醒告警\", Level: \"p3\", Kind: \"info\", Number: 0, Unit: \"个\"},\n\t}\n\n\talerts, err := s.Store.AlarmRpcClient.ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\tPageNo:   -1,\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t\tAz:       par.Az,\n\t\tStatus:   \"firing\",\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListAlerts err\")\n\t}\n\n\t//概览数据拼装\n\tvar alertSlots []types.BasicOverviewSlot\n\n\tfor _, alert := range alertLevels {\n\t\tvar alertSlotInfo types.BasicOverviewSlot\n\t\talertSlotInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:       0,\n\t\t\tName:        alert.Level,\n\t\t\tValue:       utils.CountAlertsNum(alerts.Items, \"physicalSwitch\", alert.Level),\n\t\t\tUnitType:    types.TypeNumber,\n\t\t\tUnit:        \"个\",\n\t\t\tKind:        alert.Kind,\n\t\t\tPrognosis:   0,\n\t\t\tDescription: \"\",\n\t\t}\n\t\talertSlots = append(alertSlots, alertSlotInfo)\n\t}\n\n\treturn &dto.SwitchOverviewAlertRsp{\n\t\tAlerts: alertSlots,\n\t}, nil\n\n}\n\nfunc (s *SwitchService) SwitchOverviewMonitor(ctx context.Context, par dto.SwitchOverviewMonitorReq) (*dto.SwitchOverviewMonitorRsp, error) {\n\n\t//获取交换机列表\n\tlist, err := s.Store.SwitchRpcClient.SwitchList(ctx, &switch_rpc.SwitchListRequest{\n\t\tRegionCode: par.Region,\n\t\tAzCode:     par.Az,\n\t\tPageNo:     1,\n\t\tPageSize:   -1,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar (\n\t\tipList             []string\n\t\toutIpList          []string\n\t\tsn                 []string\n\t\tmonitoringStatus   []types.BasicOverviewSlot\n\t\tinterfaceStatus    []types.BasicOverviewSlot\n\t\thardwareMonitoring []types.BasicOverviewSlot\n\t\tup                 int\n\t\tdown               int\n\t\tnormal             int\n\t\tshutdown           int\n\t\tfault              int\n\t\tcpuFault           int\n\t\tmemFault           int\n\t)\n\tfor _, v := range list.DataList {\n\t\tsn = append(sn, v.Sn)\n\t\tipList = append(ipList, v.Ip)\n\t\toutIpList = append(outIpList, v.OutbandIP)\n\t}\n\t//获取监控状态\n\tstatusPromQL, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.SwitchStatus](ipList))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tstatusPromQLStr := statusPromQL.Items[0].RealPromql\n\t//查Prometheus\n\tstatus, err := prom_client.VectorQuery(ctx, statusPromQLStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tswitchMonitorUpStatusMap := prom_client.ParseServerMonitoringStatus(status)\n\tfor _, v := range switchMonitorUpStatusMap {\n\t\tif v == \"up\" {\n\t\t\tup++\n\t\t} else {\n\t\t\tdown++\n\t\t}\n\t}\n\n\tstatusList := []string{\"监控中\", \"监控异常\"}\n\tfor _, name := range statusList {\n\t\tvar monitoringStatusInfo types.BasicOverviewSlot\n\t\tvalue := 0\n\t\tif name == \"监控中\" {\n\t\t\tvalue = up\n\t\t} else {\n\t\t\tvalue = down\n\t\t}\n\t\tmonitoringStatusInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:     0,\n\t\t\tName:      name,\n\t\t\tValue:     value,\n\t\t\tUnitType:  types.TypeNumber,\n\t\t\tUnit:      \"个\",\n\t\t\tPrognosis: 0,\n\t\t}\n\t\tmonitoringStatus = append(monitoringStatus, monitoringStatusInfo)\n\t}\n\n\t//获取接口故障数\n\tinterfaceList, err := s.Store.SwitchRpcClient.SwitchInterfaceList(ctx, &switch_rpc.SwitchInterfaceListRequest{\n\t\tPageNo:   1,\n\t\tPageSize: -1,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, v := range interfaceList.Data {\n\t\tcontainsString := ContainsString(sn, v.Sn)\n\t\tif containsString == false {\n\t\t\tcontinue\n\t\t}\n\t\tswitch int(v.PortState) {\n\t\tcase 1:\n\t\t\tnormal++\n\t\tcase 2:\n\t\t\tshutdown++\n\t\tcase 3:\n\t\t\tfault++\n\t\t}\n\t}\n\tfaultList := []string{\"故障\", \"正常\", \"关闭\"}\n\tfor _, name := range faultList {\n\t\tvar interfaceStatusInfo types.BasicOverviewSlot\n\t\tvalue := 0\n\t\tswitch name {\n\t\tcase \"故障\":\n\t\t\tvalue = fault\n\t\tcase \"正常\":\n\t\t\tvalue = normal\n\t\tcase \"关闭\":\n\t\t\tvalue = shutdown\n\t\t}\n\t\tinterfaceStatusInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:     0,\n\t\t\tName:      name,\n\t\t\tValue:     value,\n\t\t\tUnitType:  types.TypeNumber,\n\t\t\tUnit:      \"个\",\n\t\t\tPrognosis: 0,\n\t\t}\n\t\tinterfaceStatus = append(interfaceStatus, interfaceStatusInfo)\n\t}\n\n\t//获取交换机硬件\n\thardware, _ := s.Store.AssetSwitchDao.GetSwitchHardware(ctx, \"\")\n\tfor _, v := range *hardware {\n\t\tcontainsString := ContainsString(sn, v.Sn)\n\t\tif containsString == false {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, cpu := range v.CpuInfo {\n\t\t\tif cpu.Health == 3 {\n\t\t\t\tcpuFault++\n\t\t\t}\n\t\t}\n\t\tfor _, mem := range v.MemoryInfo {\n\t\t\tif mem.Health == 3 {\n\t\t\t\tmemFault++\n\t\t\t}\n\t\t}\n\t}\n\n\t//硬件监控\n\thardwareFaultList := []string{\"CPU故障数量\", \"内存故障数量\"}\n\tfor _, name := range hardwareFaultList {\n\t\tvar hardwareMonitoringInfo types.BasicOverviewSlot\n\t\tvalue := 0\n\t\tswitch name {\n\t\tcase \"CPU故障数量\":\n\t\t\tvalue = cpuFault\n\t\tcase \"内存故障数量\":\n\t\t\tvalue = memFault\n\t\t}\n\t\thardwareMonitoringInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:     0,\n\t\t\tName:      name,\n\t\t\tValue:     value,\n\t\t\tUnitType:  types.TypeNumber,\n\t\t\tUnit:      \"个\",\n\t\t\tPrognosis: 0,\n\t\t}\n\t\thardwareMonitoring = append(hardwareMonitoring, hardwareMonitoringInfo)\n\t}\n\treturn &dto.SwitchOverviewMonitorRsp{\n\t\tMonitoringStatus:   monitoringStatus,\n\t\tInterfaceStatus:    interfaceStatus,\n\t\tHardwareMonitoring: hardwareMonitoring,\n\t}, nil\n\n}\n\nfunc ContainsString(slice []string, item string) bool {\n\tfor _, str := range slice {\n\t\tif str == item {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc (s *SwitchService) SwitchOverviewTop(ctx context.Context, par dto.SwitchOverviewTopReq) (*dto.SwitchOverviewTopRsp, error) {\n\n\tres := dto.SwitchOverviewTopRsp{}\n\ttopk, _ := strconv.Atoi(par.TopK)\n\tt := tools.FormatTime(float64(par.End/1000 - par.Start/1000))\n\n\tlist, err := s.Store.SwitchRpcClient.SwitchList(ctx, &switch_rpc.SwitchListRequest{\n\t\tRegionCode: par.Region,\n\t\tAzCode:     par.Az,\n\t\tPageNo:     1,\n\t\tPageSize:   -1,\n\t})\n\n\tif err != nil {\n\t\treturn &res, nil\n\t}\n\tif list.TotalCount == 0 {\n\t\tklog.Info(\"getSwitchListFail\")\n\t\treturn nil, err\n\t}\n\tvar ipList []string\n\tipInterfaceMap := make(map[string]string, 0)\n\tidSnMap := make(map[string]string, list.TotalCount)\n\n\tfor _, switchs := range list.DataList {\n\t\tipList = append(ipList, switchs.Ip)\n\t\tidSnMap[switchs.Ip] = strconv.Itoa(int(switchs.Id)) + \":\" + switchs.Sn\n\t\tinterfaceLis, err := s.Store.SwitchRpcClient.SwitchInterfaceList(ctx, &switch_rpc.SwitchInterfaceListRequest{\n\t\t\tPageNo:    0,\n\t\t\tPageSize:  -1,\n\t\t\tSn:        switchs.Sn,\n\t\t\tPortState: []int32{1},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tvar interfacesIndex []string\n\t\tfor _, interfaces := range interfaceLis.Data {\n\t\t\tindex := strconv.Itoa(int(interfaces.IfIndex))\n\t\t\tinterfacesIndex = append(interfacesIndex, index)\n\t\t}\n\t\tif switchs.OutbandIP == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tipInterfaceMap[switchs.OutbandIP] = strings.Join(interfacesIndex, \"|\")\n\t}\n\tklog.Info(\"ipInterfaceMap\", ipInterfaceMap)\n\n\tips := strings.Join(ipList, \"|\")\n\n\tvar tops []types.BasicOverviewSlot\n\n\tfor _, metric := range par.MetricName {\n\t\tswitch metric {\n\t\tcase \"CpuRate\":\n\t\t\tpsql := server.GetSwitchCpuRateTop(par.TopK, ips, t)\n\t\t\tfmt.Println(\"CpuRatePSql\", psql)\n\t\t\tresult, err := prom_client.VectorQuery(ctx, psql)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"CpuRate\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\tUnit:     \"%\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor _, v := range result {\n\t\t\t\tip := string(v.Metric[\"instance\"])\n\t\t\t\tsubName := \"\"\n\t\t\t\tif idSn, ok := idSnMap[ip]; ok {\n\t\t\t\t\tsubName = idSn\n\t\t\t\t}\n\t\t\t\tvv := types.BasicOverviewSlotValue{\n\t\t\t\t\tName:     string(v.Metric[\"hostname\"]),\n\t\t\t\t\tSubName:  subName,\n\t\t\t\t\tCode:     ip,\n\t\t\t\t\tUnit:     \"%\",\n\t\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\t}\n\t\t\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\t\t\tvv.Value = 0\n\t\t\t\t}\n\t\t\t\tvv.Value = tools.FormPercent(float64(v.Value) / 100)\n\t\t\t\tval = append(val, vv)\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: val,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\tcase \"MemRate\":\n\t\t\tpsql := server.GetSwitchMemRateTop(par.TopK, ips, t)\n\t\t\tfmt.Println(\"MemRatePSql\", psql)\n\t\t\tresult, err := prom_client.VectorQuery(ctx, psql)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"MemRate\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\tUnit:     \"%\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor _, v := range result {\n\t\t\t\tip := string(v.Metric[\"instance\"])\n\t\t\t\tsubName := \"\"\n\t\t\t\tif idSn, ok := idSnMap[ip]; ok {\n\t\t\t\t\tsubName = idSn\n\t\t\t\t}\n\t\t\t\tvv := types.BasicOverviewSlotValue{\n\t\t\t\t\tName:     string(v.Metric[\"hostname\"]),\n\t\t\t\t\tSubName:  subName,\n\t\t\t\t\tCode:     ip,\n\t\t\t\t\tUnit:     \"%\",\n\t\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\t}\n\t\t\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\t\t\tvv.Value = 0\n\t\t\t\t}\n\t\t\t\tvv.Value = tools.FormPercent(float64(v.Value) / 100)\n\t\t\t\tval = append(val, vv)\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: val,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\tcase \"DropRateOut\":\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"接口丢包率-发送\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\tUnit:     \"%\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor outBandIp, indexs := range ipInterfaceMap {\n\t\t\t\tpromql := server.SwitchInterfaceOutDropRates(outBandIp, indexs, t)\n\t\t\t\tklog.Info(\"DropRateOutPromql\", promql)\n\t\t\t\tresult, err := prom_client.VectorQuery(ctx, promql)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tfor _, m := range result {\n\t\t\t\t\tsubName := \"\"\n\t\t\t\t\tif idSn, ok := idSnMap[string(m.Metric[\"instance\"])]; ok {\n\t\t\t\t\t\tsubName = idSn\n\t\t\t\t\t}\n\t\t\t\t\tslotValue := types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:     fmt.Sprintf(\"%s(%s)(%s)\", string(m.Metric[\"ifDescr\"]), string(m.Metric[\"hostname\"]), string(m.Metric[\"instance\"])),\n\t\t\t\t\t\tSubName:  subName,\n\t\t\t\t\t\tCode:     string(m.Metric[\"instance\"]),\n\t\t\t\t\t\tUnit:     \"%\",\n\t\t\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\t\t}\n\t\t\t\t\tif math.IsNaN(float64(m.Value)) {\n\t\t\t\t\t\tm.Value = 0\n\t\t\t\t\t}\n\t\t\t\t\tslotValue.Value = tools.FormPercent(m.Value)\n\t\t\t\t\tval = append(val, slotValue)\n\t\t\t\t}\n\t\t\t}\n\t\t\tout := InterfaceValueOrder(val, \"desc\")\n\t\t\tif len(out) >= topk {\n\t\t\t\tout = out[:topk]\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: out,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\tcase \"DropRateIn\":\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"接口丢包率-接收\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\tUnit:     \"%\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor outBandIp, indexs := range ipInterfaceMap {\n\t\t\t\tpromql := server.SwitchInterfaceInDropRates(outBandIp, indexs, t)\n\t\t\t\tklog.Info(\"DropRateInPromql\", promql)\n\t\t\t\tresult, err := prom_client.VectorQuery(ctx, promql)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tfor _, m := range result {\n\t\t\t\t\tsubName := \"\"\n\t\t\t\t\tif idSn, ok := idSnMap[string(m.Metric[\"instance\"])]; ok {\n\t\t\t\t\t\tsubName = idSn\n\t\t\t\t\t}\n\t\t\t\t\tslotValue := types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:     fmt.Sprintf(\"%s(%s)(%s)\", string(m.Metric[\"ifDescr\"]), string(m.Metric[\"hostname\"]), string(m.Metric[\"instance\"])),\n\t\t\t\t\t\tSubName:  subName,\n\t\t\t\t\t\tCode:     string(m.Metric[\"instance\"]),\n\t\t\t\t\t\tUnit:     \"%\",\n\t\t\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\t\t}\n\t\t\t\t\tif math.IsNaN(float64(m.Value)) {\n\t\t\t\t\t\tm.Value = 0\n\t\t\t\t\t}\n\t\t\t\t\tslotValue.Value = tools.FormPercent(m.Value)\n\t\t\t\t\tval = append(val, slotValue)\n\t\t\t\t}\n\t\t\t}\n\t\t\tout := InterfaceValueOrder(val, \"desc\")\n\t\t\tif len(out) >= topk {\n\t\t\t\tout = out[:topk]\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: out,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\tcase \"ErrRateOut\":\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"接口错包率-发送\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\tUnit:     \"%\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor outBandIp, indexs := range ipInterfaceMap {\n\t\t\t\tpromql := server.SwitchInterfaceOutErrRates(outBandIp, indexs, t)\n\t\t\t\tklog.Info(\"ErrRateOutPromql\", promql)\n\t\t\t\tresult, err := prom_client.VectorQuery(ctx, promql)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tfor _, m := range result {\n\t\t\t\t\tsubName := \"\"\n\t\t\t\t\tif idSn, ok := idSnMap[string(m.Metric[\"instance\"])]; ok {\n\t\t\t\t\t\tsubName = idSn\n\t\t\t\t\t}\n\t\t\t\t\tslotValue := types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:     fmt.Sprintf(\"%s(%s)(%s)\", string(m.Metric[\"ifDescr\"]), string(m.Metric[\"hostname\"]), string(m.Metric[\"instance\"])),\n\t\t\t\t\t\tSubName:  subName,\n\t\t\t\t\t\tCode:     string(m.Metric[\"instance\"]),\n\t\t\t\t\t\tUnit:     \"%\",\n\t\t\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\t\t}\n\t\t\t\t\tif math.IsNaN(float64(m.Value)) {\n\t\t\t\t\t\tm.Value = 0\n\t\t\t\t\t}\n\t\t\t\t\tslotValue.Value = tools.FormPercent(m.Value)\n\t\t\t\t\tval = append(val, slotValue)\n\t\t\t\t}\n\t\t\t}\n\t\t\tout := InterfaceValueOrder(val, \"desc\")\n\t\t\tif len(out) >= topk {\n\t\t\t\tout = out[:topk]\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: out,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\tcase \"ErrRateIn\":\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"接口错包率-接收\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\tUnit:     \"%\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor outBandIp, indexs := range ipInterfaceMap {\n\t\t\t\tpromql := server.SwitchInterfaceInErrRates(outBandIp, indexs, t)\n\t\t\t\tklog.Info(\"ErrRateInPromql\", promql)\n\t\t\t\tresult, err := prom_client.VectorQuery(ctx, promql)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tfor _, m := range result {\n\t\t\t\t\tsubName := \"\"\n\t\t\t\t\tif idSn, ok := idSnMap[string(m.Metric[\"instance\"])]; ok {\n\t\t\t\t\t\tsubName = idSn\n\t\t\t\t\t}\n\t\t\t\t\tslotValue := types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:     fmt.Sprintf(\"%s(%s)(%s)\", string(m.Metric[\"ifDescr\"]), string(m.Metric[\"hostname\"]), string(m.Metric[\"instance\"])),\n\t\t\t\t\t\tSubName:  subName,\n\t\t\t\t\t\tCode:     string(m.Metric[\"instance\"]),\n\t\t\t\t\t\tUnit:     \"%\",\n\t\t\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\t\t}\n\t\t\t\t\tif math.IsNaN(float64(m.Value)) {\n\t\t\t\t\t\tm.Value = 0\n\t\t\t\t\t}\n\t\t\t\t\tslotValue.Value = tools.FormPercent(m.Value)\n\t\t\t\t\tval = append(val, slotValue)\n\t\t\t\t}\n\t\t\t}\n\t\t\tout := InterfaceValueOrder(val, \"desc\")\n\t\t\tif len(out) >= topk {\n\t\t\t\tout = out[:topk]\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: out,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\tcase \"BandRateOut\":\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"接口带宽利用率-发送\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\tUnit:     \"%\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor outBandIp, indexs := range ipInterfaceMap {\n\t\t\t\tpromql := server.SwitchInterfaceBandOutRates(outBandIp, indexs, t)\n\t\t\t\tklog.Info(\"BandRateOutPromql \", promql)\n\t\t\t\tresult, err := prom_client.VectorQuery(ctx, promql)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tfor _, m := range result {\n\t\t\t\t\tsubName := \"\"\n\t\t\t\t\tif idSn, ok := idSnMap[string(m.Metric[\"instance\"])]; ok {\n\t\t\t\t\t\tsubName = idSn\n\t\t\t\t\t}\n\t\t\t\t\tslotValue := types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:     fmt.Sprintf(\"%s(%s)(%s)\", string(m.Metric[\"ifDescr\"]), string(m.Metric[\"hostname\"]), string(m.Metric[\"instance\"])),\n\t\t\t\t\t\tSubName:  subName,\n\t\t\t\t\t\tCode:     string(m.Metric[\"instance\"]),\n\t\t\t\t\t\tUnit:     \"%\",\n\t\t\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\t\t}\n\t\t\t\t\tif math.IsNaN(float64(m.Value)) {\n\t\t\t\t\t\tm.Value = 0\n\t\t\t\t\t}\n\t\t\t\t\tslotValue.Value = tools.FormPercent(m.Value)\n\t\t\t\t\tval = append(val, slotValue)\n\t\t\t\t}\n\t\t\t}\n\t\t\tout := InterfaceValueOrder(val, \"desc\")\n\t\t\tif len(out) >= topk {\n\t\t\t\tout = out[:topk]\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: out,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\tcase \"BandRateIn\":\n\t\t\tinfo := types.BasicOverviewSlotInfo{\n\t\t\t\tName:     \"接口带宽利用率-接收\",\n\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\tUnit:     \"%\",\n\t\t\t}\n\t\t\tvar val []types.BasicOverviewSlotValue\n\t\t\tfor outBandIp, indexs := range ipInterfaceMap {\n\t\t\t\tpromql := server.SwitchInterfaceBandInRates(outBandIp, indexs, t)\n\t\t\t\tklog.Info(\"BandRateInPromql \", promql)\n\t\t\t\tresult, err := prom_client.VectorQuery(ctx, promql)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tfor _, m := range result {\n\t\t\t\t\tsubName := \"\"\n\t\t\t\t\tif idSn, ok := idSnMap[string(m.Metric[\"instance\"])]; ok {\n\t\t\t\t\t\tsubName = idSn\n\t\t\t\t\t}\n\t\t\t\t\tslotValue := types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:     fmt.Sprintf(\"%s(%s)(%s)\", string(m.Metric[\"ifDescr\"]), string(m.Metric[\"hostname\"]), string(m.Metric[\"instance\"])),\n\t\t\t\t\t\tSubName:  subName,\n\t\t\t\t\t\tCode:     string(m.Metric[\"instance\"]),\n\t\t\t\t\t\tUnit:     \"%\",\n\t\t\t\t\t\tUnitType: types.TypePercent,\n\t\t\t\t\t}\n\t\t\t\t\tif math.IsNaN(float64(m.Value)) {\n\t\t\t\t\t\tm.Value = 0\n\t\t\t\t\t}\n\t\t\t\t\tslotValue.Value = tools.FormPercent(m.Value)\n\t\t\t\t\tval = append(val, slotValue)\n\t\t\t\t}\n\t\t\t}\n\t\t\tout := InterfaceValueOrder(val, \"desc\")\n\t\t\tif len(out) >= topk {\n\t\t\t\tout = out[:topk]\n\t\t\t}\n\t\t\tvalue := types.BasicOverviewSlot{\n\t\t\t\tInfo:   info,\n\t\t\t\tValues: out,\n\t\t\t}\n\t\t\ttops = append(tops, value)\n\t\t}\n\n\t}\n\treturn &dto.SwitchOverviewTopRsp{\n\t\tTops: tops,\n\t}, nil\n\n}\n\nfunc (s *SwitchService) SwitchList(ctx context.Context, par dto.SwitchListReq) (*dto.SwitchListRsp, error) {\n\n\trpcSwitch, err := s.Store.SwitchRpcClient.SwitchList(ctx, &switch_rpc.SwitchListRequest{\n\t\tPageNo:     1,\n\t\tPageSize:   -1,\n\t\tRegionCode: par.Region,\n\t\tAzCode:     par.Az,\n\t\tLabCode:    par.Lab,\n\t\tQuery:      par.Query,\n\t\tRunStatus:  par.RunStatus,\n\t\tSnmpStatus: par.SnmpStatus,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t//获取服务器cpu mem 故障数\n\tswitchCpuErrNum := make(map[string]int, rpcSwitch.TotalCount)\n\tswitchMemErrNum := make(map[string]int, rpcSwitch.TotalCount)\n\thardware, err := s.Store.AssetSwitchDao.GetSwitchHardware(ctx, \"\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor _, v := range *hardware {\n\t\tfaultyCPUs := 0\n\t\tfor _, cpu := range v.CpuInfo {\n\t\t\tif cpu.Health == 3 {\n\t\t\t\tfaultyCPUs++\n\t\t\t}\n\t\t}\n\t\tfaultyMems := 0\n\t\tfor _, mem := range v.MemoryInfo {\n\t\t\tif mem.Health == 3 {\n\t\t\t\tfaultyMems++\n\t\t\t}\n\t\t}\n\t\tswitchCpuErrNum[v.Sn] = faultyCPUs\n\t\tswitchMemErrNum[v.Sn] = faultyMems\n\t}\n\n\tvar switchList []dto.SwitchList\n\tvar identifier []string\n\tfor _, v := range rpcSwitch.DataList {\n\t\t//\t\t//\t\t\tPower:       \"\",\n\t\t//\t\t//\t\t\tAlertNumber: 0,\n\t\tswitchInfo := dto.SwitchList{\n\t\t\tId:         v.Id,\n\t\t\tName:       v.Name,\n\t\t\tRunStatus:  v.RunStatus,\n\t\t\tSnmpStatus: v.SnmpStatus,\n\t\t\tRegion:     v.RegionCode,\n\t\t\tAz:         v.AzCode,\n\t\t\tLab:        v.LabCode,\n\t\t\tSn:         v.Sn,\n\t\t\tIp:         v.Ip,\n\t\t\tOutBindIp:  v.OutbandIP,\n\t\t\tErrPortNum: v.InterfaceErrCount,\n\t\t\tCpuErrNum:  switchCpuErrNum[v.Sn],\n\t\t\tMemErrNum:  switchMemErrNum[v.Sn],\n\t\t\tPower:      v.Power,\n\t\t}\n\t\t//获取cpu使用率\n\t\tcpuRate, _ := GetSwitchUsageRateMap(s.Store, ctx, []string{v.Ip}, \"cpu\")\n\t\t//获取内存使用率\n\t\tmemRate, _ := GetSwitchUsageRateMap(s.Store, ctx, []string{v.Ip}, \"mem\")\n\t\tswitchInfo.CpuLoad = cpuRate[v.Name]\n\t\tswitchInfo.MemLoad = memRate[v.Name]\n\n\t\tif len(par.RunStatus) != 0 { //筛选交换机运行状态\n\t\t\tstateIn := tools.In(par.RunStatus, switchInfo.RunStatus)\n\t\t\tif !stateIn {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tif len(par.SnmpStatus) != 0 { //筛选交换机snmp状态\n\t\t\tstateIn := tools.In(par.SnmpStatus, switchInfo.SnmpStatus)\n\t\t\tif !stateIn {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tif par.CpuErrNum == \"Zero\" && switchInfo.CpuErrNum > 0 { //筛选cpu故障数等于0的\n\t\t\tcontinue\n\t\t}\n\t\tif par.MemErrNum == \"Zero\" && switchInfo.MemErrNum > 0 { //筛选mem故障数等于0的\n\t\t\tcontinue\n\t\t}\n\t\tif par.CpuErrNum == \"NoZero\" && switchInfo.CpuErrNum == 0 { //筛选cpu故障数大于0的\n\t\t\tcontinue\n\t\t}\n\t\tif par.MemErrNum == \"NoZero\" && switchInfo.MemErrNum == 0 { //筛选cpu故障数大于0的\n\t\t\tcontinue\n\t\t}\n\t\tswitchList = append(switchList, switchInfo)\n\t\tidentifier = append(identifier, v.Name)\n\t}\n\n\t//order\n\tif par.OrderCode != \"\" && par.OrderType != \"\" {\n\t\tresults := utils.Bucket{}\n\t\tfor i := 0; i < len(switchList); i++ {\n\t\t\tresults.Slice = append(results.Slice, switchList[i])\n\t\t}\n\t\ttime_by := func(a, b interface{}) bool {\n\t\t\treturn true\n\t\t}\n\t\tswitch par.OrderCode {\n\t\tcase \"CpuLoad\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchList).CpuLoad < b.(dto.SwitchList).CpuLoad\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchList).CpuLoad > b.(dto.SwitchList).CpuLoad\n\t\t\t\t}\n\t\t\t}\n\n\t\tcase \"MemLoad\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchList).MemLoad < b.(dto.SwitchList).MemLoad\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchList).MemLoad > b.(dto.SwitchList).MemLoad\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"ErrPortNum\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchList).ErrPortNum < b.(dto.SwitchList).ErrPortNum\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchList).ErrPortNum > b.(dto.SwitchList).ErrPortNum\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tresults.By = time_by\n\t\tsort.Sort(results)\n\t\tfor i := 0; i < len(results.Slice); i++ {\n\t\t\tswitchList[i] = results.Slice[i].(dto.SwitchList)\n\t\t}\n\t}\n\n\t//分页\n\tlow := (par.PageNo - 1) * par.PageSize\n\tif low > len(switchList) {\n\t\tklog.Info(\"PageSize is too large\")\n\t}\n\n\thight := low + par.PageSize\n\tif hight > len(switchList) {\n\t\thight = len(switchList)\n\t}\n\n\tvar results dto.SwitchListRsp\n\tresults.PageSize = par.PageSize\n\tresults.PageNo = par.PageNo\n\tresults.TotalCount = int64(len(switchList))\n\tresults.SwitchList = switchList[low:hight]\n\n\talerts, err := s.Store.AlarmRpcClient.ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\tPageNo:   -1,\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t\tStatus:   \"firing\",\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListAlerts err\")\n\t}\n\n\talertNum := utils.CountAlertsListNum(alerts.Items, \"physicalSwitch\")\n\n\t//告警数量\n\tfor k, v := range results.SwitchList {\n\t\tresults.SwitchList[k].AlertNumber = alertNum[v.Name]\n\t}\n\n\treturn &results, err\n\n}\n\nfunc GetSwitchUsageRateMap(s dao.SwitchStore, ctx context.Context, ips []string, errType string) (map[string]float64, error) {\n\tvar promQLStr string\n\tswitch errType {\n\tcase \"cpu\":\n\t\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.SwitchCpuUsageRate](ips))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tpromQLStr = promQL.Items[0].RealPromql\n\tcase \"mem\":\n\t\tpromQL, err := s.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.SwitchMemUsageRate](ips))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tpromQLStr = promQL.Items[0].RealPromql\n\t}\n\t//查Prometheus\n\tpromRes, err := prom_client.VectorQuery(ctx, promQLStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tres := make(map[string]float64)\n\tfor _, v := range promRes {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\thostname := string(v.Metric[\"hostname\"])\n\t\t_, ok := res[hostname]\n\t\tif !ok {\n\t\t\tres[hostname] = tools.FormPercent(float64(v.Value))\n\t\t}\n\t}\n\treturn res, nil\n}\n\nfunc InterfaceValueOrder(in []types.BasicOverviewSlotValue, code string) []types.BasicOverviewSlotValue {\n\tresults := utils.Bucket{}\n\tfor i := 0; i < len(in); i++ {\n\t\tresults.Slice = append(results.Slice, in[i])\n\t}\n\ttime_by := func(a, b interface{}) bool {\n\t\treturn true\n\t}\n\n\tswitch code {\n\tcase \"asc\":\n\t\ttime_by = func(a, b interface{}) bool {\n\t\t\taa, _ := strconv.ParseFloat(tools.Strval(a.(types.BasicOverviewSlotValue).Value), 64)\n\t\t\tbb, _ := strconv.ParseFloat(tools.Strval(b.(types.BasicOverviewSlotValue).Value), 64)\n\t\t\treturn aa < bb\n\t\t}\n\tcase \"desc\":\n\t\ttime_by = func(a, b interface{}) bool {\n\t\t\taa, _ := strconv.ParseFloat(tools.Strval(a.(types.BasicOverviewSlotValue).Value), 64)\n\t\t\tbb, _ := strconv.ParseFloat(tools.Strval(b.(types.BasicOverviewSlotValue).Value), 64)\n\t\t\treturn aa > bb\n\t\t}\n\t}\n\tresults.By = time_by\n\tsort.Sort(results)\n\tfor i := 0; i < len(in); i++ {\n\t\tin[i] = results.Slice[i].(types.BasicOverviewSlotValue)\n\t}\n\treturn in\n}\n\nfunc (s *SwitchService) SwitchDetailsOverview(ctx context.Context, par dto.SwitchDetailsOverviewReq) (*dto.SwitchDetailsOverviewRsp, error) {\n\n\trpcSwitch, err := s.Store.SwitchRpcClient.SwitchDetails(ctx, &switch_rpc.SwitchDetailsRequest{\n\t\tId: par.Id,\n\t})\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tip := rpcSwitch.Ip\n\n\tvar (\n\t\tdetailsOverview []types.BasicOverviewSlot\n\t\tinterfaceStatus []types.BasicOverviewSlot\n\t\tcpuLoad         float64\n\t\tmemLoad         float64\n\t)\n\n\t//cpu使用率\n\tcpuSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.SwitchCpuUsageRate]([]string{ip}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcpuPromQL := cpuSp.Items[0].RealPromql\n\tklog.Info(\"cpuPromQL\", cpuPromQL)\n\tcpu, err := prom_client.VectorQuery(ctx, cpuPromQL)\n\tif err != nil {\n\t\tklog.Info(err)\n\t}\n\tfor _, v := range cpu {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tcpuLoad = tools.FormPercent(float64(v.Value))\n\t}\n\tcpuRes := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:     \"CpuUsage\",\n\t\t\tValue:    cpuLoad,\n\t\t\tUnit:     \"\",\n\t\t\tUnitType: types.TypeNumber,\n\t\t},\n\t}\n\n\t//mem使用率\n\tmemSp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.SwitchMemUsageRate]([]string{ip}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tmemPromQL := memSp.Items[0].RealPromql\n\tklog.Info(\"memPromQL\", memPromQL)\n\tmem, err := prom_client.VectorQuery(ctx, memPromQL)\n\tif err != nil {\n\t\tklog.Info(err)\n\t}\n\tfor _, v := range mem {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tmemLoad = tools.FormPercent(float64(v.Value))\n\t}\n\tmemRes := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tName:     \"MemoryUsage\",\n\t\t\tValue:    memLoad,\n\t\t\tUnit:     \"\",\n\t\t\tUnitType: types.TypeNumber,\n\t\t},\n\t}\n\n\tdetailsOverview = append(detailsOverview, cpuRes, memRes)\n\n\tfaultList := []string{\"故障\", \"正常\", \"关闭\"}\n\tfor _, name := range faultList {\n\t\tvar interfaceStatusInfo types.BasicOverviewSlot\n\t\tvalue := 0\n\t\tswitch name {\n\t\tcase \"正常\":\n\t\t\tvalue = int(rpcSwitch.InterfaceNormalCount)\n\t\tcase \"故障\":\n\t\t\tvalue = int(rpcSwitch.InterfaceFaultCount)\n\t\tcase \"关闭\":\n\t\t\tvalue = int(rpcSwitch.InterfaceShutdownCount)\n\t\t}\n\t\tinterfaceStatusInfo.Info = types.BasicOverviewSlotInfo{\n\t\t\tIndex:     0,\n\t\t\tName:      name,\n\t\t\tValue:     value,\n\t\t\tUnitType:  types.TypeNumber,\n\t\t\tUnit:      \"个\",\n\t\t\tPrognosis: 0,\n\t\t}\n\t\tinterfaceStatus = append(interfaceStatus, interfaceStatusInfo)\n\t}\n\n\treturn &dto.SwitchDetailsOverviewRsp{\n\t\tDetailsOverview: detailsOverview,\n\t\tInterfaceStatus: interfaceStatus,\n\t}, nil\n\n}\n\nfunc (s *SwitchService) SwitchDetailsLine(ctx context.Context, par dto.SwitchDetailsLineReq) (*dto.SwitchDetailsOverviewLineRsp, error) {\n\n\trpcSwitch, err := s.Store.SwitchRpcClient.SwitchDetails(ctx, &switch_rpc.SwitchDetailsRequest{\n\t\tId: par.Id,\n\t})\n\n\tif err != nil {\n\t\tklog.Info(\"getSwitchDetailsFail\")\n\t\treturn nil, err\n\t}\n\n\tip := rpcSwitch.Ip\n\tstart := par.Start / 1e3\n\tend := par.End / 1e3\n\tstep := tools.TimeToStepForInt(end - start)\n\n\tvar lines []types.BasicOverviewSlot\n\n\tfor i := 0; i < len(par.MetricName); i++ {\n\n\t\tswitch par.MetricName[i] {\n\t\tcase \"Cpu\": //cpu使用率\n\t\t\tcpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.SwitchCpuUsageRate]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tfmt.Println(\"cpuMode\", cpuMode)\n\t\t\trealPromql := cpuMode.Items[0].RealPromql\n\t\t\tfmt.Println(\"cpuSql\", realPromql)\n\t\t\tmatrix, err := prom_client.MatrixQuery(ctx, realPromql, v1.Range{\n\t\t\t\tStart: time.Unix(start, 0),\n\t\t\t\tEnd:   time.Unix(end, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\t\t\tfor _, m := range matrix {\n\t\t\t\tline := types.BasicOverviewSlot{}\n\n\t\t\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\t\t\tIndex:    0,\n\t\t\t\t\tName:     \"Cpu使用率\",\n\t\t\t\t\tValue:    0,\n\t\t\t\t\tUnitType: types.TypeNumber,\n\t\t\t\t\tUnit:     \"\",\n\t\t\t\t}\n\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tUnitType:    types.TypeNumber,\n\t\t\t\t\t\tUnit:        \"\",\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"\",\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tlines = append(lines, line)\n\t\t\t}\n\t\tcase \"Memory\": //内存使用率\n\t\t\tcpuMode, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.TemplateMap[server.SwitchMemUsageRate]([]string{ip}))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\trealPromql := cpuMode.Items[0].RealPromql\n\t\t\tfmt.Println(\"memSql\", realPromql)\n\t\t\tmatrix, err := prom_client.MatrixQuery(ctx, realPromql, v1.Range{\n\t\t\t\tStart: time.Unix(start, 0),\n\t\t\t\tEnd:   time.Unix(end, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\t\t\tfor _, m := range matrix {\n\t\t\t\tline := types.BasicOverviewSlot{}\n\n\t\t\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\t\t\tIndex:    0,\n\t\t\t\t\tName:     \"内存使用率\",\n\t\t\t\t\tValue:    0,\n\t\t\t\t\tUnitType: types.TypeNumber,\n\t\t\t\t\tUnit:     \"\",\n\t\t\t\t}\n\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tUnit:        \"\",\n\t\t\t\t\t\tUnitType:    types.TypeNumber,\n\t\t\t\t\t\tKind:        \"\",\n\t\t\t\t\t\tDescription: \"\",\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tlines = append(lines, line)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn &dto.SwitchDetailsOverviewLineRsp{\n\t\tLines: lines,\n\t}, nil\n\n}\n\ntype HardwareState struct {\n\tState string `json:\"state\" description:\"状态\"`\n\tName  string `json:\"name\" description:\"名称\"`\n}\n\nvar StateSlice = []HardwareState{\n\t{\n\t\tState: \"1\",\n\t\tName:  \"正常\",\n\t},\n\t{\n\t\tState: \"2\",\n\t\tName:  \"告警\",\n\t},\n\t{\n\t\tState: \"3\",\n\t\tName:  \"故障\",\n\t},\n\t{\n\t\tState: \"0\",\n\t\tName:  \"未知\",\n\t},\n}\n\nfunc (s *SwitchService) SwitchHardware(ctx context.Context, par dto.SwitchHardwareReq) (*dto.SwitchHardwareRsp, error) {\n\n\tinterfaceList, err := s.Store.SwitchRpcClient.SwitchInterfaceList(ctx, &switch_rpc.SwitchInterfaceListRequest{\n\t\tSn:       par.Sn,\n\t\tPageNo:   1,\n\t\tPageSize: -1,\n\t})\n\tif err != nil {\n\t\tklog.Error(\"getSwitchInterfaceListFail\", interfaceList)\n\t}\n\n\thardware, _ := s.Store.AssetSwitchDao.GetSwitchHardwareInfo(ctx, par.Sn)\n\tfmt.Printf(\"hardware %+v\", hardware)\n\tvar (\n\t\tinTemp     []types.BasicOverviewSlot\n\t\toutTemp    []types.BasicOverviewSlot\n\t\tportStatus []types.BasicOverviewSlot\n\t\tcpuState   []types.BasicOverviewSlot\n\t\tmemState   []types.BasicOverviewSlot\n\t\tpowerState []types.BasicOverviewSlot\n\t\tfanState   []types.BasicOverviewSlot\n\t\tboardList  []dto.MainBoard\n\t\tcpuList    dto.CpuDetail\n\t\tmemList    dto.MemDetail\n\t\tpowerList  []dto.Power\n\t\tfanList    []dto.Fan\n\t)\n\n\tvar inlet types.BasicOverviewSlot\n\tvar outlet types.BasicOverviewSlot\n\tinlet.Info = types.BasicOverviewSlotInfo{\n\t\tName:  \"进风口温度\",\n\t\tValue: hardware.AirInlet,\n\t}\n\toutlet.Info = types.BasicOverviewSlotInfo{\n\t\tName:  \"出风口温度\",\n\t\tValue: hardware.AirOutlet,\n\t}\n\tinTemp = append(inTemp, inlet)\n\toutTemp = append(outTemp, outlet)\n\n\t//接口运行状态\n\tinterfaceMap := make(map[int]int)\n\tfor _, status := range interfaceList.Data {\n\t\tinterfaceMap[int(status.PortState)]++\n\t}\n\tportStat, _ := GetHardwareInterfaceStatus(s.Store, ctx, interfaceMap)\n\tportStatus = append(portStatus, portStat)\n\n\t//cpu\n\tstateMapCpu := make(map[int]int)\n\tfor _, v := range hardware.CpuInfo {\n\t\tcpuList.Sum++\n\t\tmainHertz := strconv.Itoa(v.MainHertz)\n\t\tmaxHertz := strconv.Itoa(v.MaxHertz)\n\n\t\tcpuList.CpuList = append(cpuList.CpuList, dto.Cpu{\n\t\t\tName:        v.Name,\n\t\t\tState:       v.Health,\n\t\t\tUsedRate:    v.Utilization,\n\t\t\tTemperature: v.Temperature,\n\t\t\tModel:       v.CPUType,\n\t\t\tClockSpeed:  mainHertz + \"MHz\",\n\t\t\tMaxClock:    maxHertz + \"MHz\",\n\t\t})\n\n\t\tif h, ok := stateMapCpu[v.Health]; ok {\n\t\t\tstateMapCpu[v.Health] = h + 1\n\t\t} else {\n\t\t\tstateMapCpu[v.Health] = 1\n\t\t}\n\t}\n\n\tcpuStat, _ := GetHardwareStatus(\"CPU健康状态\", stateMapCpu)\n\tcpuState = append(cpuState, cpuStat)\n\n\t//mem\n\tstateMapMem := make(map[int]int)\n\tvar capSum int\n\tfor _, mem := range hardware.MemoryInfo {\n\t\tmemList.Sum++\n\t\tcapSum += mem.Capacity / 1024\n\t\tmemList.MemList = append(memList.MemList, dto.Memory{\n\t\t\tName:          mem.Name,\n\t\t\tState:         mem.Health,\n\t\t\tUsedRate:      mem.Utilization,\n\t\t\tIn:            getSwitchPartExist(mem.Exist),\n\t\t\tPosition:      mem.Location,\n\t\t\tChannl:        mem.Tunnel,\n\t\t\tSlot:          mem.SlotNum,\n\t\t\tModel:         mem.MemType,\n\t\t\tRanks:         mem.Ranks,\n\t\t\tWidth:         mem.BitWide,\n\t\t\tCapacity:      mem.Capacity,\n\t\t\tTech:          mem.Technology,\n\t\t\tSn:            mem.SerialNum,\n\t\t\tProductNum:    mem.PartNum,\n\t\t\tProducFactory: mem.MfgName,\n\t\t})\n\t\tif h, ok := stateMapMem[mem.Health]; ok {\n\t\t\tstateMapMem[mem.Health] = h + 1\n\t\t} else {\n\t\t\tstateMapMem[mem.Health] = 1\n\t\t}\n\t}\n\tmemList.Capacity = strconv.Itoa(capSum)\n\tmemStat, _ := GetHardwareStatus(\"内存健康状态\", stateMapMem)\n\tmemState = append(memState, memStat)\n\n\t//电源\n\tstateMapPower := make(map[int]int)\n\tfor _, power := range hardware.PowerInfo {\n\t\tpowerList = append(powerList, dto.Power{\n\t\t\tId:              power.Name,\n\t\t\tState:           power.Health,\n\t\t\tIn:              getSwitchPartExist(power.Exist),\n\t\t\tTemperature:     power.Temperature,\n\t\t\tRatedPower:      fmt.Sprintf(\"%dW\", power.RatedPower),\n\t\t\tInputPower:      fmt.Sprintf(\"%dW\", power.InPower),\n\t\t\tPowerInputModel: power.InModel,\n\t\t\tModel:           power.PowerType,\n\t\t\tFireWare:        power.FirmwareVersion,\n\t\t\tSn:              power.SerialNum,\n\t\t\tProductNum:      power.PartNum,\n\t\t\tProducFactory:   power.MfgName,\n\t\t})\n\t\tif h, ok := stateMapPower[power.Health]; ok {\n\t\t\tstateMapPower[power.Health] = h + 1\n\t\t} else {\n\t\t\tstateMapPower[power.Health] = 1\n\t\t}\n\t}\n\tpowerStat, _ := GetHardwareStatus(\"电源健康状态\", stateMapPower)\n\tpowerState = append(powerState, powerStat)\n\n\t//风扇\n\tstateMapFan := make(map[int]int)\n\tfor _, fan := range hardware.FanInfo {\n\t\tfanList = append(fanList, dto.Fan{\n\t\t\tName:       fan.Name,\n\t\t\tState:      fan.Health,\n\t\t\tIn:         getSwitchPartExist(fan.Exist),\n\t\t\tSpeed:      fan.Speed,\n\t\t\tSpeedRate:  fan.SpeedRatio,\n\t\t\tRedundancy: getSwitchPartRedundancy(fan.Redundant),\n\t\t})\n\t\tif h, ok := stateMapFan[fan.Health]; ok {\n\t\t\tstateMapFan[fan.Health] = h + 1\n\t\t} else {\n\t\t\tstateMapFan[fan.Health] = 1\n\t\t}\n\t}\n\tfanStat, _ := GetHardwareStatus(\"风扇健康状态\", stateMapFan)\n\tfanState = append(fanState, fanStat)\n\n\t//主板\n\tfor _, board := range hardware.BaseboardInfo {\n\t\tboardList = append(boardList, dto.MainBoard{\n\t\t\tName:          board.Name,\n\t\t\tState:         board.Health,\n\t\t\tSn:            board.SerialNum,\n\t\t\tProductNum:    board.PartNum,\n\t\t\tProductTime:   board.ManufacturedDate,\n\t\t\tProducFactory: board.MfgName,\n\t\t})\n\t}\n\n\treturn &dto.SwitchHardwareRsp{\n\t\tInTemp:        inTemp,\n\t\tOutTemp:       outTemp,\n\t\tPortStatus:    portStatus,\n\t\tCpuState:      cpuState,\n\t\tMemState:      memState,\n\t\tPowerState:    powerState,\n\t\tFanState:      fanState,\n\t\tMainBoardList: boardList,\n\t\tCpuList:       cpuList,\n\t\tMemList:       memList,\n\t\tPowerList:     powerList,\n\t\tFanList:       fanList,\n\t}, nil\n\n}\n\nfunc GetHardwareStatus(name string, statusMap map[int]int) (types.BasicOverviewSlot, error) {\n\tslot := types.BasicOverviewSlot{}\n\tslot.Info = types.BasicOverviewSlotInfo{\n\t\tName: name,\n\t}\n\tfor _, v := range StateSlice {\n\t\tstate, _ := strconv.ParseFloat(v.State, 64)\n\t\tvalue, _ := statusMap[int(state)]\n\t\tslot.Values = append(slot.Values, types.BasicOverviewSlotValue{\n\t\t\tName:  v.Name,\n\t\t\tValue: value,\n\t\t})\n\t}\n\treturn slot, nil\n}\n\nfunc getSwitchPartExist(b bool) string {\n\tvar In string = \"不在位\"\n\tif b {\n\t\tIn = \"在位\"\n\t}\n\treturn In\n}\nfunc getSwitchPartRedundancy(b bool) string {\n\tvar In string = \"不冗余\"\n\tif b {\n\t\tIn = \"冗余\"\n\t}\n\treturn In\n}\n\nfunc GetHardwareInterfaceStatus(s dao.SwitchStore, ctx context.Context, interfaceMap map[int]int) (types.BasicOverviewSlot, error) {\n\tslot := types.BasicOverviewSlot{}\n\tslot.Info = types.BasicOverviewSlotInfo{\n\t\tName: \"接口运行状态\",\n\t}\n\t//接口运行状态 1:运行中;2:关闭;3:故障\n\tinterfaceStatus := []string{\"正常\", \"关闭\", \"故障\"}\n\tfor _, v := range interfaceStatus {\n\t\tvar value int\n\t\tswitch v {\n\t\tcase \"正常\":\n\t\t\tvalue = interfaceMap[1]\n\t\tcase \"关闭\":\n\t\t\tvalue = interfaceMap[2]\n\t\tcase \"故障\":\n\t\t\tvalue = interfaceMap[3]\n\t\t}\n\n\t\tslot.Values = append(slot.Values, types.BasicOverviewSlotValue{\n\t\t\tName:  v,\n\t\t\tValue: value,\n\t\t})\n\t}\n\treturn slot, nil\n}\n\nfunc (s *SwitchService) SwitchInterfaceLine(ctx context.Context, par dto.SwitchInterfaceLineReq) (*dto.SwitchDetailsOverviewLineRsp, error) {\n\n\trpcSwitch, err := s.Store.SwitchRpcClient.SwitchDetails(ctx, &switch_rpc.SwitchDetailsRequest{\n\t\tId: par.Id,\n\t})\n\tfmt.Println(\"rpcSwitch\", rpcSwitch)\n\tif err != nil {\n\t\tklog.Info(\"getSwitchDetailsFail\", err)\n\t\treturn nil, err\n\t}\n\n\tip := rpcSwitch.Ip\n\tstart := par.Start / 1e3\n\tend := par.End / 1e3\n\tstep := tools.TimeToStepForInt(end - start)\n\t//t := tools.FormatTime(float64(par.End/1000 - par.Start/1000))\n\n\tvar lines []types.BasicOverviewSlot\n\n\tfor i := 0; i < len(par.MetricName); i++ {\n\t\tvar (\n\t\t\tpromql   string\n\t\t\tinfoName string\n\t\t\tunit     string\n\t\t\tUnitType string\n\t\t)\n\t\tswitch par.MetricName[i] {\n\t\tcase \"InFlow\": //接收速率\n\t\t\tp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.SwitchInFlow]([]*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     ip,\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t}, {\n\t\t\t\t\tKey:       \"ifIndex\",\n\t\t\t\t\tValue:     par.Index,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\t\t\tpromql = p.Items[0].RealPromql\n\t\t\tinfoName = \"接收速率\"\n\t\t\tunit = \"bps\"\n\t\t\tUnitType = types.TypeStorage\n\t\tcase \"OutFlow\": //发送速率\n\t\t\tp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.SwitchOutFlow]([]*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     ip,\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t}, {\n\t\t\t\t\tKey:       \"ifIndex\",\n\t\t\t\t\tValue:     par.Index,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\t\t\tpromql = p.Items[0].RealPromql\n\t\t\tinfoName = \"发送速率\"\n\t\t\tunit = \"bps\"\n\t\t\tUnitType = types.TypeStorage\n\t\tcase \"InBandRate\": //接收带宽利用率\n\t\t\tpromql = server.SwitchInterfaceBandOutRates(ip, par.Index, \"10m\")\n\t\t\tinfoName = \"接收带宽利用率\"\n\t\t\tunit = \"%\"\n\t\t\tUnitType = types.TypePercent\n\t\tcase \"OutBandRate\": //发送带宽利用率\n\t\t\tpromql = server.SwitchInterfaceBandOutRates(ip, par.Index, \"10m\")\n\t\t\tpromql = server.SwitchInterfaceBandOutRates(ip, par.Index, \"10m\")\n\t\t\tinfoName = \"发送带宽利用率\"\n\t\t\tunit = \"%\"\n\t\t\tUnitType = types.TypePercent\n\t\tcase \"inErrRate\": //接收错包率\n\t\t\tpromql = server.SwitchInterfaceOutErrRates(ip, par.Index, \"10m\")\n\t\t\tinfoName = \"接收错包率\"\n\t\t\tunit = \"%\"\n\t\t\tUnitType = types.TypePercent\n\t\tcase \"OutErrRate\": //接收错包率\n\t\t\tpromql = server.SwitchInterfaceOutErrRates(ip, par.Index, \"10m\")\n\t\t\tinfoName = \"发送错包率\"\n\t\t\tunit = \"%\"\n\t\t\tUnitType = types.TypePercent\n\t\tcase \"InDropRate\":\n\t\t\tpromql = server.SwitchInterfaceInDropRates(ip, par.Index, \"10m\")\n\t\t\tinfoName = \"接收丢包率\"\n\t\t\tunit = \"%\"\n\t\t\tUnitType = types.TypePercent\n\t\tcase \"OutDropRate\":\n\t\t\tpromql = server.SwitchInterfaceOutDropRates(ip, par.Index, \"10m\")\n\t\t\tinfoName = \"接收丢包率\"\n\t\t\tunit = \"%\"\n\t\t\tUnitType = types.TypePercent\n\t\tcase \"InPacketRate\": //接收包速率\n\t\t\tp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.SwitchInPacketRate]([]*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     ip,\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t}, {\n\t\t\t\t\tKey:       \"ifIndex\",\n\t\t\t\t\tValue:     par.Index,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\t\t\tpromql = p.Items[0].RealPromql\n\t\t\tinfoName = \"接收包速率\"\n\t\t\tunit = \"pps\"\n\t\t\tUnitType = types.TypeStorage\n\t\tcase \"OutPacketRate\": //发送包速率\n\t\t\tp, err := s.Store.AlarmRpcClient.ListPromQLs(ctx, server.MultipleKeysTemplateMap[server.SwitchOutPacketRate]([]*alarmv1alpha.Label{\n\t\t\t\t{\n\t\t\t\t\tKey:       \"instance\",\n\t\t\t\t\tValue:     ip,\n\t\t\t\t\tOperation: \"=~\",\n\t\t\t\t}, {\n\t\t\t\t\tKey:       \"ifIndex\",\n\t\t\t\t\tValue:     par.Index,\n\t\t\t\t\tOperation: \"=\",\n\t\t\t\t},\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t\t}\n\t\t\tpromql = p.Items[0].RealPromql\n\t\t\tinfoName = \"发送包速率\"\n\t\t\tunit = \"pps\"\n\t\t\tUnitType = types.TypeStorage\n\t\tcase \"InErrNum\":\n\t\t\tpromql = server.SwitchInterfaceInErrNum(ip, par.Index, \"10m\")\n\t\t\tinfoName = \"每秒接收错包数\"\n\t\t\tunit = \"pps\"\n\t\t\tUnitType = types.TypeNumber\n\t\tcase \"OutErrNum\":\n\t\t\tpromql = server.SwitchInterfaceOutErrNum(ip, par.Index, \"10m\")\n\t\t\tinfoName = \"每秒发送错包数\"\n\t\t\tunit = \"pps\"\n\t\t\tUnitType = types.TypeNumber\n\t\tcase \"InDropNum\":\n\t\t\tpromql = server.SwitchInterfaceInDropNum(ip, par.Index, \"10m\")\n\t\t\tinfoName = \"每秒接收丢包数\"\n\t\t\tunit = \"pps\"\n\t\t\tUnitType = types.TypeNumber\n\t\tcase \"OutDropNum\":\n\t\t\tpromql = server.SwitchInterfaceOutDropNum(ip, par.Index, \"10m\")\n\t\t\tinfoName = \"每秒接收丢包数\"\n\t\t\tunit = \"pps\"\n\t\t\tUnitType = types.TypeNumber\n\n\t\t}\n\t\tfmt.Println(\"promqlName\", infoName)\n\t\tfmt.Println(\"promql\", promql)\n\t\tmatrix, err := prom_client.MatrixQuery(ctx, promql, v1.Range{Start: time.Unix(start, 0), End: time.Unix(end, 0), Step: time.Duration(step) * time.Second})\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error querying Prometheus: %v\\n\", err)\n\t\t}\n\t\tvar matrixValue []float64\n\t\tfor _, m := range matrix {\n\t\t\tline := types.BasicOverviewSlot{}\n\n\t\t\tfor _, p := range m.Values {\n\t\t\t\tif math.IsNaN(float64(p.Value)) {\n\t\t\t\t\tp.Value = 0\n\t\t\t\t}\n\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\tvalue := p.Value\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:     timeStamp.String(),\n\t\t\t\t\tValue:    value,\n\t\t\t\t\tUnitType: UnitType,\n\t\t\t\t\tUnit:     unit,\n\t\t\t\t})\n\t\t\t\tmatrixValue = append(matrixValue, float64(value))\n\t\t\t}\n\t\t\tcurrent := m.Values[len(m.Values)-1].Value\n\t\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\t\tIndex:     0,\n\t\t\t\tName:      infoName,\n\t\t\t\tMin:       tools.GetMin(matrixValue),\n\t\t\t\tMax:       tools.GetMin(matrixValue),\n\t\t\t\tAvg:       tools.GetAvg(matrixValue),\n\t\t\t\tValue:     current,\n\t\t\t\tUnit:      unit,\n\t\t\t\tUnitType:  UnitType,\n\t\t\t\tPrognosis: 0, //预测值，values的下标，0则无预测值\n\t\t\t}\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\treturn &dto.SwitchDetailsOverviewLineRsp{\n\t\tLines: lines,\n\t}, nil\n\n}\n\nfunc (s *SwitchService) SwitchInterfaceList(ctx context.Context, par dto.SwitchInterfaceListReq) (*dto.SwitchInterfaceListRsp, error) {\n\n\tswitchInfo, err := s.Store.SwitchRpcClient.SwitchDetails(ctx, &switch_rpc.SwitchDetailsRequest{\n\t\tId: int32(par.Id),\n\t})\n\tif err != nil {\n\t\tklog.Error(\"getSwitchDetailsFail\", err)\n\t\treturn nil, err\n\t}\n\tip := switchInfo.Ip\n\tsn := switchInfo.Sn\n\n\tinterfaceList, err := s.Store.SwitchRpcClient.SwitchInterfaceList(ctx, &switch_rpc.SwitchInterfaceListRequest{\n\t\tPageNo:    1,\n\t\tPageSize:  -1,\n\t\tQuery:     par.Query,\n\t\tSn:        sn,\n\t\tPortState: par.PortState,\n\t})\n\tif err != nil {\n\t\tklog.Error(\"getSwitchInterfaceListFail\", err)\n\t\treturn nil, err\n\t}\n\n\tvar list []dto.SwitchInterfaceList\n\tvar indexList []string\n\n\tfor _, v := range interfaceList.Data {\n\t\ttimeObj := v.LastUpdateAt.AsTime()\n\t\tinfo := dto.SwitchInterfaceList{\n\t\t\tId:                int(v.Id),\n\t\t\tSn:                v.Sn,\n\t\t\tIfName:            v.IfName,\n\t\t\tIfIndex:           int(v.IfIndex),\n\t\t\tIfIp:              v.IfIp,\n\t\t\tIfMac:             v.IfMac,\n\t\t\tIfSpeed:           int(v.IfSpeed),\n\t\t\tOrtherEndDevice:   v.OrtherEndDevice,\n\t\t\tOrtherEndDeviceId: int(v.OrtherEndDeviceId),\n\t\t\tOrtherEndIf:       v.OrtherEndIf,\n\t\t\tOrtherEndDescr:    v.OrtherEndDescr,\n\t\t\tOrtherEndType:     v.OrtherEndType,\n\t\t\tPortState:         int(v.PortState),\n\t\t\tLastUpdateAt:      timeObj.Format(\"2006-01-02 15:04:05\"),\n\t\t}\n\n\t\tindex := strconv.Itoa(int(v.IfIndex))\n\t\tindexList = append(indexList, index)\n\t\t//\n\t\t//if ins, ok := ipIndexMap[ip]; ok {\n\t\t//\tipIndexMap[ip] = append(ins, index)\n\t\t//} else {\n\t\t//\tipIndexMap[ip] = []string{index}\n\t\t//}\n\n\t\tlist = append(list, info)\n\t}\n\tindexs := strings.Join(indexList, \"|\")\n\n\toutDropMap := make(map[string]float64, len(list))\n\tinDropMap := make(map[string]float64, len(list))\n\toutErrMap := make(map[string]float64, len(list))\n\tinErrMap := make(map[string]float64, len(list))\n\toutBandMap := make(map[string]float64, len(list))\n\tinBandMap := make(map[string]float64, len(list))\n\n\t//发送丢包率\n\toutDropPsql := server.SwitchInterfaceOutDropRates(ip, indexs, \"10m\")\n\tklog.Info(\"outDropPsql\", outDropPsql)\n\toutDropRate, err := prom_client.VectorQuery(ctx, outDropPsql)\n\tif err != nil {\n\t\tklog.Error(\"outDropRate\", err)\n\t}\n\tfor _, v := range outDropRate {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tindex := string(v.Metric[\"ifIndex\"])\n\t\toutDropMap[index] = tools.FormPercent(float64(v.Value))\n\t}\n\n\t//接收丢包率\n\tinDropPsql := server.SwitchInterfaceInDropRates(ip, indexs, \"10m\")\n\tklog.Info(\"inDropPsql\", inDropPsql)\n\tinDropRate, err := prom_client.VectorQuery(ctx, inDropPsql)\n\tif err != nil {\n\t\tklog.Error(\"inDropRate\", err)\n\t}\n\tfor _, v := range inDropRate {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tindex := string(v.Metric[\"ifIndex\"])\n\t\tinDropMap[index] = tools.FormPercent(float64(v.Value))\n\t}\n\n\t//发送错包率\n\toutErrRatePsql := server.SwitchInterfaceOutErrRates(ip, indexs, \"10m\")\n\tklog.Info(\"outErrRatePsql\", outErrRatePsql)\n\toutErrRate, err := prom_client.VectorQuery(ctx, outErrRatePsql)\n\tif err != nil {\n\t\tklog.Error(\"outErrRate\", err)\n\t}\n\tfor _, v := range outErrRate {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tindex := string(v.Metric[\"ifIndex\"])\n\t\toutErrMap[index] = tools.FormPercent(float64(v.Value))\n\t}\n\n\t//接收错包率\n\tinErrRatePsql := server.SwitchInterfaceInErrRates(ip, indexs, \"10m\")\n\tklog.Info(\"inErrRatePsql\", inErrRatePsql)\n\tinErrRate, err := prom_client.VectorQuery(ctx, inErrRatePsql)\n\tif err != nil {\n\t\tklog.Error(\"inErrRate\", err)\n\t}\n\tfor _, v := range inErrRate {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tindex := string(v.Metric[\"ifIndex\"])\n\t\tinErrMap[index] = tools.FormPercent(float64(v.Value))\n\t}\n\n\t//发送带宽利用率\n\toutBandRatePsql := server.SwitchInterfaceBandOutRates(ip, indexs, \"10m\")\n\tklog.Info(\"outBandRatePsql\", outBandRatePsql)\n\toutBandRate, err := prom_client.VectorQuery(ctx, outBandRatePsql)\n\tif err != nil {\n\t\tklog.Error(\"outBandRate\", err)\n\t}\n\tfor _, v := range outBandRate {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tindex := string(v.Metric[\"ifIndex\"])\n\t\tinBandMap[index] = tools.FormPercent(float64(v.Value))\n\t}\n\n\t//接收带宽利用率\n\tinBandRatePsql := server.SwitchInterfaceBandInRates(ip, indexs, \"10m\")\n\tklog.Info(\"inBandRatePsql\", outBandRatePsql)\n\tinBandRate, err := prom_client.VectorQuery(ctx, inBandRatePsql)\n\tif err != nil {\n\t\tklog.Error(\"inBandRate\", err)\n\t}\n\tfor _, v := range inBandRate {\n\t\tif math.IsNaN(float64(v.Value)) {\n\t\t\tv.Value = 0\n\t\t}\n\t\tindex := string(v.Metric[\"ifIndex\"])\n\t\toutBandMap[index] = tools.FormPercent(float64(v.Value))\n\t}\n\n\tfor k, v := range list {\n\t\tindex := strconv.Itoa(v.IfIndex)\n\t\tif outDrop, ok := outDropMap[index]; ok {\n\t\t\tlist[k].OutDropRate = outDrop\n\t\t}\n\t\tif inDrop, ok := inDropMap[index]; ok {\n\t\t\tlist[k].InDropRate = inDrop\n\t\t}\n\t\tif outErr, ok := outErrMap[index]; ok {\n\t\t\tlist[k].OutErrRate = outErr\n\t\t}\n\t\tif inErr, ok := inErrMap[index]; ok {\n\t\t\tlist[k].InErrRate = inErr\n\t\t}\n\t\tif outBand, ok := outBandMap[index]; ok {\n\t\t\tlist[k].OutBandRate = outBand\n\t\t}\n\t\tif inBand, ok := inBandMap[index]; ok {\n\t\t\tlist[k].InBandRate = inBand\n\t\t}\n\t}\n\n\t//order\n\tif par.OrderCode != \"\" && par.OrderType != \"\" {\n\t\tresults := utils.Bucket{}\n\t\tfor i := 0; i < len(list); i++ {\n\t\t\tresults.Slice = append(results.Slice, list[i])\n\t\t}\n\t\ttime_by := func(a, b interface{}) bool {\n\t\t\treturn true\n\t\t}\n\t\tswitch par.OrderCode {\n\t\tcase \"OutDropRate\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).OutDropRate < b.(dto.SwitchInterfaceList).OutDropRate\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).OutDropRate > b.(dto.SwitchInterfaceList).OutDropRate\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"InDropRate\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).InDropRate < b.(dto.SwitchInterfaceList).InDropRate\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).InDropRate > b.(dto.SwitchInterfaceList).InDropRate\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"OutErrRate\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).OutErrRate < b.(dto.SwitchInterfaceList).OutErrRate\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).OutErrRate > b.(dto.SwitchInterfaceList).OutErrRate\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"InErrRate\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).InErrRate < b.(dto.SwitchInterfaceList).InErrRate\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).InErrRate > b.(dto.SwitchInterfaceList).InErrRate\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"OutBandRate\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).OutBandRate < b.(dto.SwitchInterfaceList).OutBandRate\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).OutBandRate > b.(dto.SwitchInterfaceList).OutBandRate\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"InBandRate\":\n\t\t\tswitch par.OrderType {\n\t\t\tcase \"ASC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).InBandRate < b.(dto.SwitchInterfaceList).InBandRate\n\t\t\t\t}\n\t\t\tcase \"DESC\":\n\t\t\t\ttime_by = func(a, b interface{}) bool {\n\t\t\t\t\treturn a.(dto.SwitchInterfaceList).InBandRate > b.(dto.SwitchInterfaceList).InBandRate\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresults.By = time_by\n\t\tsort.Sort(results)\n\t\tfor i := 0; i < len(results.Slice); i++ {\n\t\t\tlist[i] = results.Slice[i].(dto.SwitchInterfaceList)\n\t\t}\n\t}\n\n\t//分页\n\tlow := (par.PageNo - 1) * par.PageSize\n\tif low > len(list) {\n\t\tklog.Info(\"PageSize is too large\")\n\t}\n\n\thight := low + par.PageSize\n\tif hight > len(list) {\n\t\thight = len(list)\n\t}\n\n\tvar results dto.SwitchInterfaceListRsp\n\tresults.PageSize = par.PageSize\n\tresults.PageNo = par.PageNo\n\tresults.TotalCount = int64(len(list))\n\tresults.SwitchList = list[low:hight]\n\n\treturn &results, err\n\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/switch/rpc/rpcserver.go\n```golang\npackage rpc\n\nimport (\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/switch/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/switch/service\"\n)\n\ntype switchRpcServer struct {\n\tswitchSvc *service.SwitchService\n\tpb.UnimplementedSwitchServiceServer\n}\n\nfunc NewSwitchRpcServer() *switchRpcServer {\n\treturn &switchRpcServer{\n\t\tswitchSvc: service.NewSwitchService(),\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/switch/rpc/switch.go\n```golang\npackage rpc\n\nimport (\n\t\"context\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/monitorapis/switch/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/switch/dto\"\n\t\"github.com/jinzhu/copier\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\nfunc (n *switchRpcServer) SwitchInterfaceList(ctx context.Context, req *pb.SwitchInterfaceListReq) (*pb.SwitchInterfaceListRsp, error) {\n\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagRequestIn, map[string]interface{}{\"params\": req})\n\tvar par dto.SwitchInterfaceListReq\n\tif err := copier.Copy(&par, req); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"copy err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tres, err := n.switchSvc.SwitchInterfaceList(ctx, par)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"call service err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tresp := &pb.SwitchInterfaceListRsp{}\n\tcopier.Copy(&resp, res)\n\treturn resp, nil\n}\n\nfunc (n *switchRpcServer) SwitchList(ctx context.Context, req *pb.SwitchListReq) (*pb.SwitchListRsp, error) {\n\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagRequestIn, map[string]interface{}{\"params\": req})\n\tvar par dto.SwitchListReq\n\tif err := copier.Copy(&par, req); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"copy err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tres, err := n.switchSvc.SwitchList(ctx, par)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"call service err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tresp := &pb.SwitchListRsp{}\n\tcopier.Copy(&resp, res)\n\treturn resp, nil\n}\n\nfunc (n *switchRpcServer) SwitchHardware(ctx context.Context, req *pb.SwitchHardwareReq) (*pb.SwitchHardwareRsp, error) {\n\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagRequestIn, map[string]interface{}{\"params\": req})\n\tvar par dto.SwitchHardwareReq\n\tif err := copier.Copy(&par, req); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"copy err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tres, err := n.switchSvc.SwitchHardware(ctx, par)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"call service err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\tresp := &pb.SwitchHardwareRsp{}\n\tif err := copier.CopyWithOption(&resp, res, copier.Option{IgnoreEmpty: true}); err != nil { // 忽略nil\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"copy err\": err})\n\t\treturn nil, status.Error(codes.Internal, err.Error())\n\t}\n\treturn resp, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/dto/object_volume_request.go\n```golang\npackage dto\n\ntype ObjectVolumeOverviewTopReq struct {\n\tRegion     string   `json:\"Region\"`\n\tMetricName []string `json:\"MetricName\" binding:\"required\"`\n\tTopK       int      `json:\"TopK\" binding:\"required\"`\n\tStart      int64    `json:\"Start\" binding:\"required\"`\n\tEnd        int64    `json:\"End\" binding:\"required\"`\n\tDiskType   string   `json:\"DiskType\"`\n}\n\ntype ObjectVolumeOverviewReq struct {\n\tRegion     string     `json:\"Region\"`\n\tDiskType   string     `json:\"DiskType\"`\n\tMetricName [][]string `json:\"MetricName\" binding:\"required\"`\n}\n\ntype ObjectVolumeDetailMetricReq struct {\n\tBucketId int64 `json:\"BucketId\" binding:\"required\"`\n}\n\ntype ObjectVolumeDetailMetricLineReq struct {\n\tBucketId   int64    `json:\"BucketId\" binding:\"required\"`\n\tStart      int64    `json:\"Start\" binding:\"required\"`\n\tEnd        int64    `json:\"End\" binding:\"required\"`\n\tMetricName []string `json:\"MetricName\" binding:\"required\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/dto/object_pool_request.go\n```golang\npackage dto\n\n// ListReq 资源池监控列表请求参数\ntype ListReq struct {\n\tPageNo    int               `json:\"PageNo\"`\n\tPageSize  int               `json:\"PageSize\"`\n\tRegion    string            `json:\"Region\"`\n\tOrderCode string            `json:\"OrderCode\"`\n\tOrderType string            `json:\"OrderType\"`\n\tPoolType  []string          `json:\"PoolType\"`\n\tQuery     map[string]string `json:\"Query\"`\n}\n\n// OverviewReq 资源池监控概览请求参数\ntype OverviewReq struct {\n\tRegion   string `json:\"Region\"`\n\tPoolType string `json:\"PoolType\"`\n}\n\n// OverviewLineReq 资源池监控概览折线图请求参数\ntype OverviewLineReq struct {\n\tPoolType      string   `json:\"PoolType\"`\n\tRegion        string   `json:\"Region\"`\n\tMetricName    []string `json:\"MetricName\"`\n\tStart         int64    `json:\"Start\"`\n\tEnd           int64    `json:\"End\"`\n\tHasPrediction bool     `json:\"HasPrediction\"`\n}\n\n// OverViewAlertReq 资源池监控概览告警请求参数\ntype OverViewAlertReq struct {\n\tRegion   string `json:\"Region\"`\n\tPoolType string `json:\"PoolType\"`\n}\n\n// ObjectPoolDetailMetricReq 对象存储池监控详情\ntype ObjectPoolDetailMetricReq struct {\n\tPoolId     int64    `json:\"PoolId\"`\n\tPoolType   string   `json:\"PoolType\"`\n\tRegion     string   `json:\"Region\"`\n\tMetricName []string `json:\"MetricName\"`\n}\n\n// ObjectPoolDetailMetricLineReq 对象存储池监控详情折线图\ntype ObjectPoolDetailMetricLineReq struct {\n\tPoolId     int64    `json:\"PoolId\"`\n\tPoolType   string   `json:\"PoolType\"`\n\tRegion     string   `json:\"Region\"`\n\tMetricName []string `json:\"MetricName\"`\n\tStart      int64    `json:\"Start\"`\n\tEnd        int64    `json:\"End\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/dto/object_pool_response.go\n```golang\npackage dto\n\nimport \"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\n// ListRes 资源池监控列表响应 --------------------------------\ntype ListRes struct {\n\tTotalCount int                     `json:\"TotalCount\"`\n\tPageNo     int                     `json:\"PageNo\"`\n\tPageSize   int                     `json:\"PageSize\"`\n\tDataList   []*ObjectStorageMonitor `json:\"DataList\"`\n}\n\n//type ObjectList struct {\n//\tName         string    `json:\"Name\"`\n//\tId           int       `json:\"Id\"`\n//\tRegionName   string    `json:\"RegionName\"`\n//\tRegionCode   string    `json:\"RegionCode\"`\n//\tAzCode       string    `json:\"AzCode\"`\n//\tResourcePool string    `json:\"ResourcePool\"`\n//\tBucketNumber int       `json:\"BucketNumber\"`\n//\tHostNumber   int       `json:\"HostNumber\"`\n//\tTenantId     string    `json:\"TenantId\"`\n//\tTenantName   string    `json:\"TenantName\"`\n//\tObjectNumber string    `json:\"ObjectNumber\"`\n//\tCreateTime   int64     `json:\"CreateTime\"`\n//\tServers      []Ks3Host `json:\"Servers\"`\n//\tStatus       string    `json:\"Status\"`\n//\tMetricUrl    string    `json:\"MetricUrl\"`\n//}\n\ntype ObjectStorageMonitor struct {\n\tId                int64   `json:\"Id\"`                // 资源池ID\n\tName              string  `json:\"Name\"`              // 资源池名称\n\tDiskType          string  `json:\"DiskType\"`          // 存储类型\n\tMonitorStatus     int64   `json:\"MonitorStatus\"`     // 集群状态 1:正常 2:异常\n\tRegion            string  `json:\"Region\"`            // 区域\n\tRegionCode        string  `json:\"RegionCode\"`        // 区域编码\n\tCapacityTotal     float64 `json:\"CapacityTotal\"`     // 总容量\n\tCapacityUsedTotal float64 `json:\"CapacityUsedTotal\"` // 已使用容量\n\tCapacityAvailable float64 `json:\"CapacityAvailable\"` // 可用容量\n\tCapacityUsedRate  float64 `json:\"CapacityUsedRate\"`  // 使用率\n\tBucketNumber      int64   `json:\"BucketNumber\"`      // 桶数量\n\tHostNumber        int64   `json:\"HostNumber\"`        // 主机数量\n\tUploadBandwidth   int64   `json:\"UploadBandwidth\"`   // 上传带宽 TODO\n\tDownloadBandwidth int64   `json:\"DownloadBandwidth\"` // 下载带宽 TODO\n\t//UploadFlow         int64   `json:\"UploadFlow\"`         // 上传流量 TODO\n\t//DownloadFlow       int64   `json:\"DownloadFlow\"`       // 下载流量 TODO\n\t//APIRequestAmount   int64   `json:\"APIRequestAmount\"`   // API请求次数 TODO\n\t//ErrorReturnAmount  int64   `json:\"ErrorReturnAmount\"`  // 错误返回次数 TODO\n\tHttpRequestAmount  int64 `json:\"HttpRequestAmount\"`  // HTTP请求次数 TODO\n\tHttpsRequestAmount int64 `json:\"HttpsRequestAmount\"` // HTTPS请求次数 TODO\n\tCreateTime         int64 `json:\"CreateTime\"`         // 创建时间\n\tAlertAmount        int64 `json:\"AlertAmount\"`        // 告警数量 TODO\n}\n\ntype ObjectStorageServerStatus struct {\n\tAddress string `json:\"address\"`\n\tRole    string `json:\"role\"`\n\tStatus  string `json:\"status\"`\n}\n\ntype Ks3Host struct {\n\tIp        string `json:\"Ip\"`\n\tPort      int    `json:\"Port\"`\n\tStatus    int    `json:\"Status\"`\n\tStatusMsg string `json:\"StatusMsg\"`\n\tRole      string `json:\"Role\"`\n}\n\ntype ObjectPoolDetailMetricRes struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\ntype ObjectPoolDetailMetricLineRes struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\n// OverViewRes 概览响应参数--------------------------------\ntype OverViewRes struct {\n\tObjectPools        []types.BasicOverviewSlot `json:\"ObjectPools\"`\n\tObjectVolumeCounts []types.BasicOverviewSlot `json:\"ObjectVolumeCounts\"`\n}\n\n// OverViewLineRes 概览折线图响应参数--------------------------------\ntype OverViewLineRes struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\n// OverViewAlertRes 概览告警响应参数--------------------------------\ntype OverViewAlertRes struct {\n\tAlerts []types.BasicOverviewSlot `json:\"Alerts\"`\n}\n\n// OptionalObjectPoolResult 可选项列表--------------------------------\ntype OptionalObjectPoolResult map[string]any\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/dto/object_volume_response.go\n```golang\npackage dto\n\nimport \"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\ntype ObjectVolumeOverviewTopRes struct {\n\tTops []types.BasicOverviewSlot `json:\"Tops\"`\n}\n\ntype ObjectVolumeOverviewRes struct {\n\tOverviews []types.BasicOverviewSlot `json:\"Overviews\"`\n}\n\ntype ObjectVolumeDetailMetricRes struct {\n\tResourceOverview  []ObjectVolumeDetailMetric `json:\"ResourceOverview\"`\n\tCreationTimestamp int64                      `json:\"CreationTimestamp\"`\n}\n\ntype ObjectVolumeDetailMetric struct {\n\tPoolId   string      `json:\"PoolId\"`\n\tName     string      `json:\"Name\"`\n\tUnit     string      `json:\"Unit\"`\n\tUnitType string      `json:\"UnitType\"`\n\tValue    interface{} `json:\"Value\"`\n\tKind     string      `json:\"Kind\"`\n}\n\ntype ObjectVolumeDetailMetricLineRes struct {\n\tLines []types.BasicOverviewSlot `json:\"Lines\"`\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/dao/metric_top.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/gormSerializer\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/model\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/schema\"\n)\n\ntype MetricTopDao struct {\n\tdb *gorm.DB\n}\n\ntype QueryParams struct {\n\tRegion string\n\tCode   string\n}\n\nfunc NewMetricTopDao() *MetricTopDao {\n\tschema.RegisterSerializer(\"json_str\", gormSerializer.JSONSerializer{})\n\treturn &MetricTopDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\nfunc (m *MetricTopDao) GetOneByCode(q QueryParams) (model.MonitorTop, error) {\n\tvar data model.MonitorTop\n\tif err := m.db.Where(\"region = ? AND code = ?\", q.Region, q.Code).First(&data).Error; err != nil {\n\t\treturn data, err\n\t}\n\treturn data, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/dao/object_pool.go\n```golang\npackage dao\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/dao/metric.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/model\"\n\t\"gorm.io/gorm\"\n)\n\ntype MetricDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewMetricDao() *MetricDao {\n\treturn &MetricDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\n// GetOneByCode 获取监控指标\nfunc (m *MetricDao) GetOneByCode(code string) (*model.MonitorTsdbMetrics, error) {\n\tcontent := model.MonitorTsdbMetrics{}\n\terr := m.db.Where(\"code = ?\", code).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &content, nil\n}\n\n// GetListByCodes 获取监控指标列表\nfunc (m *MetricDao) GetListByCodes(codes []string) ([]model.MonitorTsdbMetrics, error) {\n\tvar content []model.MonitorTsdbMetrics\n\terr := m.db.Where(\"code in (?)\", codes).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn content, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/dao/overview.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tresource_objectstoragev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_objectstorage/v1alpha/gen\"\n\tresource_serverv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_server/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n)\n\ntype Factory interface {\n\tMetric() *MetricDao\n\tMetricTop() *MetricTopDao\n\n\tAlarmRpcClient() alarmv1alpha.AlarmServiceClient\n\tObjectPoolRpcClient() resource_objectstoragev1alpha.ObjectPoolServiceClient\n\tObjectVolumeRpcClient() resource_objectstoragev1alpha.ObjectVolumeServiceClient\n\tServerRpcClient() resource_serverv1alpha.ResourceServiceClient\n}\n\nvar _ Factory = (*objectStorageStore)(nil)\n\ntype objectStorageStore struct {\n}\n\nfunc NewObjectStorageStore() *objectStorageStore {\n\treturn &objectStorageStore{}\n}\n\nfunc (j *objectStorageStore) Metric() *MetricDao {\n\treturn NewMetricDao()\n}\n\nfunc (j *objectStorageStore) MetricTop() *MetricTopDao {\n\treturn NewMetricTopDao()\n}\n\nfunc (j *objectStorageStore) AlarmRpcClient() alarmv1alpha.AlarmServiceClient {\n\talarmAddr := lib.GetStringConf(\"base.grpc.alarm\")\n\talarmConn, err := grpcx.NewGrpcClientConn(alarmAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect alarm grpc server error, %s\": err.Error()})\n\t}\n\treturn alarmv1alpha.NewAlarmServiceClient(alarmConn)\n}\n\nfunc (j *objectStorageStore) ObjectPoolRpcClient() resource_objectstoragev1alpha.ObjectPoolServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn resource_objectstoragev1alpha.NewObjectPoolServiceClient(resourceConn)\n}\n\nfunc (j *objectStorageStore) ObjectVolumeRpcClient() resource_objectstoragev1alpha.ObjectVolumeServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn resource_objectstoragev1alpha.NewObjectVolumeServiceClient(resourceConn)\n}\n\nfunc (j *objectStorageStore) ServerRpcClient() resource_serverv1alpha.ResourceServiceClient {\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\treturn resource_serverv1alpha.NewResourceServiceClient(resourceConn)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/dao/object_volume.go\n```golang\npackage dao\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/controller/object_pool.go\n```golang\npackage controller\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype ObjectPoolController struct {\n\tsvc service.ObjectPoolService\n}\n\nfunc NewObjectPoolController() *ObjectPoolController {\n\treturn &ObjectPoolController{\n\t\tsvc: service.NewObjectPoolService(),\n\t}\n}\n\n// OverviewMonitor godoc\n// @Summary      ObjectPool Monitor OverviewMonitor\n// @Description  资源池-对象存储-概览\n// @Tags         ObjectPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.OverviewReq true \"object pool monitor Overview monitor request\"\n// @Success      200  {object}  dto.OverViewRes\n// @Router       /object_storage/object_pool/overview_monitor [POST]\nfunc (j *ObjectPoolController) OverviewMonitor(c *gin.Context) {\n\tvar params dto.OverviewReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := j.svc.Overview(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取对象存储概览信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// OverviewLine godoc\n// @Summary      ObjectPool Monitor OverviewLine\n// @Description  资源池-对象存储-概览折线图\n// @Tags         ObjectPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.OverviewLineReq true \"object pool monitor overview line request\"\n// @Success      200  {object}  dto.OverViewLineRes\n// @Router       /object_storage/object_pool/overview_line [POST]\nfunc (j *ObjectPoolController) OverviewLine(c *gin.Context) {\n\tvar params dto.OverviewLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := j.svc.OverviewLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取对象存储概览线信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// OverviewAlert godoc\n// @Summary      ObjectPool Monitor OverviewAlert\n// @Description  资源池-对象存储-告警概览\n// @Tags         ObjectPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.OverViewAlertReq true \"object pool monitor overview alert request\"\n// @Success      200  {object}  dto.OverViewAlertRes\n// @Router       /object_storage/object_pool/overview_alert [POST]\nfunc (j *ObjectPoolController) OverviewAlert(c *gin.Context) {\n\tvar params dto.OverViewAlertReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := j.svc.OverviewAlert(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取对象存储概览告警信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// List godoc\n// @Summary      ObjectPool Monitor List\n// @Description  资源池-对象存储-监控列表\n// @Tags         ObjectPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ListReq true \"object pool monitor request\"\n// @Success      200  {object}  dto.ListRes\n// @Router       /object_storage/object_pool/list [POST]\nfunc (j *ObjectPoolController) List(c *gin.Context) {\n\tvar params dto.ListReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := j.svc.List(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取对象存储列表信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailMetricOverview godoc\n// @Summary      ObjectPool Monitor DetailMetricOverview\n// @Description  资源池-对象存储-监控详情-概览\n// @Tags         ObjectPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ObjectPoolDetailMetricReq true \"object pool detail metric overview request\"\n// @Success      200  {object}  dto.ObjectPoolDetailMetricRes\n// @Router       /object_storage/object_pool/detail_metric_overview [POST]\nfunc (j *ObjectPoolController) DetailMetricOverview(c *gin.Context) {\n\tvar params dto.ObjectPoolDetailMetricReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := j.svc.DetailMetricOverview(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取对象存储详情-监控指标-详情概览信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailMetricLines godoc\n// @Summary      ObjectPool Monitor DetailMetricLines\n// @Description  资源池-对象存储-监控详情-折线图\n// @Tags         ObjectPool\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ObjectPoolDetailMetricLineReq true \"object pool detail metric lines request\"\n// @Success      200  {object}  dto.ObjectPoolDetailMetricLineRes\n// @Router       /object_storage/object_pool/detail_metric_lines [POST]\nfunc (j *ObjectPoolController) DetailMetricLines(c *gin.Context) {\n\tvar params dto.ObjectPoolDetailMetricLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := j.svc.DetailMetricLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取对象存储详情-监控指标-监控线信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// ListOptionalCondition \n// List godoc\n// @Summary      ObjectPool Monitor List optional condition\n// @Description  资源池-对象存储-监控详情-可选条件\n// @Tags         ObjectPool\n// @Accept       json\n// @Produce      json\n// @Success      200  {object}  dto.OptionalObjectPoolResult\n// @Router       /object_storage/object_pool/list_optional_condition [GET]\nfunc (j *ObjectPoolController) ListOptionalCondition(c *gin.Context) {\n\t// 业务处理\n\tres, err := j.svc.GetListOptionalCondition(c)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取可选列表信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/controller/object_volume.go\n```golang\npackage controller\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/service\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/pkg/errors\"\n\t\"net/http\"\n)\n\ntype ObjectVolumeController struct {\n\tsvc service.ObjectVolumeService\n}\n\nfunc NewObjectVolumeController() *ObjectVolumeController {\n\treturn &ObjectVolumeController{\n\t\tsvc: service.NewObjectVolumeService(),\n\t}\n}\n\n// OverviewTop godoc\n// @Summary      ObjectVolume Monitor OverviewTop\n// @Description  云产品-对象存储-概览Top\n// @Tags         ObjectVolume\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ObjectVolumeOverviewTopReq true \"object volume monitor overview top request\"\n// @Success      200  {object}  dto.ObjectVolumeOverviewTopRes\n// @Router       /object_storage/object_volume/overview_top [POST]\nfunc (j *ObjectVolumeController) OverviewTop(c *gin.Context) {\n\tvar params dto.ObjectVolumeOverviewTopReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\tif params.MetricName == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": errors.New(\"metric name nil\"), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"指标名称不能为空\")\n\t\treturn\n\t}\n\n\t// 业务处理\n\tres, err := j.svc.OverviewTop(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云产品-对象存储概览TopK信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// Overview godoc\n// @Summary      ObjectVolume Monitor Overview\n// @Description  云产品-对象存储-概览\n// @Tags         ObjectVolume\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ObjectVolumeOverviewReq true \"object volume monitor overview request\"\n// @Success      200  {object}  dto.ObjectVolumeOverviewRes\n// @Router       /object_storage/object_volume/overview [POST]\nfunc (j *ObjectVolumeController) Overview(c *gin.Context) {\n\tvar params dto.ObjectVolumeOverviewReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\tif params.MetricName == nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": errors.New(\"metric name nil\"), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"指标名称不能为空\")\n\t\treturn\n\t}\n\n\t// 业务处理\n\tres, err := j.svc.Overview(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云产品-对象存储概览信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailMetric godoc\n// @Summary      ObjectVolume Monitor DetailMetric\n// @Description  云产品-对象存储-监控详情\n// @Tags         ObjectVolume\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ObjectVolumeDetailMetricReq true \"object volume monitor detail metric request\"\n// @Success      200  {object}  dto.ObjectVolumeDetailMetricRes\n// @Router       /object_storage/object_volume/detail_metric [POST]\nfunc (j *ObjectVolumeController) DetailMetric(c *gin.Context) {\n\tvar params dto.ObjectVolumeDetailMetricReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\n\t// 业务处理\n\tres, err := j.svc.DetailMetric(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云产品-对象存储详情指标信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n// DetailMetricLines godoc\n// @Summary      ObjectVolume Monitor DetailMetricLines\n// @Description  云产品-对象存储-监控详情折线图\n// @Tags         ObjectVolume\n// @Accept       json\n// @Produce      json\n// @Param        body body dto.ObjectVolumeDetailMetricLineReq true \"object volume monitor detail metric lines request\"\n// @Success      200  {object}  dto.ObjectVolumeDetailMetricLineRes\n// @Router       /object_storage/object_volume/detail_metric_lines [POST]\nfunc (j *ObjectVolumeController) DetailMetricLines(c *gin.Context) {\n\tvar params dto.ObjectVolumeDetailMetricLineReq\n\tif err := c.ShouldBind(&params); err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": err.Error(), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"参数绑定失败\")\n\t\treturn\n\t}\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"params\": params})\n\tif len(params.MetricName) == 0 {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": errors.New(\"metric name nil\"), \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"指标名称不能为空\")\n\t\treturn\n\t}\n\n\t// 业务处理\n\tres, err := j.svc.DetailMetricLine(c, params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取云产品-对象存储详情指标线信息失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/constant/constant.go\n```golang\npackage constant\n\nimport \"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\nvar (\n\t// AlertLevels 告警级别\n\tAlertLevels = []string{\"p0\", \"p1\", \"p2\", \"p3\"}\n\t// AlertLevelsName 告警级别映射\n\tAlertLevelsName = map[string]string{\n\t\t\"p0\": \"紧急告警\",\n\t\t\"p1\": \"重要告警\",\n\t\t\"p2\": \"次要告警\",\n\t\t\"p3\": \"提醒告警\",\n\t}\n\t// AlertKinds 告警类型\n\tAlertKinds = map[string]string{\n\t\t\"p0\": types.KindError,\n\t\t\"p1\": types.KindWarn,\n\t\t\"p2\": types.KindMinor,\n\t\t\"p3\": types.KindInfo,\n\t}\n\t// ObjectPoolMap 对象存储池类型\n\tObjectPoolMap = map[string]string{\n\t\t\"ks3\": \"1\",\n\t}\n\n\tObjectVolumeStatusMap = map[string]string{\n\t\t\"creating\":        \"创建中\",\n\t\t\"available\":       \"待挂载\",\n\t\t\"attaching\":       \"挂载中\",\n\t\t\"in-use\":          \"使用中\",\n\t\t\"detaching\":       \"卸载中\",\n\t\t\"extending\":       \"扩容中\",\n\t\t\"deleting\":        \"删除中\",\n\t\t\"error\":           \"错误\",\n\t\t\"error_attaching\": \"挂载失败\",\n\t\t\"error_detaching\": \"卸载失败\",\n\t\t\"error_deleting\":  \"删除失败\",\n\t\t\"error_extending\": \"扩容失败\",\n\t\t\"deleted\":         \"已删除\",\n\t\t\"recycling\":       \"回收中\",\n\t\t\"rollbacking\":     \"回滚中\",\n\t}\n)\n\nconst (\n\tPlatform = \"platform\"\n\tBusiness = \"business\"\n\n\tSourcePlatform = \"平台\"\n\tSourceBusiness = \"业务\"\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/model/monitor_tsdb_metrics.go\n```golang\npackage model\n\nimport \"time\"\n\ntype MonitorTsdbMetrics struct {\n\tID           int       `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`\n\tProductLine  string    `gorm:\"column:product_line;NOT NULL\"`  // 产品线\n\tCode         string    `gorm:\"column:code;NOT NULL\"`          // 唯一标识\n\tName         string    `gorm:\"column:name;NOT NULL\"`          // 中文名\n\tMetricPrefix string    `gorm:\"column:metric_prefix;NOT NULL\"` // metric前缀\n\tUnit         string    `gorm:\"column:unit;NOT NULL;default:''\"`\n\tCreatedAt    time.Time `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"`\n\tUpdatedAt    time.Time `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"`\n\tDeletedAt    time.Time `gorm:\"column:deleted_at\"`\n}\n\nfunc (m *MonitorTsdbMetrics) TableName() string {\n\treturn \"monitor_tsdb_metrics\"\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/model/object_pool.go\n```golang\npackage model\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/model/monitor_top.go\n```golang\npackage model\n\nimport (\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n)\n\n// region + az + code 唯一\ntype MonitorTop struct {\n\tID                 int        `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`        // 主键\n\tProductLine        string     `gorm:\"column:product_line;NOT NULL\"`                // 产品线\n\tRegion             string     `gorm:\"column:region;NOT NULL\"`                      // 区域\n\tAz                 string     `gorm:\"column:az;NOT NULL\"`                          // 可用区\n\tCode               string     `gorm:\"column:code;NOT NULL\"`                        // top项的唯一标识\n\tName               string     `gorm:\"column:name;NOT NULL\"`                        // 中文名\n\tHalfHour           []TopValue `gorm:\"column:half_hour;serializer:json_str\"`        // 0.5h top10数据\n\tHalfHourUpdateAt   time.Time  `gorm:\"column:half_hour_update_at\"`                  // 0.5h更新时间\n\tOneHour            []TopValue `gorm:\"column:one_hour;serializer:json_str\"`         // 1h top10数据\n\tOneHourUpdateAt    time.Time  `gorm:\"column:one_hour_update_at\"`                   // 1h更新时间\n\tThreeHours         []TopValue `gorm:\"column:three_hours;serializer:json_str\"`      // 3h top10数据\n\tThreeHoursUpdateAt time.Time  `gorm:\"column:three_hours_update_at\"`                // 3h更新时间\n\tOneDay             []TopValue `gorm:\"column:one_day;serializer:json_str\"`          // 1d top10数据\n\tOneDayUpdateAt     time.Time  `gorm:\"column:one_day_update_at\"`                    // 1d更新时间\n\tSevenDays          []TopValue `gorm:\"column:seven_days;serializer:json_str\"`       // 7d top10数据\n\tSevenDaysUpdateAt  time.Time  `gorm:\"column:seven_days_update_at\"`                 // 7d更新时间\n\tThirtyDays         []TopValue `gorm:\"column:thirty_days;serializer:json_str\"`      // 30d top10数据\n\tThirtyDaysUpdateAt time.Time  `gorm:\"column:thirty_days_update_at\"`                // 30d更新时间\n\tCreatedAt          time.Time  `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"` // 创建时间\n\tUpdatedAt          time.Time  `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"` // 更新时间\n\tDeletedAt          time.Time  `gorm:\"column:deleted_at\"`                           // 删除时间\n}\n\ntype TopValue struct {\n\tId    string  //实例唯一id\n\tName  string  //名称\n\tValue float64 //值\n}\n\nfunc (m *MonitorTop) TableName() string {\n\treturn \"monitor_top\"\n}\n\nfunc (m *MonitorTop) ParseIntervalData(start, end int64) []TopValue {\n\tvar intervalData []TopValue\n\tintervalStr := opentsdb.ParseTimeInterval(start, end)\n\tswitch intervalStr {\n\tcase \"0.5h\":\n\t\tintervalData = m.HalfHour\n\tcase \"1h\":\n\t\tintervalData = m.OneHour\n\tcase \"3h\":\n\t\tintervalData = m.ThreeHours\n\tcase \"1d\":\n\t\tintervalData = m.OneDay\n\tcase \"7d\":\n\t\tintervalData = m.SevenDays\n\tcase \"30d\":\n\t\tintervalData = m.ThirtyDays\n\t}\n\treturn intervalData\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/model/object_volume.go\n```golang\npackage model\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/service/object_pool.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\talarmv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/alarmapis/alarm/v1alpha/gen\"\n\tresource_objectstoragev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_objectstorage/v1alpha/gen\"\n\tprom_client \"ezone.ksyun.com/ezone/luban/monitor/common/client/prom\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/objectstorage\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools/collection\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/utils\"\n\tblockstorage_utils \"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/utils\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/constant\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/dto\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/pkg/errors\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n)\n\ntype ObjectPoolService interface {\n\tOverviewAlert(ctx context.Context, par dto.OverViewAlertReq) (*dto.OverViewAlertRes, error)\n\tOverview(ctx context.Context, par dto.OverviewReq) (*dto.OverViewRes, error)\n\tOverviewLine(ctx context.Context, par dto.OverviewLineReq) (*dto.OverViewLineRes, error)\n\tList(ctx context.Context, par dto.ListReq) (res *dto.ListRes, err error)\n\tDetailMetricOverview(ctx context.Context, par dto.ObjectPoolDetailMetricReq) (*dto.ObjectPoolDetailMetricRes, error)\n\tDetailMetricLine(ctx context.Context, par dto.ObjectPoolDetailMetricLineReq) (*dto.ObjectPoolDetailMetricLineRes, error)\n\tGetListOptionalCondition(ctx *gin.Context) (*dto.OptionalObjectPoolResult, error)\n}\n\ntype objectPoolService struct {\n\tdaoFactory dao.Factory\n}\n\nfunc NewObjectPoolService() ObjectPoolService {\n\treturn &objectPoolService{\n\t\tdaoFactory: dao.NewObjectStorageStore(),\n\t}\n}\n\nfunc (s *objectPoolService) OverviewAlert(ctx context.Context, par dto.OverViewAlertReq) (*dto.OverViewAlertRes, error) {\n\talerts, err := s.daoFactory.AlarmRpcClient().ListAlerts(ctx, &alarmv1alpha.ListAlertsRequest{\n\t\tPageNo:   -1,\n\t\tPageSize: -1,\n\t\tRegion:   par.Region,\n\t\tStatus:   \"firing\",\n\t})\n\tif err != nil {\n\t\treturn nil, errors.WithMessage(err, \"rpc call AlarmRpcClient.ListAlerts err\")\n\t}\n\n\t// 概览数据\n\tvar alertSlots []types.BasicOverviewSlot\n\tfor _, level := range constant.AlertLevels {\n\t\talertSlot := types.BasicOverviewSlot{\n\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\tCode:     par.PoolType,\n\t\t\t\tName:     constant.AlertLevelsName[level],\n\t\t\t\tUnitType: types.TypeNumber,\n\t\t\t\tUnit:     \"个\",\n\t\t\t\tValue:    utils.CountAlertsNum(alerts.Items, strings.ToLower(par.PoolType), level),\n\t\t\t\tKind:     constant.AlertKinds[level],\n\t\t\t},\n\t\t}\n\t\talertSlots = append(alertSlots, alertSlot)\n\t}\n\treturn &dto.OverViewAlertRes{\n\t\tAlerts: alertSlots,\n\t}, nil\n}\n\nfunc (s *objectPoolService) Overview(ctx context.Context, par dto.OverviewReq) (res *dto.OverViewRes, err error) {\n\t// 资源池容量\n\tvar (\n\t\tstatusCount        = map[string]int64{}\n\t\tuseStatus          = map[string]string{\"available\": \"待挂载\", \"in-use\": \"使用中\"} // 没有\n\t\tobjectPools        = make([]types.BasicOverviewSlot, 0)\n\t\tobjectVolumeCounts = make([]types.BasicOverviewSlot, 0)\n\t)\n\tobjectPoolStock, err := s.daoFactory.ObjectPoolRpcClient().ObjectPoolStock(ctx, &resource_objectstoragev1alpha.ObjectPoolStockReq{PoolId: constant.ObjectPoolMap[par.PoolType]})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\n\t// 组装业务数据\n\tstorageUse := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex: 0,\n\t\t\tName:  \"存储使用概览\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tstorageUse.Values = append(storageUse.Values,\n\t\ttypes.BasicOverviewSlotValue{\n\t\t\tName:     \"已使用\",\n\t\t\tValue:    objectPoolStock.TotalDiskCapacity - objectPoolStock.TotalFreeSpace,\n\t\t\tUnit:     \"GB\",\n\t\t\tUnitType: \"storage\",\n\t\t},\n\t\ttypes.BasicOverviewSlotValue{\n\t\t\tName:     \"可使用\",\n\t\t\tValue:    objectPoolStock.TotalFreeSpace,\n\t\t\tUnit:     \"GB\",\n\t\t\tUnitType: \"storage\",\n\t\t},\n\t)\n\n\t// 对象存储数量\n\tfor _, status := range useStatus {\n\t\tobjectVolumeResult, err := s.daoFactory.ObjectVolumeRpcClient().ListObjectVolume(ctx, &resource_objectstoragev1alpha.ObjectVolumeReq{\n\t\t\tPageSize: -1,\n\t\t\tRegion:   par.Region,\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\t\treturn nil, err\n\t\t}\n\t\tstatusCount[status] = objectVolumeResult.TotalCount\n\t}\n\tobjectVolumeCount := types.BasicOverviewSlot{\n\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\tIndex: 1,\n\t\t\tName:  \"对象存储概览\",\n\t\t},\n\t\tValues: make([]types.BasicOverviewSlotValue, 0),\n\t}\n\tfor status, count := range statusCount {\n\t\tobjectVolumeCount.Values = append(objectVolumeCount.Values, types.BasicOverviewSlotValue{\n\t\t\tName:     status,\n\t\t\tValue:    count,\n\t\t\tUnit:     \"个\",\n\t\t\tUnitType: \"number\",\n\t\t})\n\t}\n\tobjectPools = append(objectPools, storageUse)\n\tobjectVolumeCounts = append(objectVolumeCounts, objectVolumeCount)\n\treturn &dto.OverViewRes{\n\t\tObjectPools:        objectPools,\n\t\tObjectVolumeCounts: objectVolumeCounts,\n\t}, nil\n}\n\nfunc (s *objectPoolService) OverviewLine(ctx context.Context, par dto.OverviewLineReq) (res *dto.OverViewLineRes, err error) {\n\tobjectPoolRpcRes, err := s.daoFactory.ObjectPoolRpcClient().ListObjectPool(ctx, &resource_objectstoragev1alpha.ObjectPoolReq{\n\t\tRegion:   par.Region,\n\t\tPoolType: []string{par.PoolType},\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagHTTPFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tfor _, name := range par.MetricName {\n\t\tqlName := objectstorage.TemplateMap[name](objectPoolRpcRes.List[0].Region, \"\", objectPoolRpcRes.List[0].Name, objectPoolRpcRes.List[0].Name, objectPoolRpcRes.List[0].Name)\n\t\tqlMuster, err := s.daoFactory.AlarmRpcClient().ListPromQLs(ctx, qlName)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Overview pool get qlMuster info error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\t\tif len(qlMuster.Items) == 0 {\n\t\t\treturn nil, errors.New(\"pool qlMuster.Items is empty\")\n\t\t}\n\t\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagResponseSuccess, map[string]interface{}{\"pool pSql\": qlMuster.Items[0].RealPromql})\n\t\tqlResult, err := prom_client.MatrixQuery(ctx, qlMuster.Items[0].RealPromql, v1.Range{\n\t\t\tStart: time.UnixMilli(par.Start),\n\t\t\tEnd:   time.UnixMilli(par.End),\n\t\t\tStep:  prom_client.TimeToStep(par.End - par.Start),\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Overview pool get qlResult info error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\t\tif len(qlResult) == 0 {\n\t\t\treturn nil, errors.New(\"pool qlResult.Items is empty\")\n\t\t}\n\t\tvar line types.BasicOverviewSlot\n\t\tfor _, v := range qlResult {\n\t\t\tfor _, value := range v.Values {\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        strconv.FormatInt(int64(value.Timestamp), 10),\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\t\tValue:       value.Value,\n\t\t\t\t\tUnit:        qlMuster.Items[0].Unit,\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tDescription: time.UnixMilli(int64(value.Timestamp)).Format(\"2006-01-02 15:04:05\"),\n\t\t\t\t})\n\t\t\t\tfmt.Println(value.Value)\n\t\t\t}\n\t\t}\n\n\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\tName:     objectstorage.MetricMap[name],\n\t\t\tUnitType: types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\tUnit:     qlMuster.Items[0].Unit,\n\t\t\tKind:     types.KindInfo,\n\t\t}\n\n\t\t// 添加预测分析\n\t\tvar predictSql string\n\t\tstart, end := par.Start/1e3, par.End/1e3\n\t\tstep := blockstorage_utils.TimeToStepForInt(end - start)\n\t\tpredictStart, predictEnd := end, end+(end-start)\n\n\t\tif par.HasPrediction && objectstorage.ObjectPoolCapacityInventory == name {\n\t\t\tline.Info.Prognosis = len(line.Values)\n\t\t\trangeDuration := strconv.FormatInt(3*(end-start), 10)\n\t\t\tpredictDuration := strconv.FormatInt(end-start, 10)\n\t\t\tswitch name {\n\t\t\tcase objectstorage.ObjectPoolCapacityInventory:\n\t\t\t\tpredictSql = objectstorage.GetPredictObjectCapacity(objectPoolRpcRes.List[0].Name, rangeDuration+\"s\", predictDuration)\n\t\t\t}\n\t\t\tpredictMatrix, err := prom_client.MatrixQuery(ctx, predictSql, v1.Range{\n\t\t\t\tStart: time.Unix(predictStart, 0),\n\t\t\t\tEnd:   time.Unix(predictEnd, 0),\n\t\t\t\tStep:  time.Duration(step) * time.Second,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Error querying Prometheus predictMatrix \": err.Error()})\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tfor _, m := range predictMatrix {\n\t\t\t\tfor _, p := range m.Values {\n\t\t\t\t\ttimeStamp := p.Timestamp\n\t\t\t\t\tvalue := p.Value\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        timeStamp.String(),\n\t\t\t\t\t\tValue:       value,\n\t\t\t\t\t\tUnit:        qlMuster.Items[0].Unit,\n\t\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\t\tDescription: \"预测数据\",\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\n\treturn &dto.OverViewLineRes{\n\t\tLines: lines,\n\t}, nil\n}\n\nfunc (s *objectPoolService) List(ctx context.Context, par dto.ListReq) (res *dto.ListRes, err error) {\n\n\tobjectPoolList, err := s.daoFactory.ObjectPoolRpcClient().ListObjectPool(ctx, &resource_objectstoragev1alpha.ObjectPoolReq{\n\t\tPageNo:    int32(par.PageNo),\n\t\tPageSize:  int32(par.PageSize),\n\t\tRegion:    par.Region,\n\t\tOrderCode: par.OrderCode,\n\t\tOrderType: par.OrderType,\n\t\tPoolType:  par.PoolType,\n\t\tQuery:     par.Query,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tres = &dto.ListRes{\n\t\tTotalCount: len(objectPoolList.List),\n\t\tPageNo:     par.PageNo,\n\t\tPageSize:   par.PageSize,\n\t\tDataList:   make([]*dto.ObjectStorageMonitor, 0),\n\t}\n\tfor _, data := range objectPoolList.List {\n\t\tresult := &dto.ObjectStorageMonitor{\n\t\t\tId:                 data.Id,\n\t\t\tName:               data.Name,\n\t\t\tDiskType:           data.PoolType,\n\t\t\tMonitorStatus:      1,\n\t\t\tRegion:             data.Region,\n\t\t\tCapacityTotal:      float64(data.TotalDiskCapacity),\n\t\t\tCapacityUsedTotal:  float64(data.TotalUsedSpace),\n\t\t\tCapacityAvailable:  float64(data.TotalFreeSpace),\n\t\t\tCapacityUsedRate:   (float64(data.TotalUsedSpace) / float64(data.TotalDiskCapacity)) * 100,\n\t\t\tBucketNumber:       int64(data.BucketCount),\n\t\t\tHostNumber:         int64(data.ServerCount),\n\t\t\tCreateTime:         data.CreateTime,\n\t\t\tAlertAmount:        0, // TODO\n\t\t\tUploadBandwidth:    0, // TODO\n\t\t\tDownloadBandwidth:  0, // TODO\n\t\t\tHttpRequestAmount:  0, // TODO\n\t\t\tHttpsRequestAmount: 0, // TODO\n\t\t}\n\t\tres.DataList = append(res.DataList, result)\n\t}\n\n\treturn res, nil\n}\n\nfunc (s *objectPoolService) ObjectPoolVector(ctx context.Context, metricName, region, bucketID, resourcePool, resourcePoolType, name string) (float64, error) {\n\tpromQlReq := objectstorage.TemplateMap[metricName](region, bucketID, resourcePool, resourcePoolType, name)\n\trsp, err := s.daoFactory.AlarmRpcClient().ListPromQLs(ctx, promQlReq)\n\tif err != nil {\n\t\treturn 0, errors.WithMessagef(err, \"rpc call ListPromQLs err, req: %+v\", promQlReq)\n\t}\n\tif rsp == nil || len(rsp.Items) < 1 {\n\t\treturn 0, err\n\t}\n\tpromQL := rsp.Items[0].RealPromql\n\tfmt.Println(\"real promQL: \", promQL)\n\n\t//查Prometheus\n\tmatrix, err := prom_client.VectorQuery(ctx, promQL)\n\tif err != nil {\n\t\treturn 0, errors.WithMessage(err, \"prom_client VectorQuery err\")\n\t}\n\treturn prom_client.ParseOneVectorValue(matrix), nil\n}\n\nfunc (s *objectPoolService) GetListOptionalCondition(ctx *gin.Context) (*dto.OptionalObjectPoolResult, error) {\n\tvar (\n\t\tpoolTypeSet = collection.NewSet()\n\t)\n\tobjectPoolList, err := s.daoFactory.ObjectPoolRpcClient().ListObjectPool(ctx, &resource_objectstoragev1alpha.ObjectPoolReq{PageNo: 1, PageSize: 1000})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tfor _, objectPool := range objectPoolList.List {\n\t\tif objectPool.PoolType != \"\" {\n\t\t\tpoolTypeSet.Add(objectPool.PoolType)\n\t\t}\n\t}\n\tresult := dto.OptionalObjectPoolResult{\n\t\t\"PoolTypeSet\": poolTypeSet,\n\t}\n\treturn &result, nil\n}\n\nfunc (s *objectPoolService) DetailMetricOverview(ctx context.Context, par dto.ObjectPoolDetailMetricReq) (*dto.ObjectPoolDetailMetricRes, error) {\n\tobjectPool, err := s.daoFactory.ObjectPoolRpcClient().ObjectPoolStock(ctx, &resource_objectstoragev1alpha.ObjectPoolStockReq{\n\t\tPoolId: strconv.FormatInt(par.PoolId, 10),\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tfor _, name := range par.MetricName {\n\t\tqlName := objectstorage.TemplateMap[name](objectPool.Region, \"\", objectPool.Name, objectPool.Name, objectPool.Name)\n\t\tqlMuster, err := s.daoFactory.AlarmRpcClient().ListPromQLs(ctx, qlName)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"DetailMetricOverview pool get qlMuster info error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\t\tif len(qlMuster.Items) == 0 {\n\t\t\treturn nil, errors.New(\"pool qlMuster.Items is empty\")\n\t\t}\n\t\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagResponseSuccess, map[string]interface{}{\"pool pSql\": qlMuster.Items[0].RealPromql})\n\t\tqlResult, err := prom_client.VectorQuery(ctx, qlMuster.Items[0].RealPromql)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"DetailMetricOverview pool get qlResult info error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\t\tif len(qlResult) == 0 {\n\t\t\treturn nil, errors.New(\"pool qlResult.Items is empty\")\n\t\t}\n\t\tvar line types.BasicOverviewSlot\n\t\tfor _, v := range qlResult {\n\t\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\t\tName:     objectstorage.MetricMap[name],\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\tUnit:     qlMuster.Items[0].Unit,\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t\tValue:    v.Value,\n\t\t\t}\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\treturn &dto.ObjectPoolDetailMetricRes{\n\t\tLines: lines,\n\t}, nil\n}\n\nfunc (s *objectPoolService) DetailMetricLine(ctx context.Context, par dto.ObjectPoolDetailMetricLineReq) (*dto.ObjectPoolDetailMetricLineRes, error) {\n\tobjectPoolRpcRes, err := s.daoFactory.ObjectPoolRpcClient().ListObjectPool(ctx, &resource_objectstoragev1alpha.ObjectPoolReq{\n\t\tRegion:   par.Region,\n\t\tPoolType: []string{par.PoolType},\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagHTTPFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tfor _, name := range par.MetricName {\n\t\tqlName := objectstorage.TemplateMap[name](objectPoolRpcRes.List[0].Region, \"\", objectPoolRpcRes.List[0].Name, objectPoolRpcRes.List[0].Name, objectPoolRpcRes.List[0].Name)\n\t\tqlMuster, err := s.daoFactory.AlarmRpcClient().ListPromQLs(ctx, qlName)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Overview pool get qlMuster info error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\t\tif len(qlMuster.Items) == 0 {\n\t\t\treturn nil, errors.New(\"pool qlMuster.Items is empty\")\n\t\t}\n\t\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagResponseSuccess, map[string]interface{}{\"pool pSql\": qlMuster.Items[0].RealPromql})\n\t\tqlResult, err := prom_client.MatrixQuery(ctx, qlMuster.Items[0].RealPromql, v1.Range{\n\t\t\tStart: time.UnixMilli(par.Start),\n\t\t\tEnd:   time.UnixMilli(par.End),\n\t\t\tStep:  prom_client.TimeToStep(par.End - par.Start),\n\t\t})\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Overview pool get qlResult info error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\t\tif len(qlResult) == 0 {\n\t\t\treturn nil, errors.New(\"pool qlResult.Items is empty\")\n\t\t}\n\t\tvar line types.BasicOverviewSlot\n\t\tfor _, v := range qlResult {\n\t\t\tfor _, value := range v.Values {\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        strconv.FormatInt(int64(value.Timestamp), 10),\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\t\tValue:       value.Value,\n\t\t\t\t\tUnit:        qlMuster.Items[0].Unit,\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tDescription: time.UnixMilli(int64(value.Timestamp)).Format(\"2006-01-02 15:04:05\"),\n\t\t\t\t})\n\t\t\t\tfmt.Println(value.Value)\n\t\t\t}\n\t\t}\n\n\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\tName:     objectstorage.MetricMap[name],\n\t\t\tUnitType: types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\tUnit:     qlMuster.Items[0].Unit,\n\t\t\tKind:     types.KindInfo,\n\t\t}\n\t\tlines = append(lines, line)\n\t}\n\treturn &dto.ObjectPoolDetailMetricLineRes{\n\t\tLines: lines,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/object_storage/service/object_volume.go\n```golang\npackage service\n\nimport (\n\t\"errors\"\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\tresource_objectstoragev1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_objectstorage/v1alpha/gen\"\n\tprom_client \"ezone.ksyun.com/ezone/luban/monitor/common/client/prom\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/promql_template/objectstorage\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/types\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/constant\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/dto\"\n\t\"github.com/gin-gonic/gin\"\n\tv1 \"github.com/prometheus/client_golang/api/prometheus/v1\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype ObjectVolumeService interface {\n\tOverviewTop(c *gin.Context, req dto.ObjectVolumeOverviewTopReq) (*dto.ObjectVolumeOverviewTopRes, error)\n\tOverview(c *gin.Context, req dto.ObjectVolumeOverviewReq) (*dto.ObjectVolumeOverviewRes, error)\n\tDetailMetric(c *gin.Context, req dto.ObjectVolumeDetailMetricReq) (*dto.ObjectVolumeDetailMetricRes, error)\n\tDetailMetricLine(c *gin.Context, req dto.ObjectVolumeDetailMetricLineReq) (*dto.ObjectVolumeDetailMetricLineRes, error)\n}\n\ntype objectVolumeService struct {\n\tdaoFactory dao.Factory\n}\n\nfunc NewObjectVolumeService() ObjectVolumeService {\n\treturn &objectVolumeService{\n\t\tdaoFactory: dao.NewObjectStorageStore(),\n\t}\n}\n\nfunc (s *objectVolumeService) OverviewTop(ctx *gin.Context, par dto.ObjectVolumeOverviewTopReq) (*dto.ObjectVolumeOverviewTopRes, error) {\n\tvar tops []types.BasicOverviewSlot\n\tobjectBaseInfo, err := s.daoFactory.ObjectVolumeRpcClient().ListObjectVolume(ctx, &resource_objectstoragev1alpha.ObjectVolumeReq{\n\t\tPageSize:     -1,\n\t\tRegion:       par.Region,\n\t\tStorageclass: par.DiskType,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"OverviewTop get objectBaseInfo error\": err.Error()})\n\t\treturn nil, err\n\t}\n\tif objectBaseInfo.List == nil {\n\t\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"OverviewTop get objectBaseInfo nil\": \"data is empty\"})\n\t\treturn &dto.ObjectVolumeOverviewTopRes{\n\t\t\tTops: tops,\n\t\t}, nil\n\t}\n\t// 遍历metric\n\tfor _, name := range par.MetricName {\n\t\tqlName := objectstorage.TemplateMap[name](objectBaseInfo.List[0].Region, \"\", objectBaseInfo.List[0].PoolName, objectBaseInfo.List[0].PoolName, objectBaseInfo.List[0].Name)\n\t\tqlMuster, err := s.daoFactory.AlarmRpcClient().ListPromQLs(ctx, qlName)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Overview get qlMuster info error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\t\tif len(qlMuster.Items) == 0 {\n\t\t\treturn nil, errors.New(\"qlMuster.Items is empty\")\n\t\t}\n\t\tpSql := \"topk(\" + strconv.Itoa(par.TopK) + \",avg_over_time(\" + qlMuster.Items[0].RealPromql + \"[\" + strconv.FormatInt((par.End-par.Start)/1000/60, 10) + \"m]))\"\n\t\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagResponseSuccess, map[string]interface{}{\"pSql\": pSql})\n\t\tqlResult, err := prom_client.VectorQuery(ctx, pSql)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Overview get qlResult info error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\n\t\tvar line types.BasicOverviewSlot\n\t\tfor _, v := range qlResult {\n\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\tName:     string(v.Metric[\"name\"]),\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\tValue:    v.Value,\n\t\t\t\tUnit:     qlMuster.Items[0].Unit,\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t})\n\t\t}\n\n\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\tName:     objectstorage.MetricMap[name],\n\t\t\tUnitType: types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\tUnit:     qlMuster.Items[0].Unit,\n\t\t\tKind:     types.KindInfo,\n\t\t}\n\t\ttops = append(tops, line)\n\t}\n\n\treturn &dto.ObjectVolumeOverviewTopRes{\n\t\tTops: tops,\n\t}, nil\n}\n\nfunc (s *objectVolumeService) Overview(ctx *gin.Context, par dto.ObjectVolumeOverviewReq) (*dto.ObjectVolumeOverviewRes, error) {\n\tres := &dto.ObjectVolumeOverviewRes{}\n\t// 获取promql数据\n\tobjectBaseInfo, err := s.daoFactory.ObjectVolumeRpcClient().ListObjectVolume(ctx, &resource_objectstoragev1alpha.ObjectVolumeReq{\n\t\tPageSize:     -1,\n\t\tRegion:       par.Region,\n\t\tStorageclass: par.DiskType,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Overview get objectBaseInfo error\": err.Error()})\n\t\treturn nil, err\n\t}\n\tif objectBaseInfo.List == nil {\n\t\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Overview get objectBaseInfo nil\": \"data is empty\"})\n\t\treturn res, nil\n\t}\n\n\tfor _, metricName := range par.MetricName {\n\t\tvar line types.BasicOverviewSlot\n\t\tfor _, v := range metricName {\n\t\t\tqlName := objectstorage.TemplateMap[v](objectBaseInfo.List[0].Region, \"\", objectBaseInfo.List[0].PoolName, objectBaseInfo.List[0].PoolName, objectBaseInfo.List[0].Name)\n\t\t\tqlMuster, err := s.daoFactory.AlarmRpcClient().ListPromQLs(ctx, qlName)\n\t\t\tif err != nil {\n\t\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Overview get qlMuster info error\": err.Error()})\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tqlResult, err := prom_client.VectorQuery(ctx, qlMuster.Items[0].RealPromql)\n\t\t\tif err != nil {\n\t\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Overview get qlResult info error\": err.Error()})\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif len(qlResult) == 0 {\n\t\t\t\treturn nil, errors.New(\"qlResult.Items is empty\")\n\t\t\t}\n\n\t\t\tif metricName[0] == v {\n\t\t\t\tline = types.BasicOverviewSlot{\n\t\t\t\t\tInfo: types.BasicOverviewSlotInfo{\n\t\t\t\t\t\tName:     objectstorage.MetricMap[v],\n\t\t\t\t\t\tUnitType: types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\t\t\tUnit:     qlMuster.Items[0].Unit,\n\t\t\t\t\t\tKind:     types.KindInfo,\n\t\t\t\t\t\tValue:    qlResult[0].Value,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tvar platform, business int\n\t\t\t\tif v == objectstorage.ObjectStorageVolumeBucketCount {\n\t\t\t\t\tfor _, val := range objectBaseInfo.List {\n\t\t\t\t\t\tif val.Source == constant.Platform {\n\t\t\t\t\t\t\tplatform++\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbusiness++\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:     constant.SourcePlatform,\n\t\t\t\t\t\tUnitType: types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\t\t\tValue:    platform,\n\t\t\t\t\t\tUnit:     qlMuster.Items[0].Unit,\n\t\t\t\t\t\tKind:     types.KindInfo,\n\t\t\t\t\t})\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:     constant.SourceBusiness,\n\t\t\t\t\t\tUnitType: types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\t\t\tValue:    business,\n\t\t\t\t\t\tUnit:     qlMuster.Items[0].Unit,\n\t\t\t\t\t\tKind:     types.KindInfo,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:     objectstorage.MetricMap[v],\n\t\t\t\t\tUnitType: types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\t\tValue:    qlResult[0].Value,\n\t\t\t\t\tUnit:     qlMuster.Items[0].Unit,\n\t\t\t\t\tKind:     types.KindInfo,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tres.Overviews = append(res.Overviews, line)\n\t}\n\treturn res, nil\n}\n\nfunc (s *objectVolumeService) DetailMetric(ctx *gin.Context, par dto.ObjectVolumeDetailMetricReq) (*dto.ObjectVolumeDetailMetricRes, error) {\n\trpcRes, err := s.daoFactory.ObjectVolumeRpcClient().ListObjectVolume(ctx, &resource_objectstoragev1alpha.ObjectVolumeReq{\n\t\tBucketId: par.BucketId,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tobjectVolume := rpcRes.List[0]\n\n\tresult := []dto.ObjectVolumeDetailMetric{\n\t\t{\n\t\t\tPoolId:   objectVolume.PoolId,\n\t\t\tName:     \"当前存储总量\",\n\t\t\tValue:    objectVolume.TotalStorage,\n\t\t\tUnit:     \"B\",\n\t\t\tUnitType: types.TypeStorage,\n\t\t},\n\t\t{\n\t\t\tPoolId:   objectVolume.PoolId,\n\t\t\tName:     \"近30天下载总量\",\n\t\t\tValue:    objectVolume.DownloadFlowMonth,\n\t\t\tUnit:     \"B\",\n\t\t\tUnitType: types.TypeStorage,\n\t\t},\n\t\t{\n\t\t\tPoolId:   objectVolume.PoolId,\n\t\t\tName:     \"近30天API请求数\",\n\t\t\tValue:    objectVolume.RequestAmountMonth,\n\t\t\tUnit:     \"次\",\n\t\t\tUnitType: types.TypeNumber,\n\t\t},\n\t\t{\n\t\t\tPoolId:   objectVolume.PoolId,\n\t\t\tName:     \"总流入流量\",\n\t\t\tValue:    objectVolume.UploadFlow,\n\t\t\tUnit:     \"B\",\n\t\t\tUnitType: types.TypeStorage,\n\t\t},\n\t\t{\n\t\t\tPoolId:   objectVolume.PoolId,\n\t\t\tName:     \"总流出流量\",\n\t\t\tValue:    objectVolume.DownloadFlow,\n\t\t\tUnit:     \"B\",\n\t\t\tUnitType: types.TypeStorage,\n\t\t},\n\t}\n\treturn &dto.ObjectVolumeDetailMetricRes{\n\t\tResourceOverview:  result,\n\t\tCreationTimestamp: objectVolume.CreateTime,\n\t}, nil\n}\n\nfunc (s *objectVolumeService) DetailMetricLine(ctx *gin.Context, par dto.ObjectVolumeDetailMetricLineReq) (*dto.ObjectVolumeDetailMetricLineRes, error) {\n\trpcRes, err := s.daoFactory.ObjectVolumeRpcClient().ListObjectVolume(ctx, &resource_objectstoragev1alpha.ObjectVolumeReq{\n\t\tBucketId: par.BucketId,\n\t})\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagUndefind, map[string]interface{}{\"rpc error\": err})\n\t\treturn nil, err\n\t}\n\tlines := make([]types.BasicOverviewSlot, 0)\n\tvar line types.BasicOverviewSlot\n\tvar serverline types.BasicOverviewSlot\n\tvar str string\n\tfor _, name := range par.MetricName {\n\t\tstr = name\n\t\tqlName := objectstorage.TemplateMap[name](rpcRes.List[0].Region, strconv.FormatInt(rpcRes.List[0].BucketId, 10), rpcRes.List[0].PoolName, rpcRes.List[0].PoolName, rpcRes.List[0].Name)\n\t\tqlMuster, err := s.daoFactory.AlarmRpcClient().ListPromQLs(ctx, qlName)\n\t\tif err != nil {\n\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Detail get qlMuster info error\": err.Error()})\n\t\t\treturn nil, err\n\t\t}\n\t\tif len(qlMuster.Items) == 0 {\n\t\t\treturn nil, errors.New(\"qlMuster.Items is empty\")\n\t\t}\n\t\tlib.Log.TagInfo(lib.GetTraceContext(ctx), lib.DLTagResponseSuccess, map[string]interface{}{\"pSql\": qlMuster.Items[0].RealPromql})\n\n\t\tif strings.Contains(name, \"_count\") {\n\t\t\tqlResult, _ := prom_client.VectorQuery(ctx, qlMuster.Items[0].RealPromql)\n\t\t\tif qlResult == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, v := range qlResult {\n\t\t\t\tserverline.Values = append(serverline.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\tName:        objectstorage.MetricMap[name],\n\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\t\tValue:       v.Value,\n\t\t\t\t\tUnit:        qlMuster.Items[0].Unit,\n\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\tDescription: strconv.FormatInt(int64(v.Timestamp), 10),\n\t\t\t\t})\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Detail get qlResult info error\": err.Error()})\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t} else {\n\t\t\tqlResult, _ := prom_client.MatrixQuery(ctx, qlMuster.Items[0].RealPromql, v1.Range{\n\t\t\t\tStart: time.UnixMilli(par.Start),\n\t\t\t\tEnd:   time.UnixMilli(par.End),\n\t\t\t\tStep:  prom_client.TimeToStep(par.End - par.Start),\n\t\t\t})\n\t\t\tif qlResult == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, v := range qlResult {\n\t\t\t\tfor _, value := range v.Values {\n\t\t\t\t\tline.Values = append(line.Values, types.BasicOverviewSlotValue{\n\t\t\t\t\t\tName:        strconv.FormatInt(int64(value.Timestamp), 10),\n\t\t\t\t\t\tUnitType:    types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\t\t\tValue:       value.Value,\n\t\t\t\t\t\tUnit:        qlMuster.Items[0].Unit,\n\t\t\t\t\t\tKind:        types.KindInfo,\n\t\t\t\t\t\tDescription: objectstorage.MetricMap[name],\n\t\t\t\t\t})\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tlib.Log.TagError(lib.GetTraceContext(ctx), lib.DLTagResponseFailed, map[string]interface{}{\"Detail get qlResult info error\": err.Error()})\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tline.Info = types.BasicOverviewSlotInfo{\n\t\t\t\tName:     objectstorage.MetricMap[name],\n\t\t\t\tUnitType: types.ParseUnitTypeByUnit(qlMuster.Items[0].Unit),\n\t\t\t\tUnit:     qlMuster.Items[0].Unit,\n\t\t\t\tKind:     types.KindInfo,\n\t\t\t}\n\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\tif strings.Contains(str, \"_count\") {\n\t\tserverline.Info = types.BasicOverviewSlotInfo{\n\t\t\tName:     \"服务质量占比\",\n\t\t\tUnitType: types.ParseUnitTypeByUnit(\"%\"),\n\t\t\tUnit:     \"%\",\n\t\t\tKind:     types.KindInfo,\n\t\t}\n\t\tlines = append(lines, serverline)\n\t}\n\n\treturn &dto.ObjectVolumeDetailMetricLineRes{\n\t\tLines: lines,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/dto/response.go\n```golang\npackage dto\n\ntype TopJobRsp struct {\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/dto/request.go\n```golang\npackage dto\n\ntype TopJobReq struct {\n\t//资源类型\n\tResourceType string `path:\"resource_type\"`\n\n\t//时间间隔\n\tInterval string `path:\"interval\"` //\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/dao/monitor_tsdb_metrics.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/model\"\n\t\"gorm.io/gorm\"\n)\n\ntype MetricDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewMetricDao() *MetricDao {\n\treturn &MetricDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\nfunc (m *MetricDao) GetOneByCode(code string) (*model.MonitorTsdbMetrics, error) {\n\tcontent := model.MonitorTsdbMetrics{}\n\terr := m.db.Where(\"code = ?\", code).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &content, nil\n}\n\n// get list by codes\nfunc (m *MetricDao) GetListByCodes(codes []string) ([]model.MonitorTsdbMetrics, error) {\n\tvar content []model.MonitorTsdbMetrics\n\terr := m.db.Where(\"code in (?)\", codes).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn content, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/dao/monitor_top.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/gormSerializer\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/model\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/schema\"\n)\n\ntype MetricTopDao struct {\n\tdb *gorm.DB\n}\n\ntype QueryParams struct {\n\tRegion string\n\tAz     string\n\tCode   string\n}\n\nfunc NewMetricTopDao() *MetricTopDao {\n\tschema.RegisterSerializer(\"json_str\", gormSerializer.JSONSerializer{})\n\treturn &MetricTopDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\n//func (m *MetricTopDao) Insert(data model.MonitorTop) error {\n//\tif err := m.db.Create(&data).Error; err != nil {\n//\t\treturn err\n//\t}\n//\treturn nil\n//}\n\nfunc (m *MetricTopDao) CreateOrUpdate(data model.MonitorTop) error {\n\t// Save update value in database, if the value doesn't have primary key, will insert it\n\tif err := m.db.Save(&data).Error; err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (m *MetricTopDao) GetOneByCode(q QueryParams) (model.MonitorTop, error) {\n\tvar data model.MonitorTop\n\tif err := m.db.Where(\"region = ? AND az = ? AND code = ?\", q.Region, q.Az, q.Code).First(&data).Error; err != nil {\n\t\treturn data, err\n\t}\n\treturn data, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/dao/overview.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\n\tblockstoragepb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_blockstorage/v1alpha/gen\"\n\tcomputepb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_compute/v1alpha/gen\"\n\tdatabasepb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_database/v1alpha/gen\"\n\tnetworkpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n)\n\ntype JobsStore struct {\n\t//rpc\n\tNetworkRpcClient   networkpb.ResourceNetworkClient\n\tDatabaseRpcClient  databasepb.DatabaseServiceClient\n\tVmRpcClient        computepb.VmServiceClient\n\tEbsVolumeRpcClient blockstoragepb.EbsVolumeServiceClient\n\n\t////dao\n\tMetricDao          *MetricDao\n\tMetricTopDao       *MetricTopDao\n\tDbRedisInstanceDao *DbRedisInstanceDao\n}\n\nfunc NewJobsStore() *JobsStore {\n\t//resource\n\tresourceAddr := lib.GetStringConf(\"base.grpc.luban_resource\")\n\tresourceConn, err := grpcx.NewGrpcClientConn(resourceAddr)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagUndefind, map[string]interface{}{\"connect luban_resource grpc server error, %s\": err.Error()})\n\t}\n\n\treturn &JobsStore{\n\t\tNetworkRpcClient:   networkpb.NewResourceNetworkClient(resourceConn),\n\t\tDatabaseRpcClient:  databasepb.NewDatabaseServiceClient(resourceConn),\n\t\tVmRpcClient:        computepb.NewVmServiceClient(resourceConn),\n\t\tEbsVolumeRpcClient: blockstoragepb.NewEbsVolumeServiceClient(resourceConn),\n\t\tMetricDao:          NewMetricDao(),\n\t\tMetricTopDao:       NewMetricTopDao(),\n\t\tDbRedisInstanceDao: NewDbRedisInstanceDao(),\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/dao/db_redis_instance.go\n```golang\npackage dao\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/database/model\"\n\t\"gorm.io/gorm\"\n)\n\ntype DbRedisInstanceDao struct {\n\tdb *gorm.DB\n}\n\nfunc NewDbRedisInstanceDao() *DbRedisInstanceDao {\n\treturn &DbRedisInstanceDao{\n\t\tdb: lib.GORMMapPool[\"business\"],\n\t}\n}\n\nfunc (m *DbRedisInstanceDao) GetDbRedisInstance(instanceId string) (*[]model.DbRedisInstance, error) {\n\tvar content []model.DbRedisInstance\n\terr := m.db.Where(\"role = 'MASTER' and instance_id = ?\", instanceId).Find(&content).Error\n\tif err != nil {\n\t\tlib.Log.TagError(lib.NewTrace(), lib.DLTagMySqlFailed, map[string]interface{}{\"error\": err.Error()})\n\t\treturn nil, err\n\t}\n\treturn &content, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/controller/top_job.go\n```golang\npackage controller\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/consts\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/constant\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/service\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/response\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype TopJobController struct {\n\tsvc *service.TopJobService\n}\n\nfunc NewJobsController() *TopJobController {\n\treturn &TopJobController{\n\t\tsvc: service.NewTopJobService(),\n\t}\n}\n\nfunc (s *TopJobController) TopJob(c *gin.Context) {\n\t// 参数绑定\n\tparams := dto.TopJobReq{\n\t\tResourceType: c.Param(\"resource_type\"),\n\t\tInterval:     c.Param(\"interval\"),\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"params\": params})\n\n\tsliceIn := func(str string, slice []string) bool {\n\t\tfor _, v := range slice {\n\t\t\tif v == str {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\t//参数校验\n\tif !sliceIn(params.ResourceType, constant.ResourceTypes) {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": consts.ParameterError, \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"resource_type 参数错误\")\n\t\treturn\n\t}\n\n\tif !sliceIn(params.Interval, constant.Intervals) {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagRequestOut, map[string]interface{}{\"error\": consts.ParameterError, \"params\": params})\n\t\tresponse.Failed(c, http.StatusBadRequest, consts.ParameterError, \"interval 参数错误\")\n\t\treturn\n\t}\n\n\t// 业务处理\n\tres, err := s.svc.TopJob(c.Request.Context(), &params)\n\tif err != nil {\n\t\tlib.Log.TagError(lib.GetTraceContext(c), lib.DLTagResponseFailed, map[string]interface{}{\"error\": err.Error()})\n\t\tresponse.Failed(c, http.StatusInternalServerError, consts.GainFail, \"获取服务器概览失败\")\n\t\treturn\n\t}\n\n\tlib.Log.TagInfo(lib.GetTraceContext(c), lib.DLTagResponseSuccess, map[string]interface{}{\"res\": res})\n\tresponse.Success(c, res)\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/constant/constant.go\n```golang\npackage constant\n\nconst (\n\t// 网络云产品\n\tEip = \"eip\"\n\tLb  = \"lb\"\n\tNat = \"nat\"\n\n\t// 计算云产品\n\tVm = \"vm\"\n\n\t// 数据库云产品\n\tMysql = \"mysql\"\n\tRedis = \"redis\"\n\n\t// 块存储云产品\n\tEbsVolumeEHDD = \"ebs_volume_ehdd\"\n\tEbsVolumeSSD  = \"ebs_volume_ssd3.0\"\n\n\t// 对象存储云产品\n\tObjectVolumeKs3 = \"object_volume_ks3\"\n\n\t//定时任务时间间隔\n\t// 0.5h,1h,3h,12h,1d,7d,30d\n\tHalfHour    = \"0.5h\"\n\tOneHour     = \"1h\"\n\tThreeHours  = \"3h\"\n\tTwelveHours = \"12h\"\n\tOneDay      = \"1d\"\n\tSevenDays   = \"7d\"\n\tThirtyDays  = \"30d\"\n)\n\nvar (\n\tResourceTypes = []string{Eip, Lb, Nat, Vm, Mysql, Redis, EbsVolumeEHDD, EbsVolumeSSD, ObjectVolumeKs3}\n\tIntervals     = []string{HalfHour, OneHour, ThreeHours, TwelveHours, OneDay, SevenDays, ThirtyDays}\n)\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/model/monitor_tsdb_metrics.go\n```golang\npackage model\n\nimport (\n\t\"time\"\n)\n\ntype MonitorTsdbMetrics struct {\n\tID           int       `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`\n\tProductLine  string    `gorm:\"column:product_line;NOT NULL\"`  // 产品线\n\tCode         string    `gorm:\"column:code;NOT NULL\"`          // 唯一标识\n\tName         string    `gorm:\"column:name;NOT NULL\"`          // 中文名\n\tMetricPrefix string    `gorm:\"column:metric_prefix;NOT NULL\"` // metric前缀\n\tUnit         string    `gorm:\"column:unit;NOT NULL;default:''\"`\n\tCreatedAt    time.Time `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"`\n\tUpdatedAt    time.Time `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"`\n\tDeletedAt    time.Time `gorm:\"column:deleted_at\"`\n}\n\nfunc (m *MonitorTsdbMetrics) TableName() string {\n\treturn \"monitor_tsdb_metrics\"\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/model/monitor_top.go\n```golang\npackage model\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n\t\"time\"\n)\n\n// region + az + code 唯一\ntype MonitorTop struct {\n\tID                  int        `gorm:\"column:id;primary_key;AUTO_INCREMENT\"`        // 主键\n\tProductLine         string     `gorm:\"column:product_line;NOT NULL\"`                // 产品线\n\tRegion              string     `gorm:\"column:region;NOT NULL\"`                      // 区域\n\tAz                  string     `gorm:\"column:az;NOT NULL\"`                          // 可用区\n\tCode                string     `gorm:\"column:code;NOT NULL\"`                        // top项的唯一标识\n\tName                string     `gorm:\"column:name;NOT NULL\"`                        // 中文名\n\tHalfHour            []TopValue `gorm:\"column:half_hour;serializer:json_str\"`        // 0.5h top10数据\n\tHalfHourUpdateAt    time.Time  `gorm:\"column:half_hour_update_at\"`                  // 0.5h更新时间\n\tOneHour             []TopValue `gorm:\"column:one_hour;serializer:json_str\"`         // 1h top10数据\n\tOneHourUpdateAt     time.Time  `gorm:\"column:one_hour_update_at\"`                   // 1h更新时间\n\tThreeHours          []TopValue `gorm:\"column:three_hours;serializer:json_str\"`      // 3h top10数据\n\tThreeHoursUpdateAt  time.Time  `gorm:\"column:three_hours_update_at\"`                // 3h更新时间\n\tTwelveHours         []TopValue `gorm:\"column:twelve_hours;serializer:json_str\"`     // 12h top10数据\n\tTwelveHoursUpdateAt time.Time  `gorm:\"column:twelve_hours_update_at\"`               // 12h更新时间\n\tOneDay              []TopValue `gorm:\"column:one_day;serializer:json_str\"`          // 1d top10数据\n\tOneDayUpdateAt      time.Time  `gorm:\"column:one_day_update_at\"`                    // 1d更新时间\n\tSevenDays           []TopValue `gorm:\"column:seven_days;serializer:json_str\"`       // 7d top10数据\n\tSevenDaysUpdateAt   time.Time  `gorm:\"column:seven_days_update_at\"`                 // 7d更新时间\n\tThirtyDays          []TopValue `gorm:\"column:thirty_days;serializer:json_str\"`      // 30d top10数据\n\tThirtyDaysUpdateAt  time.Time  `gorm:\"column:thirty_days_update_at\"`                // 30d更新时间\n\tCreatedAt           time.Time  `gorm:\"column:created_at;default:CURRENT_TIMESTAMP\"` // 创建时间\n\tUpdatedAt           time.Time  `gorm:\"column:updated_at;default:CURRENT_TIMESTAMP\"` // 更新时间\n\tDeletedAt           time.Time  `gorm:\"column:deleted_at\"`                           // 删除时间\n}\n\ntype TopValue struct {\n\tParentId string  //父级id，暂时用于标识redis的clusterId\n\tId       string  //实例唯一id\n\tName     string  //名称\n\tValue    float64 //值\n}\n\nfunc (m *MonitorTop) TableName() string {\n\treturn \"monitor_top\"\n}\n\nfunc (m *MonitorTop) ParseIntervalData(start, end int64) []TopValue {\n\tvar intervalData []TopValue\n\tintervalStr := opentsdb.ParseTimeInterval(start, end)\n\tswitch intervalStr {\n\tcase \"0.5h\":\n\t\tintervalData = m.HalfHour\n\tcase \"1h\":\n\t\tintervalData = m.OneHour\n\tcase \"3h\":\n\t\tintervalData = m.ThreeHours\n\tcase \"12h\":\n\t\tintervalData = m.TwelveHours\n\tcase \"1d\":\n\t\tintervalData = m.OneDay\n\tcase \"7d\":\n\t\tintervalData = m.SevenDays\n\tcase \"30d\":\n\t\tintervalData = m.ThirtyDays\n\t}\n\treturn intervalData\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/service/mysql_job.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_database/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/mysql\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dto\"\n\t\"fmt\"\n)\n\nfunc (t *TopJobService) mysqlTopJob(ctx context.Context, par *dto.TopJobReq) (*jobParam, error) {\n\n\tmysqlListRsp, err := t.Store.DatabaseRpcClient.ListDatabase(ctx, &pb.ProductDbListRequest{\n\t\tPageSize:     -1,\n\t\tDataBaseType: \"mysql\",\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"error query rpc ListMysql: %v\", err)\n\t\treturn nil, err\n\t}\n\tmysqlList := mysqlListRsp.Data\n\thasAz := false\n\tif len(mysqlList) > 0 && mysqlList[len(mysqlList)-1].Az != \"\" {\n\t\thasAz = true\n\t}\n\n\tallIdToInstanceMap := make(map[string]instanceInfo)\n\tregionToInstancesMap := make(regionAzGroup)\n\tazToInstancesMap := make(regionAzGroup)\n\tfor _, m := range mysqlList {\n\t\tinstance := instanceInfo{\n\t\t\tId:     m.Id,\n\t\t\tName:   m.Name,\n\t\t\tRegion: m.Region,\n\t\t}\n\t\tallIdToInstanceMap[m.Id] = instance\n\t\trz := regionAz{\n\t\t\tRegion: m.Region,\n\t\t\tAz:     m.Az,\n\t\t}\n\t\tregionToInstancesMap[rz] = append(regionToInstancesMap[rz], instance)\n\t\tazToInstancesMap[rz] = append(azToInstancesMap[rz], instance)\n\t}\n\n\tif !hasAz {\n\t\tazToInstancesMap = nil\n\t}\n\n\t//需要TOP的指标\n\tmetrics := []string{mysql.Mysql_cpu_used_percent, mysql.Mysql_memory_used_percent, mysql.Mysql_riops, mysql.Mysql_wiops, mysql.Mysql_threads_connected, mysql.Mysql_threads_running, mysql.Mysql_bytes_received, mysql.Mysql_bytes_sent, mysql.Mysql_qps, mysql.Mysql_tps}\n\treturn &jobParam{\n\t\tinterval:             par.Interval,\n\t\tmetrics:              metrics,\n\t\tallIdToInstanceMap:   allIdToInstanceMap,\n\t\tregionToInstancesMap: regionToInstancesMap,\n\t\tazToInstancesMap:     azToInstancesMap,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/service/network_job.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/eip\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dto\"\n\t\"fmt\"\n)\n\nfunc (n *TopJobService) eipTopJob(ctx context.Context, par *dto.TopJobReq) (*jobParam, error) {\n\n\teipListRsp, err := n.Store.NetworkRpcClient.ListEip(ctx, &pb.ListEipReq{\n\t\tPageSize: -1, //all\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"error query rpc ListEip: %v\", err)\n\t\treturn nil, err\n\t}\n\teipList := eipListRsp.EipSet\n\n\tallIdToInstanceMap := make(map[string]instanceInfo)\n\tregionToInstancesMap := make(regionAzGroup)\n\t//azToInstancesMap := make(regionAzGroup)\n\tfor _, e := range eipList {\n\n\t\t//只有绑定状态的eip才有监控数据\n\t\tif e.BoundState != 3 {\n\t\t\tcontinue\n\t\t}\n\n\t\tinstance := instanceInfo{\n\t\t\tId:     e.InstanceID,\n\t\t\tName:   e.IpAddr,\n\t\t\tRegion: e.Region,\n\t\t}\n\t\tallIdToInstanceMap[e.InstanceID] = instance\n\t\trz := regionAz{\n\t\t\tRegion: e.Region,\n\t\t\t//Az:     e.Az,   产品有az划分的添加\n\t\t}\n\t\tregionToInstancesMap[rz] = append(regionToInstancesMap[rz], instance)\n\t\t//azToInstancesMap[rz] = append(azToInstanceMap[rz], instance)\n\t}\n\n\t//需要TOP的指标\n\tmetrics := eip.Eip_top_metirc\n\treturn &jobParam{\n\t\tinterval:             par.Interval,\n\t\tmetrics:              metrics,\n\t\tallIdToInstanceMap:   allIdToInstanceMap,\n\t\tregionToInstancesMap: regionToInstancesMap,\n\t\t//azToInstancesMap: azToInstancesMap,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/service/top_job_test.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n\n\t\"ezone.ksyun.com/ezone/luban/communal/lib\"\n\tcomputePoolv1alpha \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_compute/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/grpcx\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb/pkg\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dto\"\n)\n\nfunc findProjectRoot(startDir string) string {\n\t_, err := os.Stat(filepath.Join(startDir, \"go.mod\"))\n\tif err == nil {\n\t\treturn startDir\n\t}\n\t// 获取上级目录\n\tparentDir := filepath.Dir(startDir)\n\tif parentDir == startDir {\n\t\treturn \"\"\n\t}\n\treturn findProjectRoot(parentDir)\n}\n\nfunc TestTopJobService_TopJob(t *testing.T) {\n\ttype args struct {\n\t\tctx context.Context\n\t\tpar *dto.TopJobReq\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"test01\",\n\t\t\targs: args{\n\t\t\t\tctx: context.Background(),\n\t\t\t\tpar: &dto.TopJobReq{\n\t\t\t\t\tResourceType: \"vm\",\n\t\t\t\t\tInterval:     \"0.5h\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\t// 配置信息\n\t\t\tdir, _ := os.Getwd()\n\t\t\tif err := lib.InitModuleYaml(findProjectRoot(dir)+\"/conf/\", []string{\"base\", \"mysql\", \"redis\"}); err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t}\n\t\t\tn := &TopJobService{}\n\t\t\tresourceAddr := \"10.177.10.1:8810\"\n\t\t\tresourceConn, _ := grpcx.NewGrpcClientConn(resourceAddr)\n\t\t\tn.Store.VmRpcClient = computePoolv1alpha.NewVmServiceClient(resourceConn)\n\t\t\tn.Store.MetricDao = dao.NewMetricDao()\n\t\t\tn.Store.MetricTopDao = dao.NewMetricTopDao()\n\n\t\t\tgot, _ := n.TopJob(tt.args.ctx, tt.args.par)\n\t\t\tt.Logf(\"Test top job successful %v\", got)\n\t\t})\n\t}\n}\n\nfunc Test_queryAndParseTopValues(t *testing.T) {\n\ttype args struct {\n\t\tregion string\n\t\tpar    pkg.QueryParam\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"test01\",\n\t\t\targs: args{\n\t\t\t\tregion: \"cn-shanghai-2\",\n\t\t\t\tpar: pkg.QueryParam{\n\t\t\t\t\tStart: 1702651144,\n\t\t\t\t\tEnd:   1706251144,\n\t\t\t\t\tQueries: []pkg.SubQuery{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAggregator: \"sum\",\n\t\t\t\t\t\t\tMetric:     \"cpu.utilizition.total.171c7bba-f23e-42cb-a446-29f757cf3c81\",\n\t\t\t\t\t\t\tRate:       false,\n\t\t\t\t\t\t\tRateParams: nil,\n\t\t\t\t\t\t\tDownsample: \"1h-avg-zero\",\n\t\t\t\t\t\t\tTags: map[string]string{\n\t\t\t\t\t\t\t\t\"host\": \"171c7bba-f23e-42cb-a446-29f757cf3c81\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFiters: nil,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tNoAnnotations:     false,\n\t\t\t\t\tGlobalAnnotations: false,\n\t\t\t\t\tMsResolution:      false,\n\t\t\t\t\tShowTSUIDs:        false,\n\t\t\t\t\tDelete:            false,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\n\t\t\tgot, _ := queryAndParseTopValues(context.Background(), tt.args.region, tt.args.par)\n\n\t\t\tjsonResult, err := json.Marshal(got)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"Failed to marshal result to JSON: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tt.Logf(\"query and parese top values result = %v\", string(jsonResult))\n\t\t})\n\t}\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/service/top_job.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"sort\"\n\t\"sync\"\n\t\"time\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tools\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/vm\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/utils\"\n\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/client/opentsdb/pkg\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/constant\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dao\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dto\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/model\"\n\t\"gorm.io/gorm\"\n)\n\ntype TopJobService struct {\n\tStore dao.JobsStore\n}\n\nfunc NewTopJobService() *TopJobService {\n\treturn &TopJobService{\n\t\tStore: *dao.NewJobsStore(),\n\t}\n}\n\ntype instanceInfo struct {\n\tId        string\n\tName      string\n\tRegion    string\n\tValue     float64\n\tInstances []instanceInfo\n}\n\ntype regionAz struct {\n\tRegion string\n\tAz     string\n}\n\ntype regionAzGroup map[regionAz][]instanceInfo\n\ntype jobParam struct {\n\tinterval             string\n\tmetrics              []string\n\tallIdToInstanceMap   map[string]instanceInfo //id:instanceInfo\n\tregionToInstancesMap regionAzGroup           //group by region,  cn-shanghai-2:[]instanceInfo\n\tazToInstancesMap     regionAzGroup           //group by region,az, cn-shanghai-2,cn-shanghai-2a:[]instanceInfo\n}\n\nfunc (n *TopJobService) TopJob(ctx context.Context, par *dto.TopJobReq) (*dto.TopJobRsp, error) {\n\tvar (\n\t\terr   error\n\t\tparam *jobParam\n\t)\n\n\tswitch par.ResourceType {\n\tcase constant.Eip:\n\t\tparam, err = n.eipTopJob(ctx, par)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase constant.Mysql:\n\t\tparam, err = n.mysqlTopJob(ctx, par)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase constant.Redis:\n\t\tparam, err = n.redisTopJob(ctx, par)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase constant.Vm:\n\t\tparam, err = n.vmTopJob(ctx, par)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase constant.EbsVolumeEHDD:\n\t\tparam, err = n.ehddEbsVolumeTopJob(ctx, par)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase constant.EbsVolumeSSD:\n\t\tparam, err = n.ssdEbsVolumeTopJob(ctx, par)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase constant.Lb:\n\t\tparam, err = n.lbTopJob(ctx, par)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase constant.Nat:\n\t\tparam, err = n.natTopJob(ctx, par)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tdefault:\n\t\treturn nil, errors.New(\"unimplement resource type\")\n\t}\n\n\terr = n.doTopJob(ctx, *param)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &dto.TopJobRsp{}, nil\n}\n\nfunc (n *TopJobService) doTopJob(ctx context.Context, param jobParam) error {\n\n\tinTime := time.Now()\n\n\tinterval := param.interval\n\tmetrics := param.metrics\n\tallIdToInstanceMap := param.allIdToInstanceMap\n\tregionToInstancesMap := param.regionToInstancesMap\n\tazToInstancesMap := param.azToInstancesMap\n\n\ttsdbMetricList, err := n.Store.MetricDao.GetListByCodes(metrics)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar topValueChanCount int\n\tfor _, v := range allIdToInstanceMap {\n\t\tif len(v.Instances) != 0 {\n\t\t\ttopValueChanCount += len(v.Instances)\n\t\t} else {\n\t\t\ttopValueChanCount++\n\t\t}\n\t}\n\n\tfor _, m := range tsdbMetricList {\n\t\tallTopValues := []model.TopValue{}\n\t\ttopValueChan := make(chan model.TopValue, topValueChanCount)\n\t\twg := sync.WaitGroup{}\n\t\tfor k, v := range allIdToInstanceMap {\n\t\t\tif len(v.Instances) == 0 {\n\t\t\t\tv.Instances = append(v.Instances, v)\n\t\t\t\tallIdToInstanceMap[k] = v\n\t\t\t}\n\t\t\tregion := v.Region\n\t\t\tparentId := v.Id\n\t\t\tfor _, childV := range v.Instances {\n\t\t\t\tqueryParam := tsdbQuery(interval, childV.Id, m)\n\t\t\t\twg.Add(1)\n\t\t\t\tutils.GoSafe(func() {\n\t\t\t\t\tdefer wg.Done()\n\t\t\t\t\ttopValue, err := queryAndParseTopValues(ctx, region, queryParam)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tfmt.Printf(\"Error queryAndParseTopValues: %v\\n\", err)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\ttopValue.ParentId = parentId\n\t\t\t\t\ttopValueChan <- topValue\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\twg.Wait()\n\t\tclose(topValueChan)\n\t\tfor v := range topValueChan {\n\t\t\tif instance, ok := allIdToInstanceMap[v.ParentId]; ok {\n\t\t\t\tinstance.Value += v.Value\n\t\t\t\tallIdToInstanceMap[v.ParentId] = instance\n\t\t\t}\n\t\t}\n\n\t\tfor k, v := range allIdToInstanceMap {\n\t\t\tv.Value = v.Value / float64(len(v.Instances))\n\t\t\tif m.Unit == \"%\" {\n\t\t\t\tv.Value = tools.FormPercent(v.Value / 1e2)\n\t\t\t}\n\t\t\tallTopValues = append(allTopValues, model.TopValue{\n\t\t\t\tId:    v.Id,\n\t\t\t\tName:  v.Name,\n\t\t\t\tValue: v.Value,\n\t\t\t})\n\t\t\tv.Value = 0\n\t\t\tallIdToInstanceMap[k] = v\n\t\t}\n\n\t\t//top all region, all az\n\t\terr = saveTopValues(n.Store.MetricTopDao, interval, \"\", \"\", allTopValues, m)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tidTotopValuesMap := topValuesToMap(allTopValues)\n\t\t//top by regions\n\t\tfor rz, instances := range regionToInstancesMap {\n\t\t\tregionTopValues := []model.TopValue{}\n\t\t\tfor _, instance := range instances {\n\t\t\t\tregionTopValues = append(regionTopValues, idTotopValuesMap[instance.Id])\n\t\t\t}\n\t\t\terr = saveTopValues(n.Store.MetricTopDao, interval, rz.Region, \"\", regionTopValues, m)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\t//top by region,az\n\t\tif azToInstancesMap != nil && len(azToInstancesMap) > 0 {\n\t\t\tfor rz, instances := range azToInstancesMap {\n\t\t\t\tazTopValues := []model.TopValue{}\n\t\t\t\tfor _, instance := range instances {\n\t\t\t\t\tazTopValues = append(azTopValues, idTotopValuesMap[instance.Id])\n\t\t\t\t}\n\t\t\t\terr = saveTopValues(n.Store.MetricTopDao, interval, rz.Region, rz.Az, azTopValues, m)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Printf(\"total cost: %v\", time.Since(inTime))\n\treturn nil\n}\n\nfunc topValuesToMap(topValues []model.TopValue) map[string]model.TopValue {\n\ttopValuesMap := make(map[string]model.TopValue)\n\tfor _, v := range topValues {\n\t\ttopValuesMap[v.Id] = v\n\t}\n\treturn topValuesMap\n}\n\nfunc tsdbQuery(interval string, instanceId string, m model.MonitorTsdbMetrics) pkg.QueryParam {\n\n\t//top的查询区间\n\tstartTime, endTime := opentsdb.ParseTimeFromIntervalStr(interval)\n\tqueryParam := pkg.QueryParam{\n\t\tStart: startTime,\n\t\tEnd:   endTime,\n\t}\n\n\tsubqueries := make([]pkg.SubQuery, 0)\n\teipQuery := tsdbql_template.ParseTsdbQuery(m.ProductLine, m.MetricPrefix, instanceId)\n\tsubqueries = append(subqueries, pkg.SubQuery{\n\t\tAggregator: \"sum\",\n\t\tMetric:     eipQuery.Metric,\n\t\tTags:       map[string]string{\"host\": eipQuery.HostTag},\n\t\t//Downsample: opentsdb.TimeToDownsample(endTime - startTime),\n\t\t//根据时间间隔设置返回计算好平均值后一个点的downsample\n\t\tDownsample: opentsdb.ParseTopDownsampleFromIntervalStr(interval),\n\t})\n\tif m.ProductLine == \"kec\" {\n\t\tsubqueries = make([]pkg.SubQuery, 0)\n\t\tvmQuery := vm.ParseTsdbQuery(m.Code, m.MetricPrefix, instanceId)\n\t\tsubqueries = append(subqueries, pkg.SubQuery{\n\t\t\tAggregator: \"sum\",\n\t\t\tMetric:     vmQuery.Metric,\n\t\t\tDownsample: opentsdb.ParseTopDownsampleFromIntervalStr(interval),\n\t\t\tTags:       vmQuery.Tags,\n\t\t})\n\t}\n\tqueryParam.Queries = subqueries\n\treturn queryParam\n}\n\nfunc queryAndParseTopValues(ctx context.Context, region string, queryParam pkg.QueryParam) (topValue model.TopValue, err error) {\n\tqueryResp, err := opentsdb.QueryWithLimiter(ctx, region, queryParam)\n\tif err != nil {\n\t\tfmt.Printf(\"Error tsdb query: %+v   err: [%v]\\n\", queryParam, err)\n\t\treturn\n\t}\n\n\t//查询404返回空数据\n\tif queryResp.StatusCode != http.StatusOK {\n\t\tif queryResp.StatusCode == http.StatusNotFound {\n\t\t\treturn topValue, errors.New(fmt.Sprintf(\"tsdb query err, metric not found, RSP: [%+v] REQ: [%+v]\\n\", queryResp.QueryRespCnts, queryParam))\n\t\t}\n\t\treturn topValue, errors.New(fmt.Sprintf(\"tsdb query err, rsp error, RSP: [%+v] REQ: [%+v]\\n\", queryResp.QueryRespCnts, queryParam))\n\t}\n\t//查询200,但是数据为空，返回空数据\n\tif len(queryResp.QueryRespCnts) <= 0 {\n\t\treturn topValue, errors.New(fmt.Sprintf(\"tsdb query err, rsp empty, RSP: [%+v] REQ: [%+v]\\n\", queryResp.QueryRespCnts, queryParam))\n\t}\n\n\tdata := queryResp.QueryRespCnts[0]\n\ttopValue = model.TopValue{\n\t\tId:    tsdbql_template.GetInstanceIdFromHostTag(data.Tags[\"host\"]),\n\t\tValue: data.GetDataPoints()[0].Value.(float64),\n\t}\n\n\treturn\n}\n\nfunc saveTopValues(metricTopDao *dao.MetricTopDao, interval, region, az string, topValues []model.TopValue, m model.MonitorTsdbMetrics) error {\n\n\t//copy，no change original\n\tnewTopValues := make([]model.TopValue, len(topValues))\n\tcopy(newTopValues, topValues)\n\n\t//sort\n\tsort.Slice(newTopValues, func(i, j int) bool {\n\t\treturn newTopValues[i].Value > newTopValues[j].Value\n\t})\n\n\t//limit top10\n\tif len(newTopValues) > 10 {\n\t\tnewTopValues = newTopValues[:10]\n\t}\n\n\t//if all newTopValues value == 0 , print debug log\n\tallZero := true\n\tfor _, v := range newTopValues {\n\t\tif v.Value != 0 {\n\t\t\tallZero = false\n\t\t\tbreak\n\t\t}\n\t}\n\tif allZero {\n\t\tfmt.Printf(\"\\n Debug-Zero: All newTopValues are zero. region: %s, az: %s, code: %s, interval: %s\\n\", region, az, m.Code, interval)\n\t\treturn nil\n\t}\n\n\t//save to mysql\n\ttopData, err := metricTopDao.GetOneByCode(dao.QueryParams{\n\t\tRegion: region,\n\t\tAz:     az,\n\t\tCode:   m.Code,\n\t})\n\tif err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {\n\t\treturn err\n\t}\n\n\tif errors.Is(err, gorm.ErrRecordNotFound) {\n\t\ttopData.Region = region\n\t\ttopData.Az = az\n\t\ttopData.ProductLine = m.ProductLine\n\t\ttopData.Name = m.Name\n\t\ttopData.Code = m.Code\n\t}\n\n\tswitch interval {\n\tcase constant.HalfHour:\n\t\ttopData.HalfHour = newTopValues\n\t\ttopData.HalfHourUpdateAt = time.Now()\n\tcase constant.OneHour:\n\t\ttopData.OneHour = newTopValues\n\t\ttopData.OneHourUpdateAt = time.Now()\n\tcase constant.ThreeHours:\n\t\ttopData.ThreeHours = newTopValues\n\t\ttopData.ThreeHoursUpdateAt = time.Now()\n\tcase constant.TwelveHours:\n\t\ttopData.TwelveHours = newTopValues\n\t\ttopData.TwelveHoursUpdateAt = time.Now()\n\tcase constant.OneDay:\n\t\ttopData.OneDay = newTopValues\n\t\ttopData.OneDayUpdateAt = time.Now()\n\tcase constant.SevenDays:\n\t\ttopData.SevenDays = newTopValues\n\t\ttopData.SevenDaysUpdateAt = time.Now()\n\tcase constant.ThirtyDays:\n\t\ttopData.ThirtyDays = newTopValues\n\t\ttopData.ThirtyDaysUpdateAt = time.Now()\n\t}\n\n\terr = metricTopDao.CreateOrUpdate(topData)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/service/nat_job.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/nat\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dto\"\n\t\"fmt\"\n)\n\nfunc (t *TopJobService) natTopJob(ctx context.Context, par *dto.TopJobReq) (*jobParam, error) {\n\n\tnatListRsp, err := t.Store.NetworkRpcClient.ListNat(ctx, &pb.ListNatReq{\n\t\tPageSize: -1,\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"error query rpc ListLb: %v\", err)\n\t\treturn nil, err\n\t}\n\tnatList := natListRsp.NatSet\n\thasAz := false\n\tif len(natList) > 0 && natList[len(natList)-1].Az != \"\" {\n\t\thasAz = true\n\t}\n\n\tallIdToInstanceMap := make(map[string]instanceInfo)\n\tregionToInstancesMap := make(regionAzGroup)\n\tazToInstancesMap := make(regionAzGroup)\n\tfor _, m := range natList {\n\t\tinstance := instanceInfo{\n\t\t\tId:     m.NatId,\n\t\t\tName:   m.NatName,\n\t\t\tRegion: m.Region,\n\t\t}\n\t\tallIdToInstanceMap[m.NatId] = instance\n\t\trz := regionAz{\n\t\t\tRegion: m.Region,\n\t\t\tAz:     m.Az,\n\t\t}\n\t\tregionToInstancesMap[rz] = append(regionToInstancesMap[rz], instance)\n\t\tazToInstancesMap[rz] = append(azToInstancesMap[rz], instance)\n\t}\n\n\tif !hasAz {\n\t\tazToInstancesMap = nil\n\t}\n\n\t//需要TOP的指标\n\tmetrics := []string{nat.Nat_bps_in, nat.Nat_bps_out, nat.Nat_public_bps_in, nat.Nat_public_bps_out, nat.Nat_pps_in, nat.Nat_pps_out, nat.Nat_public_pps_in, nat.Nat_public_pps_out}\n\treturn &jobParam{\n\t\tinterval:             par.Interval,\n\t\tmetrics:              metrics,\n\t\tallIdToInstanceMap:   allIdToInstanceMap,\n\t\tregionToInstancesMap: regionToInstancesMap,\n\t\tazToInstancesMap:     azToInstancesMap,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/service/redis_job.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_database/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/redis\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dto\"\n\t\"fmt\"\n)\n\nfunc (t *TopJobService) redisTopJob(ctx context.Context, par *dto.TopJobReq) (*jobParam, error) {\n\tredisListRsp, err := t.Store.DatabaseRpcClient.ListDatabase(ctx, &pb.ProductDbListRequest{\n\t\tPageSize:     -1,\n\t\tDataBaseType: \"redis\",\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"error query rpc ListRedis: %v\", err)\n\t\treturn nil, err\n\t}\n\tredisList := redisListRsp.Data\n\thasAz := false\n\tif len(redisList) > 0 && redisList[len(redisList)-1].Az != \"\" {\n\t\thasAz = true\n\t}\n\n\tallIdToInstanceMap := make(map[string]instanceInfo)\n\tregionToInstancesMap := make(regionAzGroup)\n\tazToInstancesMap := make(regionAzGroup)\n\tfor _, r := range redisList {\n\t\tlist, err := t.Store.DbRedisInstanceDao.GetDbRedisInstance(r.Id)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tinstance := instanceInfo{\n\t\t\tId:     r.Id,\n\t\t\tName:   r.Name,\n\t\t\tRegion: r.Region,\n\t\t}\n\t\tfor _, v := range *list {\n\t\t\tinstance.Instances = append(instance.Instances, instanceInfo{\n\t\t\t\tId:     v.SubInstanceId,\n\t\t\t\tName:   r.Name,\n\t\t\t\tRegion: r.Region,\n\t\t\t})\n\t\t}\n\t\tallIdToInstanceMap[r.Id] = instance\n\t\trz := regionAz{\n\t\t\tRegion: r.Region,\n\t\t\tAz:     r.Az,\n\t\t}\n\t\tregionToInstancesMap[rz] = append(regionToInstancesMap[rz], instance)\n\t\tazToInstancesMap[rz] = append(azToInstancesMap[rz], instance)\n\t}\n\n\tif !hasAz {\n\t\tazToInstancesMap = nil\n\t}\n\n\t//需要TOP的指标\n\tmetrics := []string{redis.Redis_cpu_load, redis.Redis_memory_load, redis.Redis_connection_usage}\n\treturn &jobParam{\n\t\tinterval:             par.Interval,\n\t\tmetrics:              metrics,\n\t\tallIdToInstanceMap:   allIdToInstanceMap,\n\t\tregionToInstancesMap: regionToInstancesMap,\n\t\tazToInstancesMap:     azToInstancesMap,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/service/ebs_volume_job.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_blockstorage/v1alpha/gen\"\n\tebsVolume \"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/ebs_volume\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dto\"\n)\n\nfunc (n *TopJobService) ehddEbsVolumeTopJob(ctx context.Context, par *dto.TopJobReq) (*jobParam, error) {\n\tebsVolumeListRsp, err := n.Store.EbsVolumeRpcClient.ListEbsVolume(ctx, &pb.ListVolumeReq{\n\t\tPageSize:   -1,\n\t\tVolumeType: []string{\"ehdd\"},\n\t})\n\tif err != nil {\n\t\terr = fmt.Errorf(\"error query rpc ListEbsVolume: %v\", err)\n\t\treturn nil, err\n\t}\n\tebsVolumeList := ebsVolumeListRsp.List\n\tIdToInstanceMap := make(map[string]instanceInfo)\n\tregionToInstancesMap := make(regionAzGroup)\n\tazToInstancesMap := make(regionAzGroup)\n\tfor _, ebsVolume := range ebsVolumeList {\n\t\tinstance := instanceInfo{\n\t\t\tId:     ebsVolume.VmId,\n\t\t\tName:   ebsVolume.Name,\n\t\t\tRegion: ebsVolume.Region,\n\t\t}\n\t\tIdToInstanceMap[ebsVolume.VmId] = instance\n\t\tif ebsVolume.Region != \"\" {\n\t\t\tr := regionAz{\n\t\t\t\tRegion: ebsVolume.Region,\n\t\t\t}\n\t\t\tregionToInstancesMap[r] = append(regionToInstancesMap[r], instance)\n\t\t}\n\t\tif ebsVolume.Region != \"\" && ebsVolume.Az != \"\" {\n\t\t\trz := regionAz{\n\t\t\t\tRegion: ebsVolume.Region,\n\t\t\t\tAz:     ebsVolume.Az,\n\t\t\t}\n\t\t\tazToInstancesMap[rz] = append(azToInstancesMap[rz], instance)\n\t\t}\n\t}\n\t// 查对应挂载云主机的指标数据\n\tmetrics := ebsVolume.EbsVolumeTopEhddMetrics\n\treturn &jobParam{\n\t\tinterval:             par.Interval,\n\t\tmetrics:              metrics,\n\t\tallIdToInstanceMap:   IdToInstanceMap,\n\t\tregionToInstancesMap: regionToInstancesMap,\n\t\tazToInstancesMap:     azToInstancesMap,\n\t}, nil\n}\n\nfunc (n *TopJobService) ssdEbsVolumeTopJob(ctx context.Context, par *dto.TopJobReq) (*jobParam, error) {\n\tebsVolumeListRsp, err := n.Store.EbsVolumeRpcClient.ListEbsVolume(ctx, &pb.ListVolumeReq{\n\t\tPageSize:   -1,\n\t\tVolumeType: []string{\"ssd3.0\"},\n\t})\n\tif err != nil {\n\t\terr = fmt.Errorf(\"error query rpc ListEbsVolume: %v\", err)\n\t\treturn nil, err\n\t}\n\tebsVolumeList := ebsVolumeListRsp.List\n\tIdToInstanceMap := make(map[string]instanceInfo)\n\tregionToInstancesMap := make(regionAzGroup)\n\tazToInstancesMap := make(regionAzGroup)\n\tfor _, ebsVolume := range ebsVolumeList {\n\t\tinstance := instanceInfo{\n\t\t\tId:     ebsVolume.VmId,\n\t\t\tName:   ebsVolume.Name,\n\t\t\tRegion: ebsVolume.Region,\n\t\t}\n\t\tIdToInstanceMap[ebsVolume.VmId] = instance\n\t\tif ebsVolume.Region != \"\" {\n\t\t\tr := regionAz{\n\t\t\t\tRegion: ebsVolume.Region,\n\t\t\t}\n\t\t\tregionToInstancesMap[r] = append(regionToInstancesMap[r], instance)\n\t\t}\n\t\tif ebsVolume.Region != \"\" && ebsVolume.Az != \"\" {\n\t\t\trz := regionAz{\n\t\t\t\tRegion: ebsVolume.Region,\n\t\t\t\tAz:     ebsVolume.Az,\n\t\t\t}\n\t\t\tazToInstancesMap[rz] = append(azToInstancesMap[rz], instance)\n\t\t}\n\t}\n\t// 查对应挂载云主机的指标数据\n\tmetrics := ebsVolume.EbsVolumeTopSSDMetrics\n\treturn &jobParam{\n\t\tinterval:             par.Interval,\n\t\tmetrics:              metrics,\n\t\tallIdToInstanceMap:   IdToInstanceMap,\n\t\tregionToInstancesMap: regionToInstancesMap,\n\t\tazToInstancesMap:     azToInstancesMap,\n\t}, nil\n}\n\nfunc (n *TopJobService) EbsVolumeTopJob(ctx context.Context, par *dto.TopJobReq) (*jobParam, error) {\n\tebsVolumeListRsp, err := n.Store.EbsVolumeRpcClient.ListEbsVolume(ctx, &pb.ListVolumeReq{\n\t\tPageSize: -1,\n\t})\n\tif err != nil {\n\t\terr = fmt.Errorf(\"error query rpc ListEbsVolume: %v\", err)\n\t\treturn nil, err\n\t}\n\tebsVolumeList := ebsVolumeListRsp.List\n\tIdToInstanceMap := make(map[string]instanceInfo)\n\tregionToInstancesMap := make(regionAzGroup)\n\tazToInstancesMap := make(regionAzGroup)\n\tfor _, ebsVolume := range ebsVolumeList {\n\t\tinstance := instanceInfo{\n\t\t\tId:     ebsVolume.VmId,\n\t\t\tName:   ebsVolume.Name,\n\t\t\tRegion: ebsVolume.Region,\n\t\t}\n\t\tIdToInstanceMap[ebsVolume.VmId] = instance\n\t\tif ebsVolume.Region != \"\" {\n\t\t\tr := regionAz{\n\t\t\t\tRegion: ebsVolume.Region,\n\t\t\t}\n\t\t\tregionToInstancesMap[r] = append(regionToInstancesMap[r], instance)\n\t\t}\n\t\tif ebsVolume.Region != \"\" && ebsVolume.Az != \"\" {\n\t\t\trz := regionAz{\n\t\t\t\tRegion: ebsVolume.Region,\n\t\t\t\tAz:     ebsVolume.Az,\n\t\t\t}\n\t\t\tazToInstancesMap[rz] = append(azToInstancesMap[rz], instance)\n\t\t}\n\t}\n\t// 查对应挂载云主机的指标数据\n\tmetrics := ebsVolume.EbsVolumeTopEhddMetrics\n\treturn &jobParam{\n\t\tinterval:             par.Interval,\n\t\tmetrics:              metrics,\n\t\tallIdToInstanceMap:   IdToInstanceMap,\n\t\tregionToInstancesMap: regionToInstancesMap,\n\t\tazToInstancesMap:     azToInstancesMap,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/service/lb_job.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_network/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/lb\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dto\"\n\t\"fmt\"\n)\n\nfunc (t *TopJobService) lbTopJob(ctx context.Context, par *dto.TopJobReq) (*jobParam, error) {\n\t\n\tlbListRsp, err := t.Store.NetworkRpcClient.ListLb(ctx, &pb.ListLbReq{\n\t\tPageSize: -1,\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"error query rpc ListLb: %v\", err)\n\t\treturn nil, err\n\t}\n\tlbList := lbListRsp.LoadBalancerSet\n\thasAz := false\n\tif len(lbList) > 0 && lbList[len(lbList)-1].Az != \"\" {\n\t\thasAz = true\n\t}\n\n\tallIdToInstanceMap := make(map[string]instanceInfo)\n\tregionToInstancesMap := make(regionAzGroup)\n\tazToInstancesMap := make(regionAzGroup)\n\tfor _, m := range lbList {\n\t\tinstance := instanceInfo{\n\t\t\tId:     m.LoadBalancerId,\n\t\t\tName:   m.LoadBalancerName,\n\t\t\tRegion: m.Region,\n\t\t}\n\t\tallIdToInstanceMap[m.LoadBalancerId] = instance\n\t\trz := regionAz{\n\t\t\tRegion: m.Region,\n\t\t\tAz:     m.Az,\n\t\t}\n\t\tregionToInstancesMap[rz] = append(regionToInstancesMap[rz], instance)\n\t\tazToInstancesMap[rz] = append(azToInstancesMap[rz], instance)\n\t}\n\n\tif !hasAz {\n\t\tazToInstancesMap = nil\n\t}\n\n\t//需要TOP的指标\n\tmetrics := []string{lb.Lb_flow_in, lb.Lb_flow_out, lb.Lb_pps_in, lb.Lb_pps_out, lb.Lb_cps, lb.Lb_activeconn, lb.Lb_concurrentconn, lb.Lb_inactiveconn}\n\treturn &jobParam{\n\t\tinterval:             par.Interval,\n\t\tmetrics:              metrics,\n\t\tallIdToInstanceMap:   allIdToInstanceMap,\n\t\tregionToInstancesMap: regionToInstancesMap,\n\t\tazToInstancesMap:     azToInstancesMap,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/modules/jobs/service/vm_job.go\n```golang\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\tpb \"ezone.ksyun.com/ezone/luban/luban_api/resourceapis/resource_compute/v1alpha/gen\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/common/tsdbql_template/vm\"\n\t\"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/dto\"\n)\n\nfunc (n *TopJobService) vmTopJob(ctx context.Context, par *dto.TopJobReq) (*jobParam, error) {\n\tvmListRsp, err := n.Store.VmRpcClient.ListVm(ctx, &pb.ListVmReq{\n\t\tPageSize: -1,\n\t})\n\tif err != nil {\n\t\terr = fmt.Errorf(\"error query rpc ListVm: %v\", err)\n\t\treturn nil, err\n\t}\n\tvmList := vmListRsp.DataList\n\tIdToInstanceMap := make(map[string]instanceInfo)\n\tregionToInstancesMap := make(regionAzGroup)\n\tazToInstancesMap := make(regionAzGroup)\n\tfor _, vm := range vmList {\n\t\tinstance := instanceInfo{\n\t\t\tId:     vm.Id,\n\t\t\tName:   vm.Name,\n\t\t\tRegion: vm.Region,\n\t\t}\n\t\tIdToInstanceMap[vm.Id] = instance\n\t\tif vm.Region != \"\" {\n\t\t\tr := regionAz{\n\t\t\t\tRegion: vm.Region,\n\t\t\t}\n\t\t\tregionToInstancesMap[r] = append(regionToInstancesMap[r], instance)\n\t\t}\n\t\tif vm.Region != \"\" && vm.Az != \"\" {\n\t\t\trz := regionAz{\n\t\t\t\tRegion: vm.Region,\n\t\t\t\tAz:     vm.Az,\n\t\t\t}\n\t\t\tazToInstancesMap[rz] = append(azToInstancesMap[rz], instance)\n\t\t}\n\t}\n\tmetrics := vm.VmTopMetrics\n\treturn &jobParam{\n\t\tinterval:             par.Interval,\n\t\tmetrics:              metrics,\n\t\tallIdToInstanceMap:   IdToInstanceMap,\n\t\tregionToInstancesMap: regionToInstancesMap,\n\t\tazToInstancesMap:     azToInstancesMap,\n\t}, nil\n}\n\n```\n\nFile path: /Users/mac/Desktop/woker_code/monitor/router/router.go\n```golang\npackage router\n\nimport (\n\t\"ezone.ksyun.com/ezone/luban/monitor/docs\"\n\tbasicCtl \"ezone.ksyun.com/ezone/luban/monitor/modules/basic/controller\"\n\tblockStorageCtl \"ezone.ksyun.com/ezone/luban/monitor/modules/blockstorage/controller\"\n\tcomputeCtl \"ezone.ksyun.com/ezone/luban/monitor/modules/compute/controller\"\n\tdatabaseCtl \"ezone.ksyun.com/ezone/luban/monitor/modules/database/controller\"\n\tjobsCtl \"ezone.ksyun.com/ezone/luban/monitor/modules/jobs/controller\"\n\tnetworkCtl \"ezone.ksyun.com/ezone/luban/monitor/modules/network/controller\"\n\tobjectStorageCtl \"ezone.ksyun.com/ezone/luban/monitor/modules/object_storage/controller\"\n\tserverCtl \"ezone.ksyun.com/ezone/luban/monitor/modules/server/controller\"\n\tswitchsCtl \"ezone.ksyun.com/ezone/luban/monitor/modules/switch/controller\"\n\t\"github.com/gin-gonic/gin\"\n\tswaggerFiles \"github.com/swaggo/files\"\n\tginSwagger \"github.com/swaggo/gin-swagger\"\n)\n\n/******************************************** 路由定义 *****************************************************************\n* 1. 路由定义在此文件中，每个模块的路由定义在对应的分组中，如：服务器相关的路由定义在 machine 分组中\n* 2. 路由定义的格式为：分组名.请求方法(请求路径, 控制器方法)\n* 3. 路由定义的请求方法为：Any\n* 4. 路由定义的请求路径为：/open_api/分组名/请求路径 ，如：/open_api/machine/details，其中请求路径如果需要区分请使用下划线分割\n* 5. 路由定义的控制器方法为：(&controller.控制器名{}).控制器方法名 ，如：dataCtl.NewUserController().List\n***********************************************************************************************************************/\n\nfunc InitRouter(engine *gin.Engine) {\n\n\t// 定义路由规则\n\tapi := engine.Group(\"/monitor/v2\")\n\n\t// 定时任务\n\tvar job = api.Group(\"/jobs\")\n\t{\n\t\t//resource_type : eip,nat,lb,vm,mysql,redis....\n\t\t//interval : 0.5h,1h,3h,1d,7d,30d\n\t\t//eg: localhost:8083/monitor/v2/jobs/top/eip/1h\n\t\tjob.GET(\"/top/:resource_type/:interval\", jobsCtl.NewJobsController().TopJob) // 获取指定资源类型和时间间隔的top任务数据   todo Action  获取TopJob数据Monitor\n\t}\n\n\t// 监控大屏\n\tvar dashboard = api.Group(\"/dashboard\")\n\t{\n\t\tdashboard.POST(\"/create\", basicCtl.NewDashboardController().Create)                     // 创建新的监控大屏   todo Action  CreateDashboardMonitor\n\t\tdashboard.POST(\"/update\", basicCtl.NewDashboardController().Update)                     // 更新监控大屏配置   todo Action  UpdateDashboardMonitor\n\t\tdashboard.POST(\"/delete\", basicCtl.NewDashboardController().Delete)                     // 删除监控大屏   todo Action  DeleteDashboardMonitor\n\t\tdashboard.POST(\"/list\", basicCtl.NewDashboardController().List)                         // 获取监控大屏列表   todo Action  ListDashboardMonitor\n\t\tdashboard.POST(\"/detail\", basicCtl.NewDashboardController().Detail)                     // 获取监控大屏详细信息   todo Action  DetailDashboardMonitor\n\t\tdashboard.POST(\"/physical_device\", basicCtl.NewDashboardController().PhysicalDevice)    // 获取监控大屏的物理设备信息   todo Action  PhysicalDeviceDashboardMonitor\n\t\tdashboard.POST(\"/compute_pool_line\", basicCtl.NewDashboardController().ComputePoolLine) // 获取监控大屏计算资源池的线图   todo Action  ComputePoolLineDashboardMonitor\n\t\tdashboard.POST(\"/ebs_pool_line\", basicCtl.NewDashboardController().EbsPoolLine)         // 获取监控大屏EBS资源池的线图   todo Action  EbsPoolLineDashboardMonitor\n\t\tdashboard.POST(\"/object_pool_line\", basicCtl.NewDashboardController().ObjectPoolLine)   // 获取监控大屏对象存储资源池的线图   todo Action  ObjectPoolLineDashboardMonitor\n\t}\n\n\t// 网络相关\n\tvar network = api.Group(\"/network\")\n\t{\n\t\t//网络资源池\n\t\tnetwork.POST(\"/network_pool/overview_alert\", networkCtl.NewNetworkPoolController().OverviewAlert)     // 网络资源池告警概览   todo Action  NetworkPoolOverviewAlertMonitor\n\t\tnetwork.POST(\"/network_pool/overview_monitor\", networkCtl.NewNetworkPoolController().OverviewMonitor) // 网络资源池监控概览   todo Action  NetworkPoolOverviewMonitorMonitor\n\t\tnetwork.POST(\"/network_pool/overview_line\", networkCtl.NewNetworkPoolController().OverviewLine)       // 网络资源池概览线图   todo Action  NetworkPoolOverviewLineMonitor\n\n\t\tnetwork.POST(\"/network_pool/lb/list\", networkCtl.NewNetworkPoolController().ListLBPool)   // 网络资源池负载均衡列表   todo Action  LBPoolListMonitor\n\t\tnetwork.POST(\"/network_pool/lb/detail\", nil)                                              // 网络资源池-负载均衡监控详情   todo Action\n\t\tnetwork.POST(\"/network_pool/eip/list\", networkCtl.NewNetworkPoolController().ListEIPPool) // 网络资源池弹性IP列表   todo Action  EIPPoolListMonitor\n\t\tnetwork.POST(\"/network_pool/eip/detail\", nil)                                             // 网络资源池-弹性IP监控详情   todo Action\n\t\tnetwork.POST(\"/network_pool/nat/list\", networkCtl.NewNetworkPoolController().ListNatPool) // 网络资源池NAT列表   todo Action  NatPoolListMonitor\n\t\tnetwork.POST(\"/network_pool/nat/detail\", nil)                                             // 网络资源池-NAT监控详情   todo Action\n\t\tnetwork.POST(\"/network_pool/bm/list\", networkCtl.NewNetworkPoolController().ListBMPool)   // 网络资源池裸金属列表   todo Action  BMPoolListMonitor\n\t\tnetwork.POST(\"/network_pool/bm/detail\", nil)                                              // 网络资源池-裸金属监控详情   todo Action\n\t\tnetwork.POST(\"/network_pool/sl/list\", networkCtl.NewNetworkPoolController().ListSLPool)   // 网络资源池专线列表   todo Action  SLPoolListMonitor\n\t\tnetwork.POST(\"/network_pool/sl/detail\", nil)                                              // 网络资源池-专线监控详情   todo Action\n\n\t\tnetwork.POST(\"/network_pool/detail_line\", networkCtl.NewNetworkPoolController().DetailLine) // 网络资源池监控详情线图   todo Action  NetworkPoolDetailLineMonitor\n\t\tnetwork.POST(\"/network_pool/detail_top\", networkCtl.NewNetworkPoolController().DetailTop)   // 网络资源池监控详情Top图   todo Action  NetworkPoolDetailTopMonitor\n\n\t\t//云产品-EIP\n\t\tnetwork.POST(\"/product/eip/overview_alert\", networkCtl.NewProductEipController().OverviewAlert) // 云产品EIP告警概览   todo Action  ProductEipOverviewAlertMonitor\n\t\tnetwork.POST(\"/product/eip/overview_top\", networkCtl.NewProductEipController().OverviewTop)     // 云产品EIP概览Top信息   todo Action  ProductEipOverviewTopMonitor\n\n\t\tnetwork.POST(\"/product/eip_detail\", networkCtl.NewProductEipController().EipInfo) // 云产品EIP详细信息   todo Action  ProductEipDetailMonitor\n\t\tnetwork.POST(\"/product/eip/line\", networkCtl.NewProductEipController().EipLine)   // 云产品EIP监控线图   todo Action  ProductEipLineMonitor\n\n\t\t//云产品-LB\n\t\tnetwork.POST(\"/product/lb/list\", networkCtl.NewProductLbController().List)         // 云产品负载均衡列表   todo Action  ProductLbListMonitor\n\t\tnetwork.POST(\"/product/lb/overview\", networkCtl.NewProductLbController().Overview) // 云产品负载均衡概览   todo Action  ProductLbOverviewMonitor\n\t\tnetwork.POST(\"/product/lb/overview_top\", networkCtl.NewProductLbController().Top)  // 云产品负载均衡概览Top信息   todo Action  ProductLbOverviewTopMonitor\n\t\tnetwork.POST(\"/product/lb/line\", networkCtl.NewProductLbController().Line)         // 云产品负载均衡监控线图   todo Action  ProductLbLineMonitor\n\n\t\t//云产品-nat\n\t\tnetwork.POST(\"/product/nat/overview\", networkCtl.NewProductNatController().Overview) // 云产品NAT概览   todo Action  ProductNatOverviewMonitor\n\t\tnetwork.POST(\"/product/nat/overview_top\", networkCtl.NewProductNatController().Top)  // 云产品NAT概览Top信息   todo Action  ProductNatOverviewTopMonitor\n\t\tnetwork.POST(\"/product/nat/line\", networkCtl.NewProductNatController().Line)         // 云产品NAT监控线图   todo Action  ProductNatLineMonitor\n\t}\n\n\t// 服务器相关\n\tvar server = api.Group(\"/server\")\n\t{\n\t\tserver.POST(\"/physical/overview_alert\", serverCtl.NewServerController().PhysicalOverviewAlert)     // 服务器概览的告警信息   todo Action  ServerPhysicalOverviewAlertMonitor\n\t\tserver.POST(\"/physical/overview_monitor\", serverCtl.NewServerController().PhysicalOverviewMonitor) // 服务器概览的监控状态   todo Action  ServerPhysicalOverviewMonitorMonitor\n\t\tserver.POST(\"/physical/overview_top\", serverCtl.NewServerController().PhysicalOverviewTop)         // 服务器概览的Top信息   todo Action  ServerPhysicalOverviewTopMonitor\n\t\tserver.POST(\"/physical/list\", serverCtl.NewServerController().PhysicalList)                        // 服务器列表   todo Action  ServerPhysicalListMonitor\n\t\tserver.POST(\"/physical/details_overview\", serverCtl.NewServerController().PhysicalDetailsOverview) // 服务器详情概览   todo Action  ServerPhysicalDetailsOverviewMonitor\n\t\tserver.POST(\"/physical/details_line\", serverCtl.NewServerController().PhysicalDetailsLine)         // 服务器详情的线图   todo Action  ServerPhysicalDetailsLineMonitor\n\t\tserver.GET(\"/physical/work_list\", serverCtl.NewServerController().PhysicalWorkList)                // 服务器网卡列表   todo Action  ServerPhysicalWorkListMonitor\n\t\tserver.POST(\"/physical/hardware\", serverCtl.NewServerController().PhysicalHardware)                // 服务器硬件信息   todo Action  ServerPhysicalHardwareMonitor\n\t\tserver.POST(\"/physical/monitoring_status\", serverCtl.NewServerController().MonitoringStatus)       // 服务器交换机的监控状态   todo Action  ServerPhysicalMonitoringStatusMonitor\n\t}\n\n\t// 交换机相关\n\tvar switchboard = api.Group(\"/switch\")\n\t{\n\t\tswitchboard.POST(\"/switch/overview_alert\", switchsCtl.NewSwitchController().SwitchOverviewAlert)     // 交换机概览告警信息   todo Action  SwitchOverviewAlertMonitor\n\t\tswitchboard.POST(\"/switch/overview_monitor\", switchsCtl.NewSwitchController().SwitchOverviewMonitor) // 交换机概览监控状态   todo Action  SwitchOverviewMonitorMonitor\n\t\tswitchboard.POST(\"/switch/overview_top\", switchsCtl.NewSwitchController().SwitchOverviewTop)         // 交换机概览Top信息   todo Action  SwitchOverviewTopMonitor\n\t\tswitchboard.POST(\"/switch/list\", switchsCtl.NewSwitchController().SwitchList)                        // 交换机列表   todo Action  SwitchListMonitor\n\t\tswitchboard.GET(\"/switch/details_overview\", switchsCtl.NewSwitchController().SwitchDetailsOverview)  // 交换机详情概览   todo Action  SwitchDetailsOverviewMonitor\n\t\tswitchboard.POST(\"/switch/details_line\", switchsCtl.NewSwitchController().SwitchDetailsLine)         // 交换机详情线图   todo Action  SwitchDetailsLineMonitor\n\t\tswitchboard.POST(\"/switch/hardware\", switchsCtl.NewSwitchController().SwitchHardware)                // 交换机硬件信息   todo Action  SwitchHardwareMonitor\n\t\tswitchboard.POST(\"/switch/interface_line\", switchsCtl.NewSwitchController().SwitchInterfaceLine)     // 交换机接口线图   todo Action  SwitchInterfaceLineMonitor\n\t\tswitchboard.POST(\"/switch/interface_list\", switchsCtl.NewSwitchController().SwitchInterfaceList)     // 交换机接口列表   todo Action  SwitchInterfaceListMonitor\n\t}\n\n\t//database相关\n\tvar database = api.Group(\"/db\")\n\t{\n\t\tdatabase.POST(\"/db_pool/overview_alert\", databaseCtl.NewDbkPoolController().DbPoolOverviewAlert)     // 数据库资源池告警概览   todo Action  DbPoolOverviewAlertMonitor\n\t\tdatabase.POST(\"/db_pool/overview_monitor\", databaseCtl.NewDbkPoolController().DbPoolOverviewMonitor) // 数据库资源池监控概览   todo Action  DbPoolOverviewMonitorMonitor\n\t\tdatabase.POST(\"/db_pool/overview_line\", databaseCtl.NewDbkPoolController().DbPoolOverviewLine)       // 数据库资源池概览线图   todo Action  DbPoolOverviewLineMonitor\n\t\tdatabase.POST(\"/db_pool/list\", databaseCtl.NewDbkPoolController().DbPoolList)                        // 数据库资源池列表   todo Action  DbPoolListMonitor\n\t\tdatabase.POST(\"/db_pool/details_line\", databaseCtl.NewDbkPoolController().DbPoolDetailsLine)         // 数据库资源池详情线图   todo Action  DbPoolDetailsLineMonitor\n\n\t\tdatabase.POST(\"/product/list\", databaseCtl.NewDatabaseController().List)                           // 数据库产品列表   todo Action  DatabaseListMonitor\n\t\tdatabase.POST(\"/product/overview_top\", databaseCtl.NewDatabaseController().Top)                    // 数据库产品概览Top信息   todo Action  DatabaseOverviewTopMonitor\n\t\tdatabase.POST(\"/product/redis_sub_list\", databaseCtl.NewDatabaseController().RedisSubInstanceList) // 数据库产品Redis子实例列表   todo Action  DatabaseRedisSubListMonitor\n\t\tdatabase.POST(\"/product/line\", databaseCtl.NewDatabaseController().Line)                           // 数据库产品监控线图   todo Action  DatabaseLineMonitor\n\t\tdatabase.POST(\"/product/redis/log\", databaseCtl.NewDatabaseController().RedisLog)                  // 数据库产品Redis日志信息   todo Action  DatabaseRedisLogMonitor\n\t\tdatabase.POST(\"/product/mysql/log\", databaseCtl.NewDatabaseController().MysqlLog)                  // 数据库产品MySQL日志信息   todo Action  DatabaseMysqlLogMonitor\n\t}\n\n\t// 计算相关\n\tvar compute = api.Group(\"/compute\")\n\t{\n\t\t// 计算资源池\n\t\tcompute.POST(\"/compute_pool/overview_alert\", computeCtl.NewComputePoolController().OverviewAlert)     // 计算资源池告警概览   todo Action  ComputePoolOverviewAlertMonitor\n\t\tcompute.POST(\"/compute_pool/overview_monitor\", computeCtl.NewComputePoolController().OverviewMonitor) // 计算资源池监控概览   todo Action  ComputePoolOverviewMonitorMonitor\n\t\tcompute.POST(\"/compute_pool/overview_line\", computeCtl.NewComputePoolController().OverviewLine)       // 计算资源池概览线图   todo Action  ComputePoolOverviewLineMonitor\n\t\tcompute.POST(\"/compute_pool/list\", computeCtl.NewComputePoolController().List)                        // 计算资源池列表   todo Action  ComputePoolListMonitor\n\t\tcompute.POST(\"/compute_pool/detail_line\", computeCtl.NewComputePoolController().DetailLine)           // 计算资源池详情线图   todo Action  ComputePoolDetailLineMonitor\n\n\t\t// vm 云主机\n\t\tcompute.POST(\"/product/vm/overview_monitor\", computeCtl.NewVmController().OverviewMonitor)      // 云主机概览监控   todo Action  VmOverviewMonitor\n\t\tcompute.POST(\"/product/vm/overview_top\", computeCtl.NewVmController().OverviewTop)              // 云主机概览Top信息   todo Action  VmOverviewTopMonitor\n\t\tcompute.POST(\"/product/vm/detail_metrics\", computeCtl.NewVmController().DetailMetrics)          // 云主机详情监控指标   todo Action  VmDetailMetricsMonitor\n\t\tcompute.POST(\"/product/vm/detail_metric_lines\", computeCtl.NewVmController().DetailMetricLines) // 云主机详情监控线图   todo Action  VmDetailMetricLinesMonitor\n\t}\n\t// 块存储相关\n\tvar blockStorage = api.Group(\"/block_storage\")\n\t{\n\t\tblockStorage.POST(\"ebs_pool/overview_alert\", blockStorageCtl.NewEbsPoolController().OverviewAlert)                 // EBS资源池告警概览   todo Action  EbsPoolOverviewAlertMonitor\n\t\tblockStorage.POST(\"ebs_pool/overview\", blockStorageCtl.NewEbsPoolController().Overview)                            // EBS资源池概览   todo Action  EbsPoolOverviewMonitor\n\t\tblockStorage.POST(\"ebs_pool/overview_line\", blockStorageCtl.NewEbsPoolController().OverviewLine)                   // EBS资源池概览线图   todo Action  EbsPoolOverviewLineMonitor\n\t\tblockStorage.POST(\"ebs_pool/list\", blockStorageCtl.NewEbsPoolController().List)                                    // EBS资源池列表   todo Action  EbsPoolListMonitor\n\t\tblockStorage.POST(\"ebs_pool/detail_metric_overview\", blockStorageCtl.NewEbsPoolController().DetailMetricOverview)  // EBS资源池详情指标概览   todo Action  EbsPoolDetailMetricOverviewMonitor\n\t\tblockStorage.POST(\"ebs_pool/detail_metric_lines\", blockStorageCtl.NewEbsPoolController().DetailMetricLines)        // EBS资源池详情指标线图   todo Action  EbsPoolDetailMetricLinesMonitor\n\t\tblockStorage.GET(\"ebs_pool/list_optional_condition\", blockStorageCtl.NewEbsPoolController().ListOptionalCondition) // EBS资源池列表可选条件   todo Action  EbsPoolListOptionalConditionMonitor\n\n\t\t// ebs_volume\n\t\tblockStorage.POST(\"ebs_volume/overview_top\", blockStorageCtl.NewEbsVolumeController().OverviewTop)              // EBS卷概览Top信息   todo Action  EbsVolumeOverviewTopMonitor\n\t\tblockStorage.POST(\"ebs_volume/overview\", blockStorageCtl.NewEbsVolumeController().Overview)                     // EBS卷概览   todo Action  EbsVolumeOverviewMonitor\n\t\tblockStorage.POST(\"ebs_volume/detail_metric\", blockStorageCtl.NewEbsVolumeController().DetailMetric)            // EBS卷详情指标   todo Action  EbsVolumeDetailMetricMonitor\n\t\tblockStorage.POST(\"ebs_volume/detail_metric_lines\", blockStorageCtl.NewEbsVolumeController().DetailMetricLines) // EBS卷详情指标线图   todo Action  EbsVolumeDetailMetricLinesMonitor\n\t}\n\n\t// 对象存储\n\tvar objectStorage = api.Group(\"/object_storage\")\n\t{\n\t\t// 资源池\n\t\tobjectStorage.POST(\"object_pool/overview_alert\", objectStorageCtl.NewObjectPoolController().OverviewAlert)                 // 对象存储资源池概览告警  todo Action  OverviewPoolAlertMonitor\n\t\tobjectStorage.POST(\"object_pool/overview_monitor\", objectStorageCtl.NewObjectPoolController().OverviewMonitor)             // 对象存储资源池概览基础信息 todo Action OverviewPoolMonitor\n\t\tobjectStorage.POST(\"object_pool/overview_line\", objectStorageCtl.NewObjectPoolController().OverviewLine)                   // 对象存储资源池概览折线图 todo Action OverviewPoolLineMonitor\n\t\tobjectStorage.POST(\"object_pool/list\", objectStorageCtl.NewObjectPoolController().List)                                    // 对象存储资源池监控列表 todo Action ListPoolMonitor\n\t\tobjectStorage.POST(\"object_pool/detail_metric_overview\", objectStorageCtl.NewObjectPoolController().DetailMetricOverview)  // 对象存储资源池监控详情 todo Action DetailMetricOverviewPoolMonitor\n\t\tobjectStorage.POST(\"object_pool/detail_metric_lines\", objectStorageCtl.NewObjectPoolController().DetailMetricLines)        // 对象存储资源池监控折线图 todo Action DetailMetricLinesPoolMonitor\n\t\tobjectStorage.GET(\"object_pool/list_optional_condition\", objectStorageCtl.NewObjectPoolController().ListOptionalCondition) // 对象存储资源池列表可选条件 todo Action ListOptionalConditionPoolMonitor\n\n\t\t// 云产品\n\t\tobjectStorage.POST(\"object_volume/overview_top\", objectStorageCtl.NewObjectVolumeController().OverviewTop)              // 对象存储云产品概览TOP todo Action OverviewVolumeTopMonitor\n\t\tobjectStorage.POST(\"object_volume/overview\", objectStorageCtl.NewObjectVolumeController().Overview)                     // 对象存储云产品概览基础信息 todo Action OverviewVolumeMonitor\n\t\tobjectStorage.POST(\"object_volume/detail_metric\", objectStorageCtl.NewObjectVolumeController().DetailMetric)            // 对象存储云产品监控详情 todo Action DetailMetricVolumeMonitor\n\t\tobjectStorage.POST(\"object_volume/detail_metric_lines\", objectStorageCtl.NewObjectVolumeController().DetailMetricLines) // 对象存储云产品监控折线图 todo Action DetailMetricLinesVolumeMonitor\n\t}\n\tdocs.SwaggerInfo.Version = \"2.0\"\n\tdocs.SwaggerInfo.BasePath = \"/monitor/v2\"\n\tengine.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\n}\n\n```\n\n", "tag": ""}], "modify_time": 1726642947.1014717}
